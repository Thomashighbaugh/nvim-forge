Project Path: /home/tlh/.config/nvim

Source Tree:

```
nvim
├── ftplugin
│   └── java.lua
├── README.md
├── init.lua
├── lua
│   ├── plugins
│   │   ├── lualine.lua
│   │   ├── luasnip.lua
│   │   ├── conform.lua
│   │   ├── cheatsheet.lua
│   │   ├── telescope.lua
│   │   ├── dressing.lua
│   │   ├── treesitter.lua
│   │   ├── yanky.lua
│   │   ├── nvim-surround.lua
│   │   ├── codesnap.lua
│   │   ├── toggleterm.lua
│   │   ├── cmp.lua
│   │   ├── symbols.lua
│   │   ├── statuscol.lua
│   │   ├── web_devicons.lua
│   │   ├── mini-align.lua
│   │   ├── which-key.lua
│   │   ├── ollama.lua
│   │   ├── aisync.lua
│   │   ├── devdocs.lua
│   │   ├── dashboard.lua
│   │   ├── init.lua
│   │   ├── ollama-chat.lua
│   │   ├── rainbow-delimiters.lua
│   │   ├── neo-tree.lua
│   │   ├── dap
│   │   │   └── debug_adapter.lua
│   │   ├── nvim-notify.lua
│   │   ├── mini-indentscope.lua
│   │   ├── git.lua
│   │   ├── avante.lua
│   │   ├── ai
│   │   │   └── avante.lua
│   │   ├── noice.lua
│   │   ├── indent-blankline.lua
│   │   ├── snipe.lua
│   │   ├── flash.lua
│   │   ├── bufferline.lua
│   │   ├── nvim-lint.lua
│   │   ├── lsp
│   │   │   ├── mason.lua
│   │   │   ├── outline.lua
│   │   │   ├── trouble.lua
│   │   │   ├── nvim-navic.lua
│   │   │   ├── aerial.lua
│   │   │   ├── lazydev.lua
│   │   │   ├── lsp-config.lua
│   │   │   └── glance.lua
│   │   ├── nvim-autopairs.lua
│   │   ├── journal.lua
│   │   ├── rest.lua
│   │   ├── inc_rename.lua
│   │   ├── image_preview.lua
│   │   ├── oil.lua
│   │   └── comments.lua
│   ├── core
│   │   ├── autocommands.lua
│   │   ├── options.lua
│   │   ├── utils.lua
│   │   ├── keymaps.lua
│   │   └── usercommands.lua
│   └── code_action_utils.lua
├── spell
│   ├── en.utf-8.add
│   ├── en.dict
│   └── en.utf-8.add.spl
└── snippets
    ├── package.json
    ├── java.snippets
    ├── markdown.lua
    ├── vscode
    │   ├── org.json
    │   ├── go.json
    │   ├── lua.json
    │   ├── package.json
    │   ├── markdown.json
    │   ├── gdscript.json
    │   ├── c.json
    │   ├── gitcommit.json
    │   ├── html.json
    │   ├── frameworks
    │   │   ├── flutter.json
    │   │   ├── vue
    │   │   │   ├── html.json
    │   │   │   ├── vue.json
    │   │   │   ├── pug.json
    │   │   │   └── javascript.json
    │   │   ├── ejs.json
    │   │   └── jekyll.json
    │   ├── java.json
    │   ├── haskell.json
    │   ├── latex.json
    │   ├── sql.json
    │   ├── shell.json
    │   ├── package-lock.json
    │   ├── latex
    │   │   ├── latex-snippets.json
    │   │   └── vscode-latex-snippets.json
    │   ├── javascript
    │   │   ├── react-native-ts.json
    │   │   ├── typescript.json
    │   │   ├── react-native.json
    │   │   ├── react-ts.json
    │   │   ├── react.json
    │   │   └── javascript.json
    │   ├── rust.json
    │   ├── glsl.json
    │   ├── meson.json
    │   ├── scala.json
    │   ├── global.json
    │   ├── norg.json
    │   ├── kubernetes.json
    │   ├── cpp.json
    │   ├── css.json
    │   ├── python
    │   │   ├── comprehension.json
    │   │   ├── unittest.json
    │   │   ├── base.json
    │   │   ├── python.json
    │   │   └── debug.json
    │   └── kotlin.json
    ├── javascript.lua
    ├── all.lua
    ├── lua.lua
    └── yaml.lua

```

`/home/tlh/.config/nvim/ftplugin/java.lua`:

```````lua
--  ╭──────────────────────────────────────────────────────────╮
--  │                    JAVA CONFIGURATION                    │
--  ╰──────────────────────────────────────────────────────────╯

local jdtls_path = vim.fn.stdpath('data') .. '/mason/packages/jdtls'

local jdtls_bin_folder = jdtls_path .. 'bin/'
local jdtls_binary_path = jdtls_bin_folder .. 'jdtls'

local path_to_lsp_server = jdtls_path .. '/config_mac'
local path_to_plugins = jdtls_path .. '/plugins/'
local path_to_jar = path_to_plugins .. 'org.eclipse.equinox.launcher_1.6.800.v20240330-1250.jar'
local lombok_path = jdtls_path .. '/lombok.jar'

local root_markers = { '.git', 'mvnw', 'gradlew', 'pom.xml', 'build.gradle' }
local root_dir = vim.fs.dirname(vim.fs.find(root_markers, { upward = true })[1])

local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), ':p:h:t')
local workspace_dir = vim.fn.stdpath('data') .. '/site/java/workspace-root/' .. project_name

local bundles = {
    vim.fn.glob(
        '/Users/ilias/.config/nvim/java-debug/com.microsoft.java.debug.plugin/target/com.microsoft.java.debug.plugin-*.jar',
        1
    ),
}

vim.list_extend(bundles, vim.split(vim.fn.glob('/Users/ilias/.config/nvim/vscode-java-test/server/*.jar', 1), '\n'))

local extendedClientCapabilities = require('jdtls').extendedClientCapabilities
extendedClientCapabilities.onCompletionItemSelectedCommand = 'editor.action.triggerParameterHints'
extendedClientCapabilities.resolveAdditionalTextEditsSupport = true

local config = {
    cmd = {
        'java', -- '/opt/homebrew/Cellar/openjdk@17/17.0.5/libexec/openjdk.jdk/Contents/Home',

        '-Declipse.application=org.eclipse.jdt.ls.core.id1',
        '-Dosgi.bundles.defaultStartLevel=4',
        '-Declipse.product=org.eclipse.jdt.ls.core.product',
        '-Dlog.protocol=true',
        '-Dlog.level=ALL',
        '-javaagent:' .. lombok_path,
        '-Xmx1g',
        '--add-modules=ALL-SYSTEM',
        '--add-opens',
        'java.base/java.util=ALL-UNNAMED',
        '--add-opens',
        'java.base/java.lang=ALL-UNNAMED',

        '-jar',
        path_to_jar,
        '-configuration',
        path_to_lsp_server,
        '-data',
        workspace_dir,
    },
    root_dir = root_dir,
    vim.list_extend(
        bundles,
        vim.split(vim.fn.glob('/Users/ilias/.config/debug/vscode-java-test/server/*.jar', 1), '\n')
    ),

    on_attach = function(client, bufnr)
        vim.lsp.inlay_hint.enable(true, { bufnr = bufnr })
    end,

    settings = {
        java = {
            eclipse = {
                downloadSources = true,
            },
            maven = {
                downloadSources = true,
            },
            inlayHints = {
                parameterNames = {
                    enabled = 'all',
                },
            },
            format = {
                enabled = true,
            },
            signatureHelp = {
                enabled = true,
            },
            referencesCodeLens = {
                enabled = true,
            },
            references = {
                includeDecompiledSources = true,
            },
            completion = {
                favoriteStaticMembers = {
                    'org.hamcrest.MatcherAssert.assertThat',
                    'org.hamcrest.Matchers.*',
                    'org.hamcrest.CoreMatchers.*',
                    'org.junit.jupiter.api.Assertions.*',
                    'java.util.Objects.requireNonNull',
                    'java.util.Objects.requireNonNullElse',
                    'org.mockito.Mockito.*',
                },
                filteredTypes = {
                    'com.sun.*',
                    'io.micrometer.shaded.*',
                    'java.awt.*',
                    'jdk.*',
                    'sun.*',
                },
                guessMethodArguments = true,
            },
            contentProvider = {
                preferred = 'fernflower',
            },
            codeGeneration = {
                toString = {
                    template = '${object.className}{${member.name()}=${member.value}, ${otherMembers}}',
                },
                hashCodeEquals = {
                    useJava7Objects = true,
                },
                useBlocks = true,
            },
            extendedClientCapabilities = extendedClientCapabilities,
        },
    },

    init_options = {
        bundles = bundles,
    },

    -- init_options = {
    --     bundles = {
    --         vim.fn.glob('/Users/ilias/.config/nvim/java-debug/com.microsoft.java.debug.plugin/target/com.microsoft.java.debug.plugin-*.jar', 1),
    --     },
    -- },

    -- on_attach = function (client, bufnr)
    --     require('jdtls').setup_dap({ hotcodereplace = 'auto' })
    -- end
}
require('jdtls').start_or_attach(config)

-- Keymaps
vim.keymap.set('n', '<M-o>', "<Cmd>lua require'jdtls'.organize_imports()<CR>", { desc = 'Organize Imports' })
vim.keymap.set({ 'n', 'v' }, 'crv', "<Cmd>lua require('jdtls').extract_variable()<CR>", { desc = 'Extract Variable' })
vim.keymap.set({ 'n', 'v' }, 'crc', "<Cmd>lua require('jdtls').extract_constant()<CR>", { desc = 'Extract Constant' })
vim.keymap.set('v', 'crm', "<Esc><Cmd>lua require('jdtls').extract_method(true)<CR>", { desc = 'Extract Method' })

-- Keymaps for nvim-dap
vim.keymap.set('n', '<leader>df', "<Cmd>lua require'jdtls'.test_class()<CR>", { desc = 'Test Class' })
vim.keymap.set('n', '<leader>dn', "<Cmd>lua require'jdtls'.test_nearest_method()<CR>", { desc = 'Test Nearest Method' })

--  ╭──────────────────────────────────────────────────────────╮
--  │                 Introductions for Debug                  │
--  ╰──────────────────────────────────────────────────────────╯
-- Open a .java file
-- Set a breakpoint with <Leader>db '<cmd>DapToggleBreakpoint<cr>'
-- Call the command:
-- require('jdtls.dap').setup_dap_main_class_configs()
-- or:
-- JdtUpdateDebugConfigs
-- Then continue the debug with <Leader>dc '<cmd>DapContinue<CR>'

```````

`/home/tlh/.config/nvim/README.md`:

```````md
# Neovim Forge

My [Winchester Mystery](https://en.wikipedia.org/wiki/Winchester_Mystery_House)
Neovim Configuration, using `lazy.nvim` for plugin management and Lua as its
configuration language. My _Personal Development Environment_ (PDE) and the core tool used in cultivating my Personal Knowledge Base (PKB).

> **Warning**
> This is my personal configuration, subject to experimentation
> and radical rewrites periodically, rebases or substantially modifications
> without prior warning and other things that may make this unstable for you
> to use as it is presented.

With this in mind, **feel free to take from it as you please**, use pieces of
it or the whole thing as a basis for your own, and you are more than welcome
to **submit pull requests** if it so pleases you, that's why its on
GitHub |wink|

## Installation

To use this configuration, clone or copy it directly into your `~/.config/nvim` directory.

```sh

# Back up your old configuration if present
mv ~/.config/nim ~/.config/nvim.bak

# Now clone this one
git clone https://github.com/Thomashighbaugh/nvim-forge ~/.config/nvim

```

And that _should_ be it, if you have the prerequisites installed it should run through the lazy.nvim installation process and handle setting up everything in the process from Treesitter grammars to Mason dependencies, it might just take a few minutes so be patient.

## Configuration Structure

This configuration roughly follows that of LazyVim, with some minor changes that are mostly due to personal taste, which while arbitrary is much easier to quickly locate various things when they are arranged in the way one prefers and not an artificially imposed standard. The lion's share of the configuration exists within the `lua/` subdirectory as is the convention of Lua-based NeoVim configurations.

Unlike many other highly customized NeoVim configurations, as well as most major configuration frameworks, the configuration is not nested within a subdirectory of the Lua subdirectory named after the author, plugin or configuration, I find no need to brand this configuration in a way that makes using its parts elsewhere highly onerous and introduces a needless source of potential errors for me to deal with instead of working on code like I intend to be.

Below is a representation of the structure of the configuration in tree format

 .
├──  Dockerfile
├──  ftplugin
│ └──  java.lua
├──  init.lua
├──  lazy-lock.json
├──  lua
│ ├──  code_action_utils.lua
│ ├──  core
│ │ ├──  autocommands.lua
│ │ ├──  keymaps.lua
│ │ ├──  options.lua
│ │ ├──  usercommands.lua
│ │ └──  utils.lua
│ └──  plugins
│ ├──  aisync.lua
│ ├──  bufferline.lua
│ ├──  cmp.lua
│ ├──  codesnap.lua
│ ├──  comments.lua
│ ├──  conform.lua
│ ├──  dap
│ │ └──  debug_adapter.lua
│ ├──  dashboard.lua
│ ├──  devdocs.lua
│ ├──  dressing.lua
│ ├──  flash.lua
│ ├──  focus.lua
│ ├──  git.lua
│ ├──  image_preview.lua
│ ├──  inc_rename.lua
│ ├──  indent-blankline.lua
│ ├──  init.lua
│ ├──  lsp
│ │ ├──  aerial.lua
│ │ ├──  glance.lua
│ │ ├──  lazydev.lua
│ │ ├──  lsp-config.lua
│ │ ├──  mason.lua
│ │ ├──  nvim-navic.lua
│ │ ├──  outline.lua
│ │ └──  trouble.lua
│ ├──  lualine.lua
│ ├──  luasnip.lua
│ ├──  mini-align.lua
│ ├──  mini-indentscope.lua
│ ├──  neo-tree.lua
│ ├──  noice.lua
│ ├──  nvim-autopairs.lua
│ ├──  nvim-lint.lua
│ ├──  nvim-notify.lua
│ ├──  nvim-surround.lua
│ ├──  nvim-tree.lua
│ ├──  oil.lua
│ ├──  ollama.lua
│ ├──  rainbow-delimiters.lua
│ ├──  rest.lua
│ ├──  snipe.lua
│ ├──  ssr.lua
│ ├──  statuscol.lua
│ ├──  symbols.lua
│ ├──  telescope.lua
│ ├──  toggleterm.lua
│ ├──  treesitter.lua
│ ├──  web_devicons.lua
│ ├──  which-key.lua
│ └──  yanky.lua
├── 󰂺 README.md → .github/README.md
├──  snippets
│ ├──  all.lua
│ ├──  java.snippets
│ ├──  javascript.lua
│ ├──  lua.lua
│ ├──  markdown.lua
│ ├──  package.json
│ ├──  vscode
│ │ ├──  c.json
│ │ ├──  cpp.json
│ │ ├──  css.json
│ │ ├──  frameworks
│ │ │ ├──  ejs.json
│ │ │ ├──  flutter.json
│ │ │ ├──  jekyll.json
│ │ │ └──  vue
│ │ │ ├──  html.json
│ │ │ ├──  javascript.json
│ │ │ ├──  pug.json
│ │ │ └──  vue.json
│ │ ├──  gdscript.json
│ │ ├──  gitcommit.json
│ │ ├──  global.json
│ │ ├──  glsl.json
│ │ ├──  go.json
│ │ ├──  haskell.json
│ │ ├──  html.json
│ │ ├──  java.json
│ │ ├──  javascript
│ │ │ ├──  javascript.json
│ │ │ ├──  react-native-ts.json
│ │ │ ├──  react-native.json
│ │ │ ├──  react-ts.json
│ │ │ ├──  react.json
│ │ │ └──  typescript.json
│ │ ├──  kotlin.json
│ │ ├──  kubernetes.json
│ │ ├──  latex
│ │ │ ├──  latex-snippets.json
│ │ │ └──  vscode-latex-snippets.json
│ │ ├──  latex.json
│ │ ├──  lua.json
│ │ ├──  markdown.json
│ │ ├──  meson.json
│ │ ├──  norg.json
│ │ ├──  org.json
│ │ ├──  package-lock.json
│ │ ├──  package.json
│ │ ├──  python
│ │ │ ├──  base.json
│ │ │ ├──  comprehension.json
│ │ │ ├──  debug.json
│ │ │ ├──  python.json
│ │ │ └──  unittest.json
│ │ ├──  rust.json
│ │ ├──  scala.json
│ │ ├──  shell.json
│ │ └──  sql.json
│ └──  yaml.lua
└──  spell
├──  en.dict
├──  en.utf-8.add
└──  en.utf-8.add.spl

## Keybindings

Below are the keybind mappings used in this configuration, they are subject to change and are not exhaustive, but they should give you a good idea of how the configuration is set up and how to use it.

### General Keybindings

> [!] Note:
>
> -     means press both keys at the same time
>   → means first the key on the left then the key on the right

### Basic Navigation and Editing

| Keys                              | Mode          | Description                 |
| --------------------------------- | ------------- | --------------------------- |
| <kbd>j/k</kbd>                    | Normal/Visual | _Better_ Up/Down            |
| <kbd>/</kbd>                      | Normal        | Search                      |
| <kbd>g,</kbd>                     | Normal        | Go to the newest change     |
| <kbd>g;</kbd>                     | Normal        | Go to last change           |
| <kbd>i</kbd>                      | Normal        | _Better_ Insert             |
| <kbd>,</kbd> → <kbd>w</kbd>       | Normal        | Save                        |
| <kbd>Alt</kbd> + <kbd>Enter</kbd> | Normal        | List suggested code actions |

### Text Manipulation

| Keys                               | Mode            | Description                        |
| ---------------------------------- | --------------- | ---------------------------------- |
| <kbd>Ctrl</kbd> + <kbd>k</kbd>     | Normal          | Move line up                       |
| <kbd>Ctrl</kbd> + <kbd>j</kbd>     | Normal          | Move line down                     |
| <kbd>Ctrl</kbd> + <kbd>k</kbd>     | Visual          | Move line up visual                |
| <kbd>Ctrl</kbd> + <kbd>j</kbd>     | Visual          | Move line down visual              |
| <kbd><</kbd>                       | Visual          | Unindent lines in visual selection |
| <kbd>></kbd>                       | Visual          | Indent lines in visual selection   |
| <kbd>p</kbd>                       | Visual          | Paste without yanking              |
| <kbd>p</kbd>                       | Select(x)       | Paste without yanking              |
| <kbd>c</kbd>                       | Normal/Visual   | Change without yanking             |
| <kbd>C</kbd>                       | Normal          | Change line without yanking        |
| <kbd>Space</kbd> + <kbd>Up</kbd>   | Normal          | Add blank line below               |
| <kbd>Space</kbd> + <kbd>Down</kbd> | Normal          | Add blank line below               |
| <kbd>Ctrl</kbd> + <kbd>,</kbd>     | Insert          | Add comma after character          |
| <kbd>Ctrl</kbd> + <kbd>b</kbd>     | Insert          | Add curly with comma {},           |
| <kbd>i</kbd> + <kbd>q</kbd>        | Operator/Visual | Inner Single Quotes                |
| <kbd>i</kbd> + <kbd>Q</kbd>        | Operator/Visual | Inner Double Quotes                |
| <kbd>a</kbd> + <kbd>q</kbd>        | Operator/Visual | Around Single Quotes               |
| <kbd>a</kbd> + <kbd>Q</kbd>        | Operator/Visual | Around Double Quotes               |
| <kbd>a</kbd> + <kbd>'</kbd>        | Operator/Visual | Around Single Quotes               |
| <kbd>a</kbd> + <kbd>"</kbd>        | Operator/Visual | Around Double Quotes               |
| <kbd>i</kbd> + <kbd>r</kbd>        | Operator/Visual | Inner Brackets                     |
| <kbd>a</kbd> + <kbd>r</kbd>        | Operator/Visual | Inner Brackets                     |

### Buffer Management

| Keys                                               | Mode   | Description          |
| -------------------------------------------------- | ------ | -------------------- |
| <kbd>,</kbd> → <kbd>b</kbd> → <kbd>d</kbd>         | Normal | Delete Buffer        |
| <kbd>Leader</kbd> → <kbd>f</kbd> → <kbd>n</kbd>    | Normal | New File             |
| <kbd>Shift</kbd> + <kbd>Left</kbd>                 | Normal | Buffer Previous      |
| <kbd>Shift</kbd> + <kbd>Right</kbd>                | Normal | Buffer Next          |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>p</kbd>     | Normal | Pin Buffer           |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>k</kbd>     | Normal | Pick Buffer          |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>o</kbd>     | Normal | Close Other Buffers  |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>Left</kbd>  | Normal | Move Buffer to Left  |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>Right</kbd> | Normal | Move Buffer to Right |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>1</kbd>     | Normal | Go to Buffer 1       |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>2</kbd>     | Normal | Go to Buffer 2       |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>3</kbd>     | Normal | Go to Buffer 3       |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>4</kbd>     | Normal | Go to Buffer 4       |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>5</kbd>     | Normal | Go to Buffer 5       |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>6</kbd>     | Normal | Go to Buffer 6       |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>7</kbd>     | Normal | Go to Buffer 7       |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>8</kbd>     | Normal | Go to Buffer 8       |
| <kbd>Space</kbd> → <kbd>b</kbd> → <kbd>9</kbd>     | Normal | Go to Buffer 9       |

### Window Management

| Keys                                  | Mode   | Description                         |
| ------------------------------------- | ------ | ----------------------------------- |
| <kbd>Space</kbd> → <kbd>\\</kbd>      | Normal | Split Window Vertically             |
| <kbd>Space</kbd> → <kbd>/</kbd>       | Normal | Split Window Vertically             |
| <kbd>Space</kbd> → <kbd>h/l/k/j</kbd> | Normal | Move split panes Left/Right/Up/Down |
| <kbd>Space</kbd> → <kbd>m</kbd>       | Normal | Equalize split panes                |
| <kbd>Alt</kbd> + <kbd>Up</kbd>        | Normal | Resize pane up                      |
| <kbd>Alt</kbd> + <kbd>Down</kbd>      | Normal | Resize pane down                    |
| <kbd>Alt</kbd> + <kbd>Left</kbd>      | Normal | Resize pane left                    |
| <kbd>Alt</kbd> + <kbd>Right</kbd>     | Normal | Resize pane right                   |

### Search and Replace

| Keys                        | Mode   | Description                              |
| --------------------------- | ------ | ---------------------------------------- |
| <kbd>,</kbd> → <kbd>R</kbd> | Normal | Search and Replace the word under cursor |
| <kbd>,</kbd> → <kbd>r</kbd> | Normal | Search and replace in visual selection   |

### Selection and Deletion

| Keys                              | Mode   | Description                         |
| --------------------------------- | ------ | ----------------------------------- |
| <kbd>Control</kbd> + <kbd>a</kbd> | Normal | Select All                          |
| <kbd>d</kbd> + <kbd>D</kbd>       | Normal | Delete current line without yanking |
| <kbd>d</kbd> + <kbd>d</kbd>       | Normal | Yank non-empty lines                |

### Insert Mode

| Keys                              | Mode   | Description                           |
| --------------------------------- | ------ | ------------------------------------- |
| <kbd>Escape</kbd>                 | Insert | Exit Insert Mode                      |
| <kbd>Control</kbd> + <kbd>l</kbd> | Insert | Correct Word                          |
| <kbd>Alt</kbd> + <kbd>i</kbd>     | Insert | Jump to Beginn of Line in insert mode |
| <kbd>Alt</kbd> + <kbd>a</kbd>     | Insert | Jump to End of Line in insert mode    |
| <kbd>Ctrl</kbd> + <kbd>b</kbd>    | Insert | Add curly with comma {},              |

### Editor Functionality

| Keys                                            | Mode          | Description                         |
| ----------------------------------------------- | ------------- | ----------------------------------- |
| <kbd>Escape</kbd>                               | Insert/Normal | Escape and clear highlighted search |
| <kbd>z</kbd> → <kbd>.</kbd>                     | Normal        | 󰓆 Fix Spelling                      |
| <kbd>z</kbd> → <kbd>=</kbd>                     | Normal        | Spelling suggestions                |
| <kbd>Leader</kbd> → <kbd>m</kbd> → <kbd>m</kbd> | Normal        | File Changes (Messages)             |
| <kbd>Leader</kbd> → <kbd>c</kbd> → <kbd>t</kbd> | Normal        | Toggle TS Context                   |

### Plugin Management (Lazy)

| Keys                                            | Mode   | Description        |
| ----------------------------------------------- | ------ | ------------------ |
| <kbd>Leader</kbd> → <kbd>l</kbd> → <kbd>a</kbd> | Normal | Open Lazy          |
| <kbd>Leader</kbd> → <kbd>l</kbd> → <kbd>c</kbd> | Normal | Check Lazy Plugins |
| <kbd>Leader</kbd> → <kbd>l</kbd> → <kbd>s</kbd> | Normal | Sync Lazy Plugins  |

### Debugging

| Keys                                                           | Mode   | Description                |
| -------------------------------------------------------------- | ------ | -------------------------- |
| <kbd>Leader</kbd> → <kbd>d</kbd> → <kbd>B</kbd>                | Normal | Add Conditional Breakpoint |
| <kbd>Leader</kbd> → <kbd>d</kbd> → <kbd>c</kbd>                | Normal | Dap Continue               |
| <kbd>Leader</kbd> → <kbd>d</kbd> → <kbd>s</kbd> → <kbd>i</kbd> | Normal | Dap Step Into              |
| <kbd>Leader</kbd> → <kbd>d</kbd> → <kbd>s</kbd> → <kbd>o</kbd> | Normal | Dap Step Over              |
| <kbd>Leader</kbd> → <kbd>d</kbd> → <kbd>s</kbd> → <kbd>t</kbd> | Normal | Dap Step Out               |
| <kbd>Leader</kbd> → <kbd>d</kbd> → <kbd>t</kbd>                | Normal | Dap Terminate              |
| <kbd>Leader</kbd> → <kbd>d</kbd> → <kbd>l</kbd>                | Normal | Dap Show Log               |
| <kbd>Leader</kbd> → <kbd>d</kbd> → <kbd>r</kbd>                | Normal | Dap Toggle Repl            |

### Diff View

| Keys                                            | Mode   | Description     |
| ----------------------------------------------- | ------ | --------------- |
| <kbd>Leader</kbd> → <kbd>d</kbd> → <kbd>v</kbd> | Normal | Diffview Toggle |

### Noice

| Keys                                           | Mode   | Description         |
| ---------------------------------------------- | ------ | ------------------- |
| <kbd>Space</kbd> → <kbd>n</kbd> → <kbd>n</kbd> | Normal | Noice Messages      |
| <kbd>Space</kbd> → <kbd>n</kbd> → <kbd>a</kbd> | Normal | Noice All Messages  |
| <kbd>Space</kbd> → <kbd>n</kbd> → <kbd>l</kbd> | Normal | Noice Last          |
| <kbd>Space</kbd> → <kbd>n</kbd> → <kbd>t</kbd> | Normal | Noice Telescope     |
| <kbd>Space</kbd> → <kbd>n</kbd> → <kbd>e</kbd> | Normal | Noice Errors        |
| <kbd>Space</kbd> → <kbd>n</kbd> → <kbd>s</kbd> | Normal | Noice Notifications |

### Terminal Bindings

| Keys                           | Mode     | Description        |
| ------------------------------ | -------- | ------------------ |
| <kbd>Escape</kbd>              | Terminal | Exit Terminal Mode |
| <kbd>k</kbd> → <kbd>j</kbd>    | Terminal | Exit Terminal Mode |
| <kbd>Ctrl</kbd> + <kbd>h</kbd> | Terminal | Window Left        |
| <kbd>Ctrl</kbd> + <kbd>j</kbd> | Terminal | Window Down        |
| <kbd>Ctrl</kbd> + <kbd>k</kbd> | Terminal | Window Up          |
| <kbd>Ctrl</kbd> + <kbd>l</kbd> | Terminal | Window Right       |
| <kbd>Ctrl</kbd> + <kbd>w</kbd> | Terminal | Window             |

### Java Development Tools

| Keys                                            | Mode          | Description         |
| ----------------------------------------------- | ------------- | ------------------- |
| <kbd>Alt</kbd> + <kbd>o</kbd>                   | Normal        | Organize Imports    |
| <kbd>c</kbd> → <kbd>r</kbd> → <kbd>v</kbd>      | Normal/Visual | Extract Variable    |
| <kbd>c</kbd> → <kbd>r</kbd> → <kbd>c</kbd>      | Normal/Visual | Extract Constant    |
| <kbd>c</kbd> → <kbd>r</kbd> → <kbd>m</kbd>      | Visual        | Extract Method      |
| <kbd>Leader</kbd> → <kbd>d</kbd> → <kbd>f</kbd> | Normal        | Test Class          |
| <kbd>Leader</kbd> → <kbd>d</kbd> → <kbd>n</kbd> | Normal        | Test Nearest Method |

### LuaSnip

| Keys                                              | Mode          | Description |
| ------------------------------------------------- | ------------- | ----------- |
| <kbd>Ctrl</kbd> + <kbd>i</kbd>                    | Insert/Select |             |
| <kbd>Ctrl</kbd> + <kbd>l</kbd>                    | Insert/Select |             |
| <kbd>Ctrl</kbd> + <kbd>h</kbd>                    | Insert/Select |             |
| <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>o</kbd> | Insert/Select |             |
| <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>a</kbd> | Insert/Select |             |

### Nvim-Toggler

| Keys                             | Mode          | Description    |
| -------------------------------- | ------------- | -------------- |
| <kbd>Leader</kbd> → <kbd>w</kbd> | Normal/Visual | Toggle a Value |

### Nvim-Tree

| Keys                           | Mode   | Description           |
| ------------------------------ | ------ | --------------------- |
| <kbd>Ctrl</kbd> + <kbd>t</kbd> | Normal | Up Change Directory   |
| <kbd>Ctrl</kbd> + <kbd>d</kbd> | Normal | Change Root Directory |
| <kbd>?</kbd>                   | Normal | Help                  |

### LSP (Language Server Protocol)

| Keys                                                      | Mode          | Description                  |
| --------------------------------------------------------- | ------------- | ---------------------------- |
| <kbd>Space</kbd> → <kbd>d</kbd>                           | Normal        | Open Diagnostic Window       |
| <kbd>Space</kbd> → <kbd>Left</kbd>                        | Normal        |                              |
| <kbd>Space</kbd> → <kbd>Right</kbd>                       | Normal        |                              |
| <kbd>Space</kbd> → <kbd>q</kbd>                           | Normal        | Send Diagnostic to Locallist |
| <kbd>K</kbd>                                              | Normal        | Hover                        |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>a</kbd>                | Normal/Visual | LSP Code Action              |
| <kbd>Alt</kbd> + <kbd>Enter</kbd>                         | Normal/Visual | LSP Code Action              |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>n</kbd>                | Normal        | LSP Rename                   |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>r</kbd>                | Normal        | LSP References               |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>d</kbd>                | Normal        | LSP Go to Definition         |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>D</kbd>                | Normal        | LSP Go to Declaration        |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>i</kbd>                | Normal        | LSP Go to Implementation     |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>f</kbd>                | Normal        |                              |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>k</kbd>                | Normal        | LSP Signature Help           |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>s</kbd>                | Normal        | LSP Document Symbols         |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>t</kbd>                | Normal        | LSP Type Definition          |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>w</kbd> → <kbd>a</kbd> | Normal        | LSP Add Workspace Folder     |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>w</kbd> → <kbd>r</kbd> | Normal        | LSP Remove Workspace Folder  |
| <kbd>g</kbd> → <kbd>r</kbd> → <kbd>w</kbd> → <kbd>l</kbd> | Normal        | List Workplace Folder        |
| <kbd>Space</kbd> → <kbd>i</kbd> → <kbd>h</kbd>            | Normal        | Inlay Hints                  |

### Treesitter

| Keys         | Mode            | Description      |
| ------------ | --------------- | ---------------- |
| <kbd>m</kbd> | Visual/Operator | Treesitter Nodes |

## Inspiration

The following projects were instrumental in the crafting of this environment

- [Allaman's nvim](https://github.com/Allaman/nvim)
- [Alexis12119's nvim-config](https://github.com/Alexis12119/nvim-config)
- [glepnir's nvim](https://github.com/glepnir/nvim)
- [ayamir's nvimdots](https://github.com/ayamir/nvimdots)
- [CharlesChiuGit's nvimdots](https://github.com/CharlesChiuGit/nvimdots.lua)
- [dragove's nvim](https://github.com/dragove/nvim)
- [Dharmx's Nvim](https://github.com/dharmx/nvim)
- [loctvl842's nvim'](https://github.com/loctvl842/nvim)
- **... and many, many more!**

```

```

```````

`/home/tlh/.config/nvim/init.lua`:

```````lua
local lazypath = vim.fn.stdpath('data') .. '/lazy/lazy.nvim'
if not (vim.uv or vim.loop).fs_stat(lazypath) then
    local lazyrepo = 'https://github.com/folke/lazy.nvim.git'
    local out = vim.fn.system({ 'git', 'clone', '--filter=blob:none', '--branch=stable', lazyrepo, lazypath })
    if vim.v.shell_error ~= 0 then
        vim.api.nvim_echo({
            { 'Failed to clone lazy.nvim:\n', 'ErrorMsg' },
            { out, 'WarningMsg' },
            { '\nPress any key to exit...' },
        }, true, {})
        vim.fn.getchar()
        os.exit(1)
    end
end
vim.opt.runtimepath:prepend(lazypath)

vim.g.mapleader = ','
vim.g.maplocalleader = ','

require('core.options')
require('core.keymaps')
require('core.autocommands')
require('core.usercommands')
require('plugins.ai.avante')

local opts = {
    ui = {
        border = 'single',
        icons = {
            lazy = '💤',
        },
    },
    checker = {
        enabled = true,
    },
}

require('lazy').setup({ { import = 'plugins' }, { import = 'plugins.lsp' } }, opts)

```````

`/home/tlh/.config/nvim/lua/plugins/lualine.lua`:

```````lua
return {
    'nvim-lualine/lualine.nvim',
    lazy = false,
    dependencies = { 'nvim-tree/nvim-web-devicons' },
    config = function()
        local lualine = require('lualine')
        local lazy_status = require('lazy.status') -- to configure lazy pending updates count
        lualine.setup({
            options = {
                theme = 'monokai-pro',
            },
            sections = {
                lualine_x = {
                    {
                        lazy_status.updates,
                        cond = lazy_status.has_updates,
                        color = { fg = '#ff9e64' },
                    },
                    { 'encoding' },
                    { 'fileformat' },
                    { 'filetype' },
                },
            },
        })
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/luasnip.lua`:

```````lua
return {
    'L3MON4D3/LuaSnip',
    enabled = true,
    version = 'v2.*',
    event = 'InsertEnter',
    dependencies = {
        'rafamadriz/friendly-snippets',
    },
    build = 'make install_jsregexp',
    config = function()
        require('luasnip.loaders.from_vscode').lazy_load()
        require('luasnip.loaders.from_snipmate').lazy_load()
        require('luasnip.loaders.from_lua')
        local ls = require('luasnip')
        local types = require('luasnip.util.types')
        ls.config.set_config({
            history = true, --keep around last snippet local to jump back
            updateevents = 'TextChanged,TextChangedI', --update changes as you type
            enable_autosnippets = true,
            ext_opts = {
                [types.choiceNode] = {
                    active = {
                        virt_text = { { '●', 'DiagnosticHint' } },
                    },
                },
            },
        })

        -- Luasnip keys
        vim.keymap.set({ 'i', 's' }, '<C-i>', function()
            ls.expand()
        end)

        vim.keymap.set({ 'i', 's' }, '<C-l>', function()
            ls.jump(1)
        end)

        vim.keymap.set({ 'i', 's' }, '<C-h>', function()
            ls.jump(-1)
        end)

        -- Luasnip Choice Nodes
        vim.keymap.set({ 'i', 's' }, '<C-Shift-o>', function()
            if ls.choice_active() then
                ls.change_choice(1)
            end
        end, { silent = true })

        vim.keymap.set({ 'i', 's' }, '<C-Shift-a>', function()
            if ls.choice_active() then
                ls.change_choice(-1)
            end
        end, { silent = true })

        -- Disable diagnostics while expanding on select mode
        local augroup = vim.api.nvim_create_augroup('luasnip-expand', { clear = true })

        vim.api.nvim_create_autocmd('ModeChanged', {
            group = augroup,
            pattern = '*:s',
            callback = function()
                if ls.in_snippet() then
                    return vim.diagnostic.enable(false)
                end
            end,
        })

        vim.api.nvim_create_autocmd('ModeChanged', {
            group = augroup,
            -- pattern = '[is]:n',
            -- pattern = '*:n',
            pattern = 'n',
            callback = function()
                if ls.in_snippet() then
                    return vim.diagnostic.enable(true)
                end
            end,
        })
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/conform.lua`:

```````lua
return {
    'stevearc/conform.nvim',
    event = { 'BufReadPre', 'BufNewFile' },
    opts = {
        formatters_by_ft = {
            css = { 'prettier' },
            html = { 'prettier' },
            javascript = { 'prettier' },
            json = { 'prettier' },
            tex = { 'latexindent' },
            lua = { 'stylua' },
            markdown = { 'prettier' },
            nix = { 'alejandra' },
            php = { 'prettier' },
            python = { 'black' },
            rust = { 'rustfmt' },
            scss = { 'prettier' },
            vue = { 'prettier' },
            yaml = { 'yamlfmt' },
        },
        format_on_save = {
            lsp_format = 'fallback',
            async = false,
            timeout_ms = 500,
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/cheatsheet.lua`:

```````lua
return {
    'sudormrfbin/cheatsheet.nvim',

    dependencies = {
        'nvim-telescope/telescope.nvim',
        'nvim-lua/popup.nvim',
        'nvim-lua/plenary.nvim',
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/telescope.lua`:

```````lua
return {
    'nvim-telescope/telescope.nvim',
    cmd = { 'Telescope' },
    keys = {
        { '<leader>fb', '<cmd>Telescope buffers<cr>', desc = 'Find Buffers' },
        { '<leader>fc', ":lua require'telescope.builtin'.commands{}<cr>", desc = 'List Commands' },
        { '<leader>fd', '<cmd>Telescope diagnostics<cr>', desc = 'Find Diagnostics' },
        { '<leader>fe', '<cmd>Telescope file_browser<cr>', desc = 'File Browser' },
        { '<leader>ff', '<cmd>Telescope find_files<cr>', desc = 'Find Files' },
        { '<leader>fg', '<cmd>Telescope live_grep<cr>', desc = 'Find Word' },
        { '<leader>fh', '<cmd>Telescope help_tags<cr>', desc = 'Find Help' },
        { '<leader>fi', '<cmd>Telescope import<cr>', desc = 'Find Imports' },
        { '<leader>fj', '<cmd>Telescope emoji<cr>', desc = 'Find emoji' },
        { '<leader>fk', '<cmd>Telescope keymaps<cr>', desc = 'Find Keymaps' },
        { '<leader>fl', '<cmd>Telescope highlights<cr>', desc = 'Find Highlights' },
        { '<leader>fm', '<cmd>Telescope heading<cr>', desc = 'Find Heading' },
        { '<leader>fo', '<cmd>Telescope oldfiles<cr>', desc = 'Recently opened files' },
        { '<leader>fp', '<cmd>Telescope spell_suggest<cr>', desc = 'Find Spell Suggest' },
        { '<leader>fq', '<cmd>Telescope quickfix<cr>', desc = 'Find Quickix' },
        { '<leader>fr', '<cmd>Telescope grep_string<cr>', desc = 'Find Word Under Cursor' },
        { '<leader>fs', '<cmd>Telescope symbols<cr>', desc = 'Find Symbols' },
        { '<leader>ft', '<cmd>Telescope git_files<cr>', desc = 'Find Git Files' },
        { '<leader>fu', '<cmd>Telescope undo<cr>', desc = 'Find Undo' },
        { '<leader>fy', '<cmd>Telescope yank_history<cr>', mode = { 'n', 'x' }, desc = 'Find yanks' },
        { '<leader>fz', '<cmd>Telescope zoxide list<cr>', desc = 'Find Directory' },
    },
    dependencies = {
        'nvim-lua/plenary.nvim',
        'nvim-telescope/telescope-file-browser.nvim',
        'nvim-telescope/telescope-symbols.nvim',
        'xiyaowong/telescope-emoji.nvim',
        'debugloop/telescope-undo.nvim',
        'jvgrootveld/telescope-zoxide',
        'piersolenski/telescope-import.nvim',
        'crispgm/telescope-heading.nvim',
    },
    config = function()
        local actions = require('telescope.actions')
        local action_layout = require('telescope.actions.layout')
        local fb_actions = require('telescope').extensions.file_browser.actions
        local open_with_trouble = require('trouble.sources.telescope').open

        require('telescope').setup({
            defaults = {
                prompt_prefix = '   ',
                selection_caret = '▎ ',
                multi_icon = ' │ ',
                winblend = 0,
                borderchars = { '─', '│', '─', '│', '┌', '┐', '┘', '└' },
                mappings = {
                    i = {
                        ['<c-t>'] = open_with_trouble,
                        ['<M-p>'] = action_layout.toggle_preview,
                        ['<S-down>'] = actions.preview_scrolling_down,
                        ['<S-up>'] = actions.preview_scrolling_up,
                    },
                    n = {
                        ['<c-t>'] = open_with_trouble,
                        ['q'] = require('telescope.actions').close,
                        ['<M-p>'] = action_layout.toggle_preview,
                        ['<S-down>'] = actions.preview_scrolling_down,
                        ['<S-up>'] = actions.preview_scrolling_up,
                    },
                },
                -- preview = {
                --     hide_on_startup = true,
                -- },
                file_ignore_patterns = {
                    'node_modules',
                },
            },
            pickers = {
                buffers = {
                    previewer = false,
                    theme = 'dropdown',
                    mappings = {
                        n = {
                            ['<C-e>'] = 'delete_buffer',
                            ['l'] = 'select_default',
                        },
                    },
                    initial_mode = 'normal',
                },
                find_files = {
                    -- theme = 'ivy', -- 'ivy', 'dropdown', 'cursor'
                    -- layout_strategy = 'vertical',
                    -- layout_config = { height = 0.9 },
                    -- previewer = false,
                    path_display = { 'smart' },
                    layout_config = {
                        prompt_position = 'top',
                        preview_width = 0.5,
                        -- width = 0.7,
                    },
                    sorting_strategy = 'ascending',
                },
                help_tags = {
                    theme = 'ivy',
                },
                symbols = {
                    theme = 'dropdown',
                },
                registers = {
                    theme = 'ivy',
                },
                grep_string = {
                    initial_mode = 'normal',
                    theme = 'ivy',
                },
                live_grep = {
                    theme = 'ivy',
                },
            },
            extensions = {
                file_browser = {
                    dir_icon = '',
                    prompt_path = true,
                    grouped = true,
                    theme = 'dropdown',
                    initial_mode = 'normal',
                    previewer = false,
                    mappings = {
                        n = {
                            ['o'] = 'select_default',
                            ['H'] = fb_actions.toggle_hidden,
                            ['h'] = fb_actions.goto_parent_dir,
                            ['l'] = 'select_default',
                        },
                    },
                },
                undo = {
                    initial_mode = 'normal',
                    use_delta = true,
                    side_by_side = true,
                    layout_strategy = 'vertical',
                    layout_config = {
                        preview_height = 0.8,
                    },
                },
                heading = {
                    treesitter = true,
                },
                advanced_git_search = {
                    diff_plugin = 'diffview',
                },
            },
        })

        -- Extensions
        require('telescope').load_extension('emoji')
        require('telescope').load_extension('file_browser')
        require('telescope').load_extension('undo')
        require('telescope').load_extension('advanced_git_search')
        require('telescope').load_extension('zoxide')
        require('telescope').load_extension('import')
        require('telescope').load_extension('heading')
        require('telescope').load_extension('yank_history')
        -- require('telescope').load_extension('neoclip')
        -- require('telescope').load_extension('noice')
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/dressing.lua`:

```````lua
return {
    'stevearc/dressing.nvim',
    enabled = true,
    lazy = true,
    init = function()
        ---@diagnostic disable-next-line: duplicate-set-field
        vim.ui.select = function(...)
            require('lazy').load({ plugins = { 'dressing.nvim' } })
            return vim.ui.select(...)
        end
        ---@diagnostic disable-next-line: duplicate-set-field
        vim.ui.input = function(...)
            require('lazy').load({ plugins = { 'dressing.nvim' } })
            return vim.ui.input(...)
        end
    end,
    opts = {},
}

```````

`/home/tlh/.config/nvim/lua/plugins/treesitter.lua`:

```````lua
return {
    -- ──────────────────────── TREESITTER ─────────────────────
    {
        'nvim-treesitter/nvim-treesitter',
        event = { 'BufReadPre', 'BufNewFile' },
        build = ':TSUpdate',
        dependencies = {
            -- ────────────────────── TS TEXTOBJECTS ───────────────────
            { 'nvim-treesitter/nvim-treesitter-textobjects' },
            -- ─────────────────────── TS TREEHOPPER ───────────────────────
            { 'mfussenegger/nvim-treehopper' },
            -- ──────────────────────── TS CONTEXT ─────────────────────
            {
                'nvim-treesitter/nvim-treesitter-context',
                opts = {},
            },
        },
        config = function()
            require('nvim-treesitter.configs').setup({
                ensure_installed = {
                    'bash',
                    'c',
                    'comment',
                    'cpp',
                    'css',
                    'cuda',
                    'diff',
                    'dockerfile',
                    'dot',
                    'editorconfig',
                    'git_config',
                    'git_rebase',
                    'gitattributes',
                    'gitcommit',
                    'gitignore',
                    'go',
                    'graphql',
                    'html',
                    'http',
                    'ini',
                    'java',
                    'javascript',
                    'jsdoc',
                    'json',
                    'json',
                    'json5',
                    'just',
                    'latex',
                    'lua',
                    'luadoc',
                    'nim',
                    'nim_format_string',
                    'powershell',
                    'properties',
                    'puppet',
                    'pug',
                    'readline',
                    'requirements',
                    'scheme',
                    'scss',
                    'make',
                    'markdown_inline',
                    'markdown',
                    'nix',
                    'php',
                    'python',
                    'query',
                    'rasi',
                    'regex',
                    'ruby',
                    'rust',
                    'scss',
                    'sql',
                    'toml',
                    'typescript',
                    'vim',
                    'tsx',
                    'udev',
                    'zathurarc',
                    'xml',
                    'xcompose',
                    'vim',
                    'tmux',
                    'todotxt',
                    'svelte',
                    'vimdoc',
                    'vue',
                    'yaml',
                    'zig',
                },
                highlight = {
                    enable = true,
                },
                -- Builtin
                incremental_selection = {
                    enable = true,
                    keymaps = {
                        init_selection = '<CR>',
                        scope_incremental = '<CR>',
                        node_incremental = '<TAB>',
                        node_decremental = '<S-TAB>',
                    },
                },
                -- Textobjects
                textobjects = {
                    select = {
                        enable = true,
                        lookahead = true,
                        keymaps = {
                            ['af'] = { query = '@function.outer', desc = 'outer function' },
                            ['if'] = { query = '@function.inner', desc = 'inner function' },
                            ['ac'] = { query = '@conditional.outer', desc = 'outer conditional' },
                            ['ic'] = { query = '@conditional.inner', desc = 'inner conditional' },
                            ['al'] = { query = '@loop.outer', desc = 'outer loop' },
                            ['il'] = { query = '@loop.inner', desc = 'inner loop' },
                            ['am'] = { query = '@statement.outer', desc = 'outer statement' },
                            ['ix'] = { query = '@comment.outer', desc = 'comment' },
                        },
                        include_surrounding_whitespace = false,
                    },
                    swap = {
                        enable = true,
                        swap_next = {
                            ['<space>s'] = { query = '@parameter.inner', desc = 'Swap next parameters' },
                        },
                        swap_previous = {
                            ['<space>S'] = { query = '@parameter.inner', desc = 'Swap previous parameters' },
                        },
                    },
                },
            })
        end,
    },
    -- ──────────────────────── TS AUTOTAG ─────────────────────
    {
        'windwp/nvim-ts-autotag',
        event = { 'BufReadPre', 'BufNewFile' },
        opts = {},
    },
    -- ────────────────────── TS NODE ACTION ───────────────────
    {
        'ckolkey/ts-node-action',
        keys = {
            { '+', '<cmd>NodeAction<cr>', desc = 'Trigger Node Action' },
        },
        opts = {},
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/yanky.lua`:

```````lua
return {
    'gbprod/yanky.nvim',
    enabled = true,
    keys = {
        { '<leader>y', '<cmd>YankyRingHistory<cr>', mode = { 'n', 'x' }, desc = 'Yank Ring History (Yanky)' },
        { 'y', '<Plug>(YankyYank)', mode = { 'n', 'x' }, desc = 'Yank (Yanky)' },
        { 'p', '<Plug>(YankyPutAfter)', mode = { 'n', 'x' }, desc = 'Put After (Yanky)' },
        { 'P', '<Plug>(YankyPutBefore)', mode = { 'n', 'x' }, desc = 'Put Before (Yanky)' },
        { 'gp', '<Plug>(YankyGPutAfter)', mode = { 'n', 'x' }, desc = 'GPut After (Yanky)' },
        { 'gP', '<Plug>(YankyGPutBefore)', mode = { 'n', 'x' }, desc = 'GPut Before (Yanky)' },
        {
            '<C-left>P',
            '<Plug>(YankyPutIndentBeforeLinewise)',
            mode = { 'n', 'x' },
            desc = 'Put Indent Before Linewise (Yanky)',
        },
        {
            '>p',
            '<Plug>(YankyPutIndentAfterShiftRight)',
            mode = { 'n', 'x' },
            desc = 'Put Indent After Shift Right (Yanky)',
        },
        {
            '<p',
            '<Plug>(YankyPutIndentAfterShiftLeft)',
            mode = { 'n', 'x' },
            desc = 'Put Indent After Shift Left (Yanky)',
        },
        {
            '>P',
            '<Plug>(YankyPutIndentBeforeShiftRight)',
            mode = { 'n', 'x' },
            desc = 'Put Indent Before Shift Right (Yanky)',
        },
        {
            '<P',
            '<Plug>(YankyPutIndentBeforeShiftLeft)',
            mode = { 'n', 'x' },
            desc = 'Put Indent Before Shift Left (Yanky)',
        },
        { '=p', '<Plug>(YankyPutAfterFilter)', mode = { 'n', 'x' }, desc = 'Put After Filter (Yanky)' },
        { '=P', '<Plug>(YankyPutBeforeFilter)', mode = { 'n', 'x' }, desc = 'Put Before Filter (Yanky)' },
    },
    opts = {
        highlight = {
            on_put = true,
            on_yank = true,
            timer = 300,
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/nvim-surround.lua`:

```````lua
return {
    'kylechui/nvim-surround',
    enabled = true,
    version = '*',
    event = { 'BufReadPre', 'BufNewFile' },
    opts = {
        move_cursor = 'sticky',
    },
    -- config = true,
}

```````

`/home/tlh/.config/nvim/lua/plugins/codesnap.lua`:

```````lua
return {
    'mistricky/codesnap.nvim',
    build = 'make',
    cmd = { 'CodeSnap', 'CodeSnapSave', 'CodeSnapASCII' },
    opts = {
        save_path = '~/Desktop',
        has_breadcrumbs = true,
        bg_padding = 0,
        watermark = '',
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/toggleterm.lua`:

```````lua
return {
    'akinsho/toggleterm.nvim',
    version = '*',
    keys = {
        { '<leader>tt', '<cmd>ToggleTerm<cr>', desc = 'ToggleTerm' },
    },
    config = true,
    opts = {
        direction = 'float',
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/cmp.lua`:

```````lua
-- ╭─────────────────────────────────────────────────────────╮
-- │                    CMP CONFIGURATION                    │
-- ╰─────────────────────────────────────────────────────────╯
return {
    'hrsh7th/nvim-cmp',
    enabled = true,
    event = { 'InsertEnter', 'CmdlineEnter' },
    dependencies = {
        'hrsh7th/cmp-buffer',
        'hrsh7th/cmp-cmdline',
        'hrsh7th/cmp-nvim-lsp',
        'hrsh7th/cmp-nvim-lsp-signature-help',
        'hrsh7th/cmp-nvim-lua',
        'hrsh7th/cmp-path',
        'mfussenegger/nvim-jdtls',
        'octaltree/cmp-look',
        'ray-x/cmp-treesitter',
        'saadparwaiz1/cmp_luasnip',
        'zbirenbaum/copilot-cmp',

        -- 'chrisgrieser/cmp_yanky',
    },
    config = function()
        -- ╭───────────────╮
        -- │ LOAD SNIPPETS │
        -- ╰───────────────╯
        require('luasnip/loaders/from_lua').load({ paths = { '~/.config/nvim/snippets/' } })
        require('luasnip/loaders/from_vscode').lazy_load()

        -- ╭────────────────╮
        -- │ COMPLETEOPTION │
        -- ╰────────────────╯
        vim.opt.completeopt = { 'menu', 'menuone', 'noselect' }

        -- ╭────────────╮
        -- │ KIND ICONS │
        -- ╰────────────╯
        local kind_icons = {
            Class = ' ',
            Color = ' ',
            Comment = '//',
            Constant = ' ',
            Constructor = ' ',
            Enum = ' ',
            EnumMember = ' ',
            Event = '',
            Field = '󰄶 ',
            File = ' ',
            Folder = ' ',
            Function = 'ƒ ',
            Interface = ' ',
            Keyword = '󰌆 ',
            Method = ' ',
            Module = '󰏗 ',
            Operator = '󰆕 ',
            Property = ' ',
            Reference = ' ',
            Snippet = ' ',
            String = '󱌯 ',
            Struct = ' ',
            Text = ' ',
            TypeParameter = '󰅲 ',
            Unit = ' ',
            Value = '󰎠 ',
            Variable = '󰀫',
        }

        -- ╭──────────────╮
        -- │ LOAD LUASNIP │
        -- ╰──────────────╯
        local luasnip = require('luasnip')

        -- ╭──────────╮
        -- │ LOAD CMP │
        -- ╰──────────╯
        local cmp = require('cmp')

        -- ╭───────────╮
        -- │ CMP SETUP │
        -- ╰───────────╯
        cmp.setup({
            snippet = {
                expand = function(args)
                    require('luasnip').lsp_expand(args.body)
                end,
            },
            window = {
                completion = {
                    border = { '┌', '─', '┐', '│', '┘', '─', '└', '│' },
                    winhighlight = 'Normal:CmpPmenu,FloatBorder:FloatBorder,CursorLine:PmenuSel,Search:None',
                },
                documentation = {
                    border = { '┌', '─', '┐', '│', '┘', '─', '└', '│' },
                    winhighlight = 'Normal:CmpPmenu,FloatBorder:FloatBorder,CursorLine:PmenuSel,Search:None',
                },
            },
            view = {
                entries = {
                    name = 'custom',
                    selection_order = 'near_cursor',
                    follow_cursor = true,
                },
            },
            mapping = cmp.mapping.preset.insert({
                -- ['<C-n>'] = cmp.mapping(cmp.mapping.select_next_item(), { 'i', 'c' }),
                -- ['<C-p>'] = cmp.mapping(cmp.mapping.select_prev_item(), { 'i', 'c' }),
                -- ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
                -- ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
                -- ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
                ['<C-n>'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
                ['<C-p>'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
                ['<C-u>'] = cmp.mapping.scroll_docs(-4),
                ['<C-d>'] = cmp.mapping.scroll_docs(4),
                ['<C-Space>'] = cmp.mapping.complete(),
                ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
                ['<C-e>'] = cmp.mapping({
                    i = cmp.mapping.abort(),
                    c = cmp.mapping.close(),
                }),
                ['<CR>'] = cmp.mapping.confirm({
                    behavior = cmp.ConfirmBehavior.Insert,
                    select = true,
                }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
                -- ['<CR>'] = cmp.mapping(function(fallback)
                --     if cmp.visible() then
                --         if luasnip.expandable() then
                --             luasnip.expand()
                --         else
                --             cmp.confirm({
                --                 select = true,
                --             })
                --         end
                --     else
                --         fallback()
                --     end
                -- end),
                ['<C-CR>'] = cmp.mapping.confirm({
                    behavior = cmp.ConfirmBehavior.Replace,
                    select = true,
                }),
                ['<Tab>'] = cmp.mapping(function(fallback)
                    if cmp.visible() then
                        cmp.select_next_item()
                    elseif luasnip.locally_jumpable(1) then
                        luasnip.jump(1)
                    else
                        fallback()
                    end
                end, { 'i', 's' }),
                ['<S-Tab>'] = cmp.mapping(function(fallback)
                    if cmp.visible() then
                        cmp.select_prev_item()
                    elseif luasnip.locally_jumpable(-1) then
                        luasnip.jump(-1)
                    else
                        fallback()
                    end
                end, { 'i', 's' }),
            }),
            sources = cmp.config.sources({
                { name = 'codeium', keyword_length = 2 },
                { name = 'copilot', keyword_length = 2 },
                { name = 'nvim_lsp' },
                { name = 'nvim_lsp_signature_help' },
                { name = 'luasnip' },
                { name = 'buffer' },
                { name = 'path' },
                { name = 'nvim_lua' },
                { name = 'treesitter' },
                {
                    name = 'look',
                    keyword_length = 3,
                    option = {
                        convert_case = true,
                        loud = true,
                    },
                    max_item_count = 5,
                },
            }),
            formatting = {
                fields = { 'abbr', 'kind', 'menu' },
                format = function(entry, vim_item)
                    -- Kind icons
                    -- This concatenates the icons with the name of the item kind
                    vim_item.kind = string.format('%s %s', kind_icons[vim_item.kind], vim_item.kind)
                    -- Trim text function
                    function trim(text)
                        local max = 40
                        if text and text:len(1, max) > max then
                            text = text:sub(1, max) .. '...'
                        end
                        return text
                    end
                    vim_item.abbr = trim(vim_item.abbr)
                    -- Source
                    vim_item.menu = ({
                        codeium = '( Codeium )',
                        copilot = '( Copilot )',
                        nvim_lsp = '( LSP )',
                        nvim_lsp_signature_help = '( Signature )',
                        luasnip = '( LuaSnip )',
                        buffer = '( Buffer )',
                        path = '( Path )',
                        nvim_lua = '( Lua )',
                        treesitter = '( Treesitter )',
                        look = '( Look )',
                        -- cmdline = '(CMDLine)',
                    })[entry.source.name]
                    return vim_item
                end,
            },
            sorting = {
                comparators = {
                    cmp.config.compare.score,
                    cmp.config.compare.offset,
                    cmp.config.compare.exact,
                    cmp.config.compare.recently_used,
                    cmp.config.compare.length,
                    cmp.config.compare.locality,
                    cmp.config.compare.kind,
                    cmp.config.compare.sort_text,
                    cmp.config.compare.order,
                },
            },
            experimental = {
                ghost_text = true,
            },
        })

        -- ╭─────────────────────────╮
        -- │ CMP CMDLINE FOR / AND ? │
        -- ╰─────────────────────────╯
        cmp.setup.cmdline({ '/', '?' }, {
            mapping = cmp.mapping.preset.cmdline(),
            sources = {
                { name = 'buffer' },
            },
        })

        -- ╭───────────────────╮
        -- │ CMP CMDLINE FOR : │
        -- ╰───────────────────╯
        cmp.setup.cmdline(':', {
            mapping = cmp.mapping.preset.cmdline(),
            sources = cmp.config.sources({
                { name = 'path', group_index = 1 },
                { name = 'cmdline', group_index = 2 },
            }),
            matching = { disallow_symbol_nonprefix_matching = false },
        })

        -- ╭────────────────╮
        -- │ NVIM-AUTOPAIRS │
        -- ╰────────────────╯
        local cmp_autopairs = require('nvim-autopairs.completion.cmp')
        local ts_utils = require('nvim-treesitter.ts_utils')

        local ts_node_func_parens_disabled = {
            -- ecma
            named_imports = true,
            -- rust
            use_declaration = true,
        }

        local default_handler = cmp_autopairs.filetypes['*']['('].handler
        cmp_autopairs.filetypes['*']['('].handler = function(char, item, bufnr, rules, commit_character)
            local node_type = ts_utils.get_node_at_cursor():type()
            if ts_node_func_parens_disabled[node_type] then
                if item.data then
                    item.data.funcParensDisabled = true
                else
                    char = ''
                end
            end
            default_handler(char, item, bufnr, rules, commit_character)
        end

        cmp.event:on('confirm_done', cmp_autopairs.on_confirm_done())
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/symbols.lua`:

```````lua
return {
    'oskarrrrrrr/symbols.nvim',
    enabled = true,
    cmd = 'Symbols',
    config = function()
        local r = require('symbols.recipes')
        require('symbols').setup(r.DefaultFilters, r.AsciiSymbols, {
            sidebar = {
                hide_cursor = false,
                open_direction = 'right',
                auto_resize = {
                    enabled = true,
                    min_width = 40,
                    max_width = 60,
                },
            },
        })
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/statuscol.lua`:

```````lua
return {
    'luukvbaal/statuscol.nvim',
    event = 'BufReadPre',
    config = function()
        local builtin = require('statuscol.builtin')
        require('statuscol').setup({
            relculright = true,
            ft_ignore = { 'neo-tree' },
            segments = {
                { sign = { name = { 'Dap' }, maxwidth = 1, auto = false }, click = 'v:lua.ScSa' },
                { sign = { name = { 'todo*' }, maxwidth = 1 } },
                {
                    sign = { namespace = { 'diagnostic' }, maxwidth = 1, auto = false },
                    click = 'v:lua.ScSa',
                },
                {
                    sign = { namespace = { 'gitsigns*' }, maxwidth = 1, colwidth = 2, auto = false },
                    click = 'v:lua.ScSa',
                },
                { text = { builtin.lnumfunc, '  ' }, click = 'v:lua.ScLa' },
                { text = { builtin.foldfunc, ' ' }, click = 'v:lua.ScFa' },
            },
        })
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/web_devicons.lua`:

```````lua
return {
    'nvim-tree/nvim-web-devicons',
    lazy = true,
    config = function()
        require('nvim-web-devicons').set_icon({
            toc = {
                icon = '󰎟',
                color = '#dee0cd',
                cterm_color = '86',
                name = 'Toc',
            },
            typ = {
                icon = 't',
                color = '#239DAD',
                cterm_color = '45',
                name = 'Typst',
            },
        })
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/mini-align.lua`:

```````lua
return {
    'echasnovski/mini.align',
    enabled = true,
    version = false,
    event = { 'BufReadPre', 'BufNewFile' },
    config = true,
}

```````

`/home/tlh/.config/nvim/lua/plugins/which-key.lua`:

```````lua
return {
    'folke/which-key.nvim',
    event = 'VeryLazy',
    enabled = true,
    opts = {
        preset = 'helix',
        expand = 0,
        spec = {
            {
                mode = { 'n', 'v' },
                { 'gr', group = '+LSP Functions' },
                { 'grw', group = '+LSP Workspace Folders' },
                { '<leader>c', group = '+Comment-Box / Context Treesitter' }, -- Comment Box
                { '<leader>O', group = 'Ollama' }, -- Ollama in general
                { '<leader>Oa', group = 'Avante' }, -- Ollama AI Code Completion + More
                { '<leader>d', group = '+Diffview / Debug' }, -- Diffview & nvim-dap
                { '<leader>ds', group = '+Dap Step' }, -- nvim-dap step
                { '<leader>f', group = '+File' }, -- Telescope
                { '<leader>g', group = '+Git' }, -- Git
                { '<leader>h', group = '+Hop Motion' }, -- Hop
                { '<leader>l', group = '+Lazy', icon = '💤' }, -- Lazy & LTeX
                { '<leader>m', group = '+Show Messages' }, -- Messages
                { '<leader>t', group = '+ToggleTerm / Todo Comments' }, -- ToggleTerm & Todo Comments
                { '<space>b', group = '+Buffer' }, -- Bufferline.nvim
                { '<space>g', group = '+Glance LSP' }, -- Glance LSP locations
                { '<space>i', group = '+IncRename / Inlay Hints' }, -- IncRename
                { '<space>n', group = '+Noice' }, -- Noice.nvim
                { '<space>x', group = '+Trouble' }, -- Trouble.nvim
            },
        },
        win = {
            border = 'single',
            no_overlap = false,
            title_pos = 'center',
        },
        sort = { 'manual', 'group', 'lower' },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/ollama.lua`:

```````lua
return {
    {
        'nomnivore/ollama.nvim', -- for release
        cmd = { 'Ollama', 'OllamaModel', 'OllamaServe', 'OllamaServeStop' },

        keys = {
            {
                -- testing chat
                '<leader>Oc',
                '<cmd>OllamaChat<cr>',
                desc = 'OllamaChat',
            },
            {
                '<leader>OC',
                function()
                    require('ollama.chat').close()
                end,
                desc = 'OllamaChat Close',
            },
            {
                '<leader>Oo',
                ":<c-u>lua require('ollama').prompt()<cr>",
                desc = 'Ollama Prompt',
                mode = { 'n', 'v' },
            },
            {
                '<leader>Om',
                '<cmd>OllamaModel<cr>',
                desc = 'Ollama Model',
            },
            {
                '<leader>Os',
                '<cmd>OllamaServe<cr>',
                desc = 'Ollama Serve',
            },
            {
                '<leader>OS',
                '<cmd>OllamaServeStop<cr>',
                desc = 'Ollama Serve Stop',
            },
            {
                '<leader>OM',
                ':Ollama Modify_Code<cr>',
                desc = 'Modify Code',
                mode = { 'n', 'v' },
            },
            {
                '<leader>OG',
                ":lua require('ollama').prompt('Generate_Code')<cr>",
                desc = 'Generate Code',
            },
            {
                '<leader>Oq',
                function()
                    require('ollama').cancel_all_jobs()
                end,
                desc = 'Cancel All Jobs',
            },
        },

        config = function(_, opts)
            require('ollama').setup(opts)
            local config = require('ollama').config

            if not config then
                return
            end

            local stream_all = true

            if stream_all then
                for _, val in pairs(config.prompts) do
                    if val and val.action == 'replace' then
                        val.action = 'display_replace'
                    elseif val and val.action == 'insert' then
                        val.action = 'display_insert'
                    end
                end
            end

            local win_type = 'float'

            for _, val in pairs(config.prompts) do
                if val and val.action == 'display' then
                    val.action = require('ollama.actions.factory').create_action({
                        display = true,
                        show_prompt = true,
                        window = win_type,
                    })
                elseif val and val.action == 'display_replace' then
                    val.action = require('ollama.actions.factory').create_action({
                        display = true,
                        show_prompt = true,
                        window = win_type,
                        replace = true,
                    })
                elseif val and val.action == 'display_insert' then
                    val.action = require('ollama.actions.factory').create_action({
                        display = true,
                        show_prompt = true,
                        window = win_type,
                        insert = true,
                    })
                end
            end
        end,

        -- prompt
        opts = {
            model = 'huggingface.co/lmstudio-community/DeepSeek-Coder-V2-Lite-Instruct-GGUF:latest',
            url = 'http://127.0.0.1:11434',
            serve = {
                on_start = false,
                command = 'ollama',
                args = { 'serve' },
                stop_command = 'pkill',
                stop_args = { '-SIGTERM', 'ollama' },
            },
            -- Prompt[]
            prompts = {
                -- prompts for testing functionality
                -- Prompt
                Test_Stream = {
                    prompt = "Write me an interesting story about a programmer who couldn't fix their software's bugs.",
                    action = 'display',
                    options = {
                        seed = 123456,
                    },
                },

                Json_Api = {
                    prompt = '$input',
                    system = 'You are a RESTful API. The user is sending a request to you, and you must respond with a JSON object.',
                    format = 'json',
                },
                -- Prompt
                Ask_About_Code = {
                    action = 'display',
                },

                -- Prompt
                Generate_Code_At_Line = {
                    system = [[ You are a pair programming AI assistant. The human has written a file, and needs you to write a snippet code for a specific task or purpose.
          Your code will be inserted at the line number specified.
          Respond only with the code you would write, not the entire file. Do not include extra explanations, and do not repeat the code the human has already written.
          ]],
                    prompt = 'Here is what I need: $input\n Here is the code I have written so far:\n```$ftype\n$buf\n```\nYour code will be inserted at line $lnum. Please format your response like this: \n```$ftype\n<your code here>\n```\n',
                    action = 'display_insert',
                },

                Repeat_Word = {
                    prompt = 'Repeat this word back to me: $sel',
                },
            },
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/aisync.lua`:

```````lua
return {
    -- ╭─────────────────────────────────────────────────────────╮
    -- │                         Copilot                         │
    -- ╰─────────────────────────────────────────────────────────╯
    {
        'zbirenbaum/copilot.lua',
        cmd = 'Copilot',
        event = { 'InsertEnter' },
        build = ':Copilot auth',
        dependencies = { 'zbirenbaum/copilot-cmp' },
        opts = {
            suggestion = { enabled = true },
            panel = { enabled = true },
            filetypes = {
                ['*'] = true, -- disable for all other filetypes and ignore default `filetypes`
            },
        },
    },
    {
        'zbirenbaum/copilot-cmp',
        event = { 'InsertEnter' },
        dependencies = { 'copilot.lua' },
        opts = {},
        config = function(_, opts)
            local copilot_cmp = require('copilot_cmp')
            copilot_cmp.setup(opts)
        end,
    },

    -- ╭─────────────────────────────────────────────────────────╮
    -- │                         Codeium                         │
    -- ╰─────────────────────────────────────────────────────────╯
    {
        'Exafunction/codeium.nvim',
        event = { 'InsertEnter' },
        build = ':Codeium Auth',
        opts = {
            enable_chat = true,
        },
    },

    {
        'huggingface/llm.nvim',
        -- event = { 'InsertEnter', 'CmdlineEnter' },
        lazy = true,
        opts = function()
            local job = require('plenary.job')
            local logger = require('plenary.log').new({
                plugin = 'llm.nvim',
                level = 'info',
            })

            -- Splits a command into a table of words.
            local splitCommandIntoTable = function(command)
                local cmd = {}
                for word in command:gmatch('%S+') do
                    table.insert(cmd, word)
                end
                return cmd
            end

            -- Loads a configuration value from an external command.
            -- Executes the given command and passes its result to the callback.
            -- If the command returns an empty string or fails, uses the provided default value if available.
            local function loadConfigFromCommand(command, callback, defaultValue)
                local cmd = splitCommandIntoTable(command)
                job:new({
                    command = cmd[1],
                    args = vim.list_slice(cmd, 2, #cmd),
                    on_exit = function(j, exit_code)
                        if exit_code ~= 0 then
                            logger.warn("Command '" .. command .. "' did not return a value when executed")
                            return
                        end
                        local value = j:result()[1]:gsub('%s+$', '')
                        if value ~= nil and value ~= '' then
                            callback(value)
                        elseif defaultValue ~= nil and defaultValue ~= '' then
                            callback(defaultValue)
                        end
                    end,
                }):start()
            end

            -- Attempts to load the Hugging Face API token from an external command.
            local huggingface_api_token
            local command = 'pass show huggingface/access-token'
            loadConfigFromCommand(command, function(value)
                huggingface_api_token = value
            end, '')

            return {
                api_token = huggingface_api_token,
                model = 'bigcode/starcoder', -- can be a model ID or an http(s) endpoint
                accept_keymap = '<Tab>',
                dismiss_keymap = '<S-Tab>',
                query_params = {
                    max_new_tokens = 60,
                    temperature = 0.3,
                    top_p = 0.95,
                    stop_tokens = nil,
                },
                enable_suggestions_on_files = '*.py,*.lua,*.java,*.js,*.jsx,*.ts,*.tsx,*.html,*.css,*.scss,*.json,*.yaml,*.yml,*.md,*.rmd,*.tex,*.bib,*.cpp,*.h,*.hpp',
                '*.nix', -- pattern matching syntax to enable suggestions on specific files, either a string or a list of strings
            }
        end,
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/devdocs.lua`:

```````lua
return {
    'luckasRanarison/nvim-devdocs',
    cmd = { 'DevdocsOpen', 'DevdocsOpenFloat' },
    dependencies = {
        'nvim-lua/plenary.nvim',
        'nvim-telescope/telescope.nvim',
        'nvim-treesitter/nvim-treesitter',
    },
    opts = {
        float_win = {
            relative = 'editor',
            height = math.floor(vim.o.lines * 0.7),
            width = math.floor(vim.o.columns * 0.8),
            border = 'rounded',
        },
        wrap = true,
        after_open = function()
            vim.keymap.set('n', 'q', ':close<CR>', { silent = true })
        end,
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/dashboard.lua`:

```````lua
return {
    'nvimdev/dashboard-nvim',
    event = 'VimEnter',
    opts = {
        theme = 'doom',
        config = {
            header = {
                'Neovim',
                '',
            },
            header = {
                '',
                '',
                '',
                '                  dMMMMb  dMMMMMP .aMMMb  dMP dMP dMP dMMMMMMMMb',
                '                dMP dMP dMP     dMP"dMP dMP dMP amr dMP"dMP"dMP',
                '               dMP dMP dMMMP   dMP dMP dMP dMP dMP dMP dMP dMP ',
                '              dMP dMP dMP     dMP.aMP  YMvAP" dMP dMP dMP dMP  ',
                '             dMP dMP dMMMMMP  VMMMP"    VP"  dMP dMP dMP dMP   ',
                '',
                '',
                '',
            },
            center = {
                { action = 'Telescope find_files', desc = ' Find file', icon = ' ', key = 'f' },
                { action = 'enew | startinsert', desc = ' New file', icon = '󰝒 ', key = 'n' },
                { action = 'Telescope file_browser', desc = ' File explorer', icon = ' ', key = 'e' },
                { action = 'Telescope live_grep', desc = ' Find text', icon = ' ', key = 't' },
                { action = 'Neogit', desc = ' Git', icon = ' ', key = 'g' },
                -- { action = 'Telescope oldfiles', desc = ' Recent files', icon = ' ', key = 'r' },
                -- { action = 'e lua/plugins/init.lua', desc = ' Config', icon = ' ', key = 'c' },
                { action = 'Lazy', desc = ' Lazy', icon = '💤', key = 'l' },
                { action = 'qa', desc = ' Quit', icon = ' ', key = 'q' },
            },
            footer = function()
                local stats = require('lazy').stats()
                local ms = (math.floor(stats.startuptime * 100 + 0.5) / 100)
                return { '⚡ Neovim loaded ' .. stats.loaded .. '/' .. stats.count .. ' plugins in ' .. ms .. 'ms' }
            end,
        },
        hide = {
            tabline = false,
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/init.lua`:

```````lua
return {
    --  ╭──────────────────────────────────────────────────────────╮
    --  │                       COLOR SCHEME                       │
    --  ╰──────────────────────────────────────────────────────────╯
    {
        'loctvl842/monokai-pro.nvim',
        lazy = false,
        priority = 1000,
        dependencies = { 'nvim-tree/nvim-web-devicons' },
        opts = {
            transparent_background = true,
            devicons = true,
            filter = 'spectrum',
            inc_search = 'underline', -- underline | background
            background_clear = {
                'nvim-tree',
                'bufferline',
                'telescope',
                'toggleterm',
            },
            plugins = {
                bufferline = {
                    underline_selected = true,
                    underline_visible = false,
                    underline_fill = false,
                    bold = false,
                },
                indent_blankline = {
                    context_highlight = 'default', -- default | pro
                    context_start_underline = true,
                },
            },
        },
        config = function(_, opts)
            local monokai = require('monokai-pro')
            monokai.setup(opts)
            monokai.load()
        end,
    },

    --  ╭──────────────────────────────────────────────────────────╮
    --  │                          UTILS                           │
    --  ╰──────────────────────────────────────────────────────────╯
    {
        'nguyenvukhang/nvim-toggler',
        keys = {
            { '<leader>w', desc = 'Toggle Word' },
        },
        config = function()
            require('nvim-toggler').setup({
                remove_default_keybinds = true,
            })
            vim.keymap.set(
                { 'n', 'v' },
                '<leader>w',
                require('nvim-toggler').toggle,
                { desc = 'Toggle a Boolean Value' }
            )
        end,
    },
    {
        'chrisgrieser/nvim-alt-substitute',
        enabled = true,
        opts = true,
        -- lazy-loading with `cmd =` does not work well with incremental preview
        event = 'CmdlineEnter',
    },
    {
        'ellisonleao/glow.nvim',
        cmd = 'Glow',
        ft = 'markdown',
        config = true,
        opts = {
            border = 'double',
            style = 'dark',
            width = 120,
            width_ratio = 0.8,
        },
    },
    {
        'nvim-zh/colorful-winsep.nvim',
        enabled = true,
        event = { 'BufReadPre', 'BufNewFile' },
        opts = {
            only_line_seq = false,
        },
    },

    -- ╭─────────────────────────────────────────────────────────╮
    -- │                         COLORS                          │
    -- ╰─────────────────────────────────────────────────────────╯
    {
        'uga-rosa/ccc.nvim',
        keys = {
            { '<leader>cc', '<cmd>CccPick<cr>', desc = 'Color Picker' },
        },
        opts = {
            win_opts = {
                border = 'single',
            },
        },
    },
    {
        'brenoprata10/nvim-highlight-colors',
        enabled = true,
        event = 'BufReadPre',
        opts = {
            render = 'virtual', ---@usage 'background'|'foreground'|'virtual'
            virtual_symbol = '',
        },
        config = true,
    },

    -- ╭─────────────────────────────────────────────────────────╮
    -- │                     Text Functions                      │
    -- ╰─────────────────────────────────────────────────────────╯
    {
        'sQVe/sort.nvim',
        config = function()
            require('sort').setup()
        end,
    },
    {
        'echasnovski/mini.surround',
        keys = function(_, keys)
            -- Populate the keys based on the user's options
            local plugin = require('lazy.core.config').spec.plugins['mini.surround']
            local opts = require('lazy.core.plugin').values(plugin, 'opts', false)
            local mappings = {
                { opts.mappings.add, desc = 'Add surrounding', mode = { 'n', 'v' } },
                { opts.mappings.delete, desc = 'Delete surrounding' },
                { opts.mappings.find, desc = 'Find right surrounding' },
                { opts.mappings.find_left, desc = 'Find left surrounding' },
                { opts.mappings.highlight, desc = 'Highlight surrounding' },
                { opts.mappings.replace, desc = 'Replace surrounding' },
                { opts.mappings.update_n_lines, desc = 'Update `MiniSurround.config.n_lines`' },
            }
            mappings = vim.tbl_filter(function(m)
                return m[1] and #m[1] > 0
            end, mappings)
            return vim.list_extend(mappings, keys)
        end,
        opts = {
            mappings = {
                add = 'Ga', -- Add surrounding in Normal and Visual modes
                delete = 'Gd', -- Delete surrounding
                find = 'Gf', -- Find surrounding (to the right)
                find_left = 'GF', -- Find surrounding (to the left)
                highlight = 'Gh', -- Highlight surrounding
                replace = 'Gr', -- Replace surrounding
                update_n_lines = 'Gn', -- Update `n_lines`
            },
        },
    },
    -- ╭─────────────────────────────────────────────────────────╮
    -- │                    Markdown Writing                     │
    -- ╰─────────────────────────────────────────────────────────╯
    {
        'Myzel394/easytables.nvim',
        ft = 'markdown',
        config = true,
    },
    {
        'Kicamon/markdown-table-mode.nvim',
        ft = 'markdown',
        config = true,
    },

    --  ╭──────────────────────────────────────────────────────────╮
    --  │                          DEBUG                           │
    --  ╰──────────────────────────────────────────────────────────╯
    {
        'mfussenegger/nvim-dap',
        cmd = { 'DapToggleBreakpoint' },
        keys = {
            { '<leader>db', '<cmd>DapToggleBreakpoint<cr>', desc = 'Add Breakpoint' },
        },
        dependencies = {
            'theHamsta/nvim-dap-virtual-text',
            opts = {
                commented = true,
                virt_text_pos = 'eol',
            },
        },
        config = function()
            require('plugins.dap.debug_adapter')
        end,
    },
    {
        'rcarriga/nvim-dap-ui',
        keys = {
            { '<leader>du', '<cmd>lua require("dapui").toggle()<CR>', desc = 'DAP UI Toggle' },
        },
        dependencies = {
            'mfussenegger/nvim-dap',
            'nvim-neotest/nvim-nio',
        },
        config = true,
    },

    --  ╭──────────────────────────────────────────────────────────╮
    --  │                           JAVA                           │
    --  ╰──────────────────────────────────────────────────────────╯
    {
        'mfussenegger/nvim-jdtls',
        ft = 'java',
        dependencies = {
            'mfussenegger/nvim-dap',
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/ollama-chat.lua`:

```````lua
return {
    'gerazov/ollama-chat.nvim',
    dependencies = {
        'nvim-lua/plenary.nvim',
        'stevearc/dressing.nvim',
        'nvim-telescope/telescope.nvim',
    },
    -- lazy load on command
    cmd = {
        'OllamaQuickChat',
        'OllamaCreateNewChat',
        'OllamaContinueChat',
        'OllamaChat',
        'OllamaChatCode',
        'OllamaModel',
        'OllamaServe',
        'OllamaServeStop',
    },

    keys = {
        {
            '<leader>Ocq',
            '<cmd>OllamaQuickChat<cr>',
            desc = 'Ollama Quick Chat',
            mode = { 'n', 'x' },
            silent = true,
        },
        {
            '<leader>Ocn',
            '<cmd>OllamaCreateNewChat<cr>',
            desc = 'Create Ollama Chat',
            mode = { 'n', 'x' },
            silent = true,
        },
        {
            '<leader>Occ',
            '<cmd>OllamaContinueChat<cr>',
            desc = 'Continue Ollama Chat',
            mode = { 'n', 'x' },
            silent = true,
        },
        {
            '<leader>Och',
            '<cmd>OllamaChat<cr>',
            desc = 'Chat',
            mode = { 'n' },
            silent = true,
        },
        {
            '<leader>Ocd',
            '<cmd>OllamaChatCode<cr>',
            desc = 'Chat Code',
            mode = { 'n' },
            silent = true,
        },
    },

    opts = {
        chats_folder = vim.fn.stdpath('data'), -- data folder is ~/.local/share/nvim
        -- you can also choose "current" and "tmp"
        quick_chat_file = 'ollama-chat.md',
        animate_spinner = true, -- set this to false to disable spinner animation
        model = 'huggingface.co/THUDM/codegeex4-all-9b-GGUF:latest',
        model_code = 'huggingface.co/THUDM/codegeex4-all-9b-GGUF:latest',
        url = 'http://127.0.0.1:11434',
        serve = {
            on_start = false,
            command = 'ollama',
            args = { 'serve' },
            stop_command = 'pkill',
            stop_args = { '-SIGTERM', 'ollama' },
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/rainbow-delimiters.lua`:

```````lua
return {
    'HiPhish/rainbow-delimiters.nvim',
    enabled = true,
    event = 'BufReadPre',
    config = function()
        local rainbow_delimiters = require('rainbow-delimiters')
        local christmas = require('rainbow-delimiters.strategy.christmas')
        local christmas_lights = christmas.lights(rainbow_delimiters.strategy['global'])

        vim.g.rainbow_delimiters = {
            strategy = {
                -- [''] = christmas_lights,
                [''] = rainbow_delimiters.strategy['global'],
                vim = rainbow_delimiters.strategy['local'],
            },
            query = {
                [''] = 'rainbow-delimiters',
                lua = 'rainbow-blocks',
            },
            highlight = {
                'RainbowDelimiterRed',
                'RainbowDelimiterYellow',
                'RainbowDelimiterBlue',
                'RainbowDelimiterOrange',
                'RainbowDelimiterGreen',
                'RainbowDelimiterViolet',
                'RainbowDelimiterCyan',
            },
        }
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/neo-tree.lua`:

```````lua
return {
    'nvim-neo-tree/neo-tree.nvim',
    enabled = true,
    branch = 'v3.x',
    cmd = 'Neotree',
    keys = {
        {
            '<Space>e',
            function()
                require('neo-tree.command').execute({
                    toggle = true,
                    source = 'filesystem',
                    position = 'right',
                })
            end,
            desc = 'Neotree Filesystem',
        },
        {
            '<Leader>e',
            function()
                require('neo-tree.command').execute({
                    toggle = true,
                    source = 'filesystem',
                    position = 'float',
                })
            end,
            desc = 'Neotree Float Filesystem',
        },
        {
            '<Space>bb',
            function()
                require('neo-tree.command').execute({
                    toggle = true,
                    source = 'buffers',
                    position = 'float',
                })
            end,
            desc = 'Neotree Float Buffers',
        },
    },
    dependencies = {
        'nvim-lua/plenary.nvim',
        'nvim-tree/nvim-web-devicons',
        'MunifTanjim/nui.nvim',
    },
    opts = {
        popup_border_style = 'single',
        default_component_configs = {
            icon = {
                folder_closed = '',
                folder_open = '',
                folder_empty = '',
            },
            git_status = {
                symbols = {
                    -- Status type
                    unstaged = '',
                },
            },
            diagnostics = {
                symbols = {
                    hint = '󰌶',
                    info = '',
                    warn = '',
                    error = '',
                },
            },
        },
        commands = {
            image_wezterm = function(state)
                local node = state.tree:get_node()
                if node.type == 'file' then
                    require('image_preview').PreviewImage(node.path)
                end
            end,
        },
        window = {
            mappings = {
                ['h'] = function(state)
                    local node = state.tree:get_node()
                    if node.type == 'directory' and node:is_expanded() then
                        require('neo-tree.sources.filesystem').toggle_directory(state, node)
                    else
                        require('neo-tree.ui.renderer').focus_node(state, node:get_parent_id())
                    end
                end,
                ['l'] = function(state)
                    local node = state.tree:get_node()
                    local path = node:get_id()
                    if node.type == 'directory' then
                        if not node:is_expanded() then
                            require('neo-tree.sources.filesystem').toggle_directory(state, node)
                        elseif node:has_children() then
                            require('neo-tree.ui.renderer').focus_node(state, node:get_child_ids()[1])
                        end
                    end
                    if node.type == 'file' then
                        require('neo-tree.utils').open_file(state, path)
                    end
                end,
                ['E'] = function()
                    vim.api.nvim_exec2('Neotree focus filesystem right', { output = true })
                end,
                ['B'] = function()
                    vim.api.nvim_exec2('Neotree focus buffers right', { output = true })
                end,
                ['G'] = function()
                    vim.api.nvim_exec2('Neotree focus git_status right', { output = true })
                end,
                ['O'] = { 'show_help', nowait = false, config = { title = 'Order by', prefix_key = 'o' } },
                ['o'] = 'open',
                ['<leader>p'] = 'image_wezterm',
            },
        },
        filesystem = {
            filtered_items = {
                hide_dotfiles = false,
                hide_gitignored = false,
            },
            -- follow_current_file = {
            --     enabled = true,
            -- },
            window = {
                mappings = {
                    ['O'] = { 'show_help', nowait = false, config = { title = 'Order by', prefix_key = 'o' } },
                },
            },
        },
        event_handlers = {
            {
                event = 'file_opened',
                handler = function(file_path)
                    require('neo-tree.command').execute({ action = 'close' })
                end,
            },
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/dap/debug_adapter.lua`:

```````lua
local dap = require('dap')

-- Signs
local sign = vim.fn.sign_define
-- 
sign('DapBreakpoint', { text = ' ', texthl = 'DapBreakpoint', linehl = '', numhl = '' })
sign('DapBreakpointCondition', { text = '●', texthl = 'DapBreakpointCondition', linehl = '', numhl = '' })
sign('DapLogPoint', { text = '◆', texthl = 'DapLogPoint', linehl = '', numhl = '' })

--  ╭──────────────────────────────────────────────────────────╮
--  │                          PYTHON                          │
--  ╰──────────────────────────────────────────────────────────╯
dap.adapters.python = function(cb, config)
    if config.request == 'attach' then
        ---@diagnostic disable-next-line: undefined-field
        local port = (config.connect or config).port
        ---@diagnostic disable-next-line: undefined-field
        local host = (config.connect or config).host or '127.0.0.1'
        cb({
            type = 'server',
            port = assert(port, '`connect.port` is required for a python `attach` configuration'),
            host = host,
            options = {
                source_filetype = 'python',
            },
        })
    else
        cb({
            type = 'executable',
            command = '/Users/ilias/.virtualenvs/debugpy/bin/python3',
            args = { '-m', 'debugpy.adapter' },
            options = {
                source_filetype = 'python',
            },
        })
    end
end
dap.configurations.python = {
    {
        -- The first three options are required by nvim-dap
        type = 'python', -- the type here established the link to the adapter definition: `dap.adapters.python`
        request = 'launch',
        name = 'Launch file',

        -- Options below are for debugpy, see https://github.com/microsoft/debugpy/wiki/Debug-configuration-settings for supported options

        program = '${file}', -- This configuration will launch the current file if used.
        pythonPath = function()
            -- debugpy supports launching an application with a different interpreter then the one used to launch debugpy itself.
            -- The code below looks for a `venv` or `.venv` folder in the current directly and uses the python within.
            -- You could adapt this - to for example use the `VIRTUAL_ENV` environment variable.
            local cwd = vim.fn.getcwd()
            if vim.fn.executable(cwd .. '/Users/ilias/.virtualenvs/debugpy/bin/python3') == 1 then
                return cwd .. '/Users/ilias/.virtualenvs/debugpy/bin/python3'
            elseif vim.fn.executable(cwd .. '/Users/ilias/.virtualenvs/debugpy/bin/python3') == 1 then
                return cwd .. '/Users/ilias/.virtualenvs/debugpy/bin/python3'
            else
                return '/Users/ilias/.virtualenvs/debugpy/bin/python3'
            end
        end,
    },
}
--  ╭──────────────────────────────────────────────────────────╮
--  │                           RUST                           │
--  ╰──────────────────────────────────────────────────────────╯
dap.adapters.lldb = {
    type = 'executable',
    command = '/opt/homebrew/opt/llvm/bin/lldb-vscode', -- adjust as needed, must be absolute path
    name = 'lldb',
}
dap.configurations.rust = {
    {
        name = 'Launch',
        type = 'lldb',
        request = 'launch',
        program = function()
            return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/target/debug/' .. 'file')
        end,
        cwd = '${workspaceFolder}',
        stopOnEntry = false,
        args = {},

        -- 💀
        -- if you change `runInTerminal` to true, you might need to change the yama/ptrace_scope setting:
        --
        --    echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
        --
        -- Otherwise you might get the following error:
        --
        --    Error on launch: Failed to attach to the target process
        --
        -- But you should be aware of the implications:
        -- https://www.kernel.org/doc/html/latest/admin-guide/LSM/Yama.html
        -- runInTerminal = false,
        showDisassembly = 'never',
        -- vim.fn.jobstart('cargo build'),
    },
}
--  ╭──────────────────────────────────────────────────────────╮
--  │                        JAVASCRIPT                        │
--  ╰──────────────────────────────────────────────────────────╯
dap.adapters['pwa-node'] = {
    type = 'server',
    host = 'localhost',
    port = '${port}',
    executable = {
        command = 'node',
        args = { '/Users/ilias/.config/js-debug/src/dapDebugServer.js', '${port}' },
    },
}
dap.configurations.javascript = {
    {
        type = 'pwa-node',
        request = 'launch',
        name = 'Launch file',
        program = '${file}',
        cwd = '${workspaceFolder}',
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/nvim-notify.lua`:

```````lua
return {
    'rcarriga/nvim-notify',
    keys = {
        {
            '<space>nd',
            function()
                require('notify').dismiss({ silent = true, pending = true })
            end,
            desc = 'Dismiss all Notifications',
        },
    },
    opts = {
        render = 'wrapped-compact',
        stages = 'fade_in_slide_out',
        timeout = 1000,
        max_height = function()
            return math.floor(vim.o.lines * 0.75)
        end,
        max_width = function()
            return math.floor(vim.o.columns * 0.75)
        end,
        on_open = function(win)
            vim.api.nvim_win_set_config(win, { zindex = 100, border = 'single' })
        end,
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/mini-indentscope.lua`:

```````lua
return {
    'echasnovski/mini.indentscope',
    enabled = true,
    event = 'BufReadPre',
    version = false,
    init = function()
        vim.api.nvim_create_autocmd('Filetype', {
            pattern = {
                'help',
                'Trouble',
                'lazy',
                'mason',
                'notify',
                'NeogitStatus',
                'NeogitPopup',
                'lspinfo',
                'NvimTree',
                'glowpreview',
                'oil',
                'oil_preview',
                'markdown',
                'toggleterm',
                'Outline',
                'noice',
                'neo-tree',
                'fzf',
                'checkhealth',
                'grug-far-help',
            },
            callback = function()
                vim.b.miniindentscope_disable = true
            end,
        })
    end,
    opts = {
        options = { try_as_border = true },
        symbol = '│',
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/git.lua`:

```````lua
return {
    --  ╭──────────────────────────────────────────────────────────╮
    --  │                         Diffview                         │
    --  ╰──────────────────────────────────────────────────────────╯
    {
        'sindrets/diffview.nvim',
        cmd = { 'DiffviewOpen', 'DiffviewClose', 'DiffviewToggleFiles', 'DiffviewFocusFiles' },
        dependencies = 'nvim-lua/plenary.nvim',
        config = function()
            require('diffview').setup()
        end,
    },
    --  ╭──────────────────────────────────────────────────────────╮
    --  │                         Gitsigns                         │
    --  ╰──────────────────────────────────────────────────────────╯
    {
        'lewis6991/gitsigns.nvim',
        event = { 'BufReadPre', 'BufNewFile' },
        dependencies = 'nvim-lua/plenary.nvim',
        config = function()
            require('gitsigns').setup({
                attach_to_untracked = true,
                on_attach = function(bufnr)
                    local gs = package.loaded.gitsigns

                    local function map(mode, l, r, opts)
                        opts = opts or {}
                        opts.buffer = bufnr
                        vim.keymap.set(mode, l, r, opts)
                    end

                    -- Navigation
                    map('n', '<leader>gn', function()
                        if vim.wo.diff then
                            return '<leader>gn'
                        end
                        vim.schedule(function()
                            gs.next_hunk()
                        end)
                        return '<Ignore>'
                    end, { expr = true, desc = 'Gitsigns Next Hunk' })

                    map('n', '<leader>gN', function()
                        if vim.wo.diff then
                            return '<leader>gN'
                        end
                        vim.schedule(function()
                            gs.prev_hunk()
                        end)
                        return '<Ignore>'
                    end, { expr = true, desc = 'Gitsigns Previous Hunk' })

                    -- Actions
                    map('n', '<leader>gs', gs.stage_hunk, { desc = 'Gitsigns Stage Hunk' })
                    map('n', '<leader>gr', gs.reset_hunk, { desc = 'Gitsigns Reset Hunk' })
                    map('v', '<leader>gs', function()
                        gs.stage_hunk({ vim.fn.line('.'), vim.fn.line('v') })
                    end, { desc = 'Gitsigns Stage Hunk' })
                    map('v', '<leader>gr', function()
                        gs.reset_hunk({ vim.fn.line('.'), vim.fn.line('v') })
                    end, { desc = 'Gitsigns Reset Hunk' })
                    map('n', '<leader>gS', gs.stage_buffer, { desc = 'Gitsigns Stage Buffer' })
                    map('n', '<leader>gu', gs.undo_stage_hunk, { desc = 'Gitsigns Undo Stage Buffer' })
                    map('n', '<leader>gR', gs.reset_buffer, { desc = 'Gitsigns Reset Buffer' })
                    map('n', '<leader>gp', gs.preview_hunk, { desc = 'Gitsigns Preview Hunk' })
                    map('n', '<leader>gB', function()
                        gs.blame_line({ full = true })
                    end, { desc = 'Gitsigns Blame Line Full' })
                    map('n', '<leader>gb', gs.toggle_current_line_blame, { desc = 'Gitsigns Current Blame Line' })
                    map('n', '<leader>gd', gs.diffthis, { desc = 'Gitsigns Hunk Diffthis' })
                    map('n', '<leader>gD', function()
                        gs.diffthis('~')
                    end, { desc = 'Gitsigns Hunk Diffthis' })
                    map('n', '<leader>gt', gs.toggle_deleted, { desc = 'Gitsigns Git Toggle deleted lines' })

                    -- Text object
                    map({ 'o', 'x' }, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
                end,
            })
        end,
    },
    --  ╭──────────────────────────────────────────────────────────╮
    --  │                          Neogit                          │
    --  ╰──────────────────────────────────────────────────────────╯
    {
        'NeogitOrg/neogit',
        cmd = 'Neogit',
        keys = {
            { '<leader>gg', '<cmd>Neogit<cr>', desc = 'Neogit' },
        },
        dependencies = {
            'nvim-lua/plenary.nvim',
            'nvim-telescope/telescope.nvim',
            'sindrets/diffview.nvim',
        },
        config = true,
        opts = {
            commit_editor = {
                staged_diff_split_kind = 'vsplit',
                spell_check = false,
            },
            signs = {
                item = { '', '' },
                section = { '', '' },
            },
            disable_commit_confirmation = true,
            integrations = {
                telescope = true,
                diffview = true,
            },
        },
    },
    --  ╭──────────────────────────────────────────────────────────╮
    --  │                    Advance git search                    │
    --  ╰──────────────────────────────────────────────────────────╯
    {
        'aaronhallaert/advanced-git-search.nvim',
        cmd = { 'AdvancedGitSearch' },
        dependencies = {
            'nvim-telescope/telescope.nvim',
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/avante.lua`:

```````lua
return {
    'yetone/avante.nvim',
    event = 'VeryLazy',
    version = false, -- Have to use newest to work with ollama as "first class provider"

    opts = {
        provider = 'ollama',
        ollama = {
            api_key_name = '',
            endpoint = 'http://127.0.0.1:11434',
            model = 'mistral-nemo:latest',
            options = {
                num_ctx = 32768,
                temperature = 0,
            },
            stream = true,
        },
        behaviour = {
            auto_focus_sidebar = true,
            auto_suggestions = true, -- Experimental stage
            auto_suggestions_respect_ignore = false,
            auto_set_highlight_group = true,
            auto_set_keymaps = true,
            auto_apply_diff_after_generation = false,
            jump_result_buffer_on_finish = false,
            support_paste_from_clipboard = true,
            minimize_diff = true,
            enable_token_counting = true,
            enable_cursor_planning_mode = false,
            use_cwd_as_project_root = false,
        },
        mappings = {
            diff = {
                ours = 'co',
                theirs = 'ct',
                all_theirs = 'ca',
                both = 'cb',
                cursor = 'cc',
                next = ']x',
                prev = '[x',
            },
            suggestion = {
                accept = '<M-l>',
                next = '<M-]>',
                prev = '<M-[>',
                dismiss = '<C-]>',
            },
            jump = {
                next = ']]',
                prev = '[[',
            },
            submit = {
                normal = '<CR>',
                insert = '<C-s>',
            },
            -- Keep these with the Ollama prefixed commands it hopefully deprecates
            ask = '<leader>Oaa',
            edit = '<leader>Oae',
            refresh = '<leader>Oar',
            focus = '<leader>Oaf',
            toggle = {
                default = '<leader>Oat',
                debug = '<leader>Oad',
                hint = '<leader>ah',
                suggestion = '<leader>Oas',
                repomap = '<leader>OaR',
            },
            sidebar = {
                apply_all = 'A',
                apply_cursor = 'a',
                retry_user_request = 'r',
                edit_user_request = 'e',
                switch_windows = '<Tab>',
                reverse_switch_windows = '<S-Tab>',
                remove_file = 'd',
                add_file = '@',
                close = { '<Esc>', 'q' },
                ---@alias AvanteCloseFromInput { normal: string | nil, insert: string | nil }
                ---@type AvanteCloseFromInput | nil
                close_from_input = nil, -- e.g., { normal = "<Esc>", insert = "<C-d>" }
            },
            files = {
                add_current = '<leader>Oac', -- Add current buffer to selected files
            },
            select_model = '<leader>Oa?', -- Select model command
        },
    },
    -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
    build = 'make',
    dependencies = {
        'nvim-treesitter/nvim-treesitter',
        'stevearc/dressing.nvim',
        'nvim-lua/plenary.nvim',
        'MunifTanjim/nui.nvim',
        --- The below dependencies are optional,
        'echasnovski/mini.pick', -- for file_selector provider mini.pick
        'nvim-telescope/telescope.nvim', -- for file_selector provider telescope
        'hrsh7th/nvim-cmp', -- autocompletion for avante commands and mentions
        'ibhagwan/fzf-lua', -- for file_selector provider fzf
        'nvim-tree/nvim-web-devicons', -- or echasnovski/mini.icons
        'zbirenbaum/copilot.lua', -- for providers='copilot'
        {
            -- support for image pasting
            'HakonHarnes/img-clip.nvim',
            event = 'VeryLazy',
            opts = {
                -- recommended settings
                default = {
                    embed_image_as_base64 = false,
                    prompt_for_file_name = false,
                    drag_and_drop = {
                        insert_mode = true,
                    },
                    -- required for Windows users
                    use_absolute_path = true,
                },
            },
        },
        {
            -- Make sure to set this up properly if you have lazy=true
            'MeanderingProgrammer/render-markdown.nvim',
            opts = {
                file_types = { 'markdown', 'Avante' },
            },
            ft = { 'markdown', 'Avante' },
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/ai/avante.lua`:

```````lua
local M ={}
-- ╭─────────────────────────────────────────────────────────╮
-- │                 AVANTE PROMPTS BINDING                  │
-- ╰─────────────────────────────────────────────────────────╯
-- prefil edit window with common scenarios to avoid repeating query and submit immediately
M.prefill_edit_window = function(request)
    require('avante.api').edit()
    local code_bufnr = vim.api.nvim_get_current_buf()
    local code_winid = vim.api.nvim_get_current_win()
    if code_bufnr == nil or code_winid == nil then
        return
    end
    vim.api.nvim_buf_set_lines(code_bufnr, 0, -1, false, { request })
    -- Optionally set the cursor position to the end of the input
    vim.api.nvim_win_set_cursor(code_winid, { 1, #request + 1 })
    -- Simulate Ctrl+S keypress to submit
    vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes('<C-s>', true, true, true), 'v', true)
end

M.ask = function(question)
 local  answer = require("avante.api").ask(question)
    -- Carriage Return
    vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes('<CR>', true, true, true), 'v', true)
    return answer
end
-- ╭──────────────────────────────╮
-- │ AVANTE TEMPLATES TO BE BOUND │
-- ╰──────────────────────────────╯
M.avante_grammar_correction = 'Correct the text to standard English, but keep any code blocks inside intact.'
M.avante_keywords = 'Extract the main keywords from the following text'
M.avante_code_readability_analysis = [[
  You must identify any readability issues in the code snippet.
  Some readability issues to consider:
  - Unclear naming
  - Unclear purpose
  - Redundant or obvious comments
  - Lack of comments
  - Long or complex one liners
  - Too much nesting
  - Long variable names
  - Inconsistent naming and code style.
  - Code repetition
  You may identify additional problems. The user submits a small section of code from a larger file.
  Only list lines with readability issues, in the format <line_num>|<issue and proposed solution>
  If there's no issues with code respond with only: <OK>
]]
M.avante_optimize_code = 'Optimize the following code'
M.avante_summarize = 'Summarize the following text'
M.avante_translate = 'Translate this into Chinese, but keep any code blocks inside intact'
M.avante_explain_code = 'Explain the following code'
M.avante_complete_code = 'Complete the following codes written in ' .. vim.bo.filetype
M.avante_add_docstring = 'Add docstring to the following codes'
M.avante_fix_bugs = 'Fix the bugs inside the following codes if any'
M.avante_add_tests = 'Implement tests for the following code'

return M
```````

`/home/tlh/.config/nvim/lua/plugins/noice.lua`:

```````lua
return {
    'folke/noice.nvim',
    event = 'VeryLazy',
    opts = {
        cmdline = {
            format = {
                search_replace = { kind = 'search', pattern = '^:%%s/', icon = '󰛔', lang = 'regex' },
            },
        },
        messages = {
            view_history = 'popup',
        },
        commands = {
            history = {
                view = 'popup',
            },
        },
        lsp = {
            progress = {
                enabled = false,
            },
            override = {
                ['vim.lsp.util.convert_input_to_markdown_lines'] = true,
                ['vim.lsp.util.stylize_markdown'] = true,
            },
            signature = {
                enabled = false,
            },
        },
        presets = {
            inc_rename = true,
        },
        views = {
            cmdline_popup = {
                position = {
                    row = 3,
                    col = '50%',
                },
            },
            popup = {
                size = {
                    width = '80%',
                    height = '70%',
                },
                border = {
                    style = 'single',
                },
                win_options = {
                    wrap = true,
                },
            },
        },
        routes = {
            -- ╭───────────────────────╮
            -- │ SEND MESSAGES TO MINI │
            -- ╰───────────────────────╯
            {
                view = 'mini',
                filter = {
                    event = 'msg_show',
                    any = {
                        { find = '; after #%d+' },
                        { find = '; before #%d+' },
                        { find = 'fewer lines' },
                        { find = 'written' },
                    },
                },
            },
            -- {
            --     view = 'mini',
            --     filter = {
            --         event = 'msg_showcmd',
            --     },
            -- },
            {
                view = 'mini',
                filter = {
                    event = 'notify',
                    any = {
                        { find = 'hidden' },
                        { find = 'clipboard' },
                        { find = 'Deleted' },
                        { find = 'Renamed' },
                        { find = 'file_browser' },
                    },
                },
            },
            -- ╭───────────────╮
            -- │ SKIP MESSAGES │
            -- ╰───────────────╯
            {
                filter = {
                    event = 'msg_show',
                    kind = '',
                    any = {
                        { find = 'catalog' },
                    },
                },
                opts = { skip = true },
            },
            -- {
            --     filter = {
            --         event = 'notify',
            --         kind = 'info',
            --         any = {
            --             { find = 'hidden' },
            --         },
            --     },
            --     opts = { skip = true },
            -- },
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/indent-blankline.lua`:

```````lua
return {
    'lukas-reineke/indent-blankline.nvim',
    enabled = true,
    event = 'BufReadPre',
    main = 'ibl',
    opts = {
        indent = {
            char = '│',
            repeat_linebreak = false,
        },
        scope = {
            enabled = false,
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/snipe.lua`:

```````lua
return {
    'leath-dub/snipe.nvim',
    keys = {
        {
            '-',
            function()
                require('snipe').open_buffer_menu()
            end,
            desc = 'Open Snipe buffer menu',
        },
    },
    opts = {
        ui = {
            --- @type "topleft" | "bottomleft" | "topright" | "bottomright" | "center" | "cursor"
            position = 'center',
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/flash.lua`:

```````lua
return {
    'folke/flash.nvim',
    event = 'VeryLazy',
    ---@type Flash.Config
    opts = {
        label = {
            ---@type "lowercase" | "all"
            reuse = 'all',
        },
        modes = {
            search = {
                enabled = true,
                highlight = { backdrop = true },
            },
            char = {
                jump_labels = true,
                keys = { 'f', 'F', 't', 'T' },
                char_actions = function(motion)
                    return {
                        [','] = 'next',
                        [';'] = 'prev',
                        [motion:lower()] = 'next',
                        [motion:upper()] = 'prev',
                    }
                end,
            },
            treesitter = {
                highlight = {
                    backdrop = true,
                },
            },
        },
        -- action = function(match, state)
        --     require('cinnamon').scroll(function()
        --         require('flash.jump').jump(match, state)
        --         require('flash.jump').on_jump(state)
        --     end)
        -- end,
    },
    keys = {
        {
            's',
            mode = { 'n', 'x', 'o' },
            function()
                require('flash').jump()
            end,
            desc = 'Flash',
        },
        {
            '<leader>s',
            mode = { 'n', 'o', 'x' },
            function()
                require('flash').treesitter()
            end,
            desc = 'Flash Treesitter',
        },
        {
            'r',
            mode = 'o',
            function()
                require('flash').remote()
            end,
            desc = 'Remote Flash',
        },
        {
            '<Space>v',
            mode = { 'n', 'o', 'x' },
            function()
                require('flash').treesitter_search()
            end,
            desc = 'Treesitter Flash Search',
        },
        {
            '<c-s>',
            mode = { 'c' },
            function()
                require('flash').toggle()
            end,
            desc = 'Toggle Flash Search',
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/bufferline.lua`:

```````lua
return {
    'akinsho/bufferline.nvim',
    enabled = true,
    event = 'VeryLazy',
    version = '*',
    config = function()
        require('bufferline').setup({
            options = {
                indicator = {
                    -- icon = '▎',
                    style = 'underline', -- 'icon' | 'underline' | 'none'
                },
                tab_size = 20,
                diagnostics = 'nvim_lsp',
                diagnostics_indicator = function(count, level, diagnostics_dict, context)
                    local ret = (diagnostics_dict.error and ' ' .. diagnostics_dict.error .. ' ' or '')
                        .. (diagnostics_dict.warning and ' ' .. diagnostics_dict.warning or '')
                        .. (diagnostics_dict.hint and '  ' .. diagnostics_dict.hint .. ' ' or '')
                    return vim.trim(ret)
                end,
                ---@type 'thin' | 'thick' | 'slant' | 'padded_slant' | 'slope' | 'padded_slope'
                separator_style = 'thin',
                groups = {
                    options = {
                        toggle_hidden_on_enter = true,
                    },
                    items = {
                        require('bufferline.groups').builtin.pinned:with({ icon = '' }),
                    },
                },
            },
        })
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/nvim-lint.lua`:

```````lua
return {
    'mfussenegger/nvim-lint',
    event = { 'BufReadPre', 'BufNewFile' },
    config = function()
        local lint = require('lint')
        lint.linters_by_ft = {
            javascript = { 'eslint' },
            json = { 'jsonlint' },
            vue = { 'eslint' },
            yaml = { 'yamllint' },
        }
        local lint_augroup = vim.api.nvim_create_augroup('lint', { clear = true })
        vim.api.nvim_create_autocmd({ 'BufEnter', 'BufWritePost', 'InsertLeave' }, {
            group = lint_augroup,
            callback = function()
                lint.try_lint()
            end,
        })
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/lsp/mason.lua`:

```````lua
return {
    'williamboman/mason.nvim',
    build = ':MasonUpdate',
    cmd = 'Mason',
    dependencies = {
        'williamboman/mason-lspconfig.nvim',
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/lsp/outline.lua`:

```````lua
return {
    'hedyhli/outline.nvim',
    enabled = true,
    cmd = 'Outline',
    keys = {
        { '<space>o', '<cmd>Outline<cr>', desc = 'Toggle Outline' },
    },
    opts = {
        outline_window = {
            width = 30,
        },
        symbols = {
            icons = {
                Module = { icon = '全' },
                Namespace = { icon = '' },
                Package = { icon = '' },
                Class = { icon = '' },
                Method = { icon = '' },
                Enum = { icon = '' },
                Interface = { icon = '' },
                Function = { icon = '' },
                Variable = { icon = '󰫧' },
                String = { icon = '󰅳' },
                Boolean = { icon = '' },
                Key = { icon = '' },
                Null = { icon = '󰟢' },
                Event = { icon = '' },
            },
        },
    },
    config = true,
}

```````

`/home/tlh/.config/nvim/lua/plugins/lsp/trouble.lua`:

```````lua
return {
    'folke/trouble.nvim',
    keys = {
        { '<space>xx', '<cmd>Trouble diagnostics toggle<cr>', desc = 'Diagnostics (Trouble)' },
        { '<space>xX', '<cmd>Trouble diagnostics toggle filter.buf=0<cr>', desc = 'Buffer Diagnostics (Trouble)' },
        { '<space>xs', '<cmd>Trouble symbols toggle<cr>', desc = 'Symbols (Trouble)' },
        {
            '<space>xr',
            '<cmd>Trouble lsp toggle win.position=right<cr>',
            desc = 'LSP Definitions / references / ... (Trouble)',
        },
        { '<space>xl', '<cmd>Trouble loclist toggle<cr>', desc = 'Location List (Trouble)' },
        { '<space>xq', '<cmd>Trouble qflist toggle<cr>', desc = 'Quickfix List (Trouble)' },
        { '<space>xt', '<cmd>Trouble todo<cr>', desc = 'Todo Trouble' },
    },
    opts = {
        focus = true,
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/lsp/nvim-navic.lua`:

```````lua
return {
    'SmiteshP/nvim-navic',
    enabled = true,
    event = 'BufReadPre',
    dependencies = {
        'neovim/nvim-lspconfig',
    },
    opts = {
        highlight = true,
        separator = '   ',
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/lsp/aerial.lua`:

```````lua
return {
    'stevearc/aerial.nvim',
    enabled = true,
    cmd = 'AerialToggle',
    dependencies = {
        'nvim-treesitter/nvim-treesitter',
        'nvim-tree/nvim-web-devicons',
    },
    opts = {
        layout = {
            width = 60,
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/lsp/lazydev.lua`:

```````lua
return {
    {
        'folke/lazydev.nvim',
        ft = 'lua',
        dependencies = {
            { 'justinsgithub/wezterm-types', lazy = true },
            { 'Bilal2453/luvit-meta', lazy = true },
        },
        opts = {
            library = {
                'lazy.nvim',
                'luvit-meta/library',
                { path = 'wezterm-types', mods = { 'wezterm' } },
            },
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/lsp/lsp-config.lua`:

```````lua
--  ╭──────────────────────────────────────────────────────────╮
--  │                    LSP CONFIGURATION                     │
--  ╰──────────────────────────────────────────────────────────╯
return {
    'neovim/nvim-lspconfig',
    event = { 'BufReadPre', 'BufReadPost', 'BufNewFile' },
    -- depedencies = { 'saghen/blink.cmp' },
    config = function()
        -- ╭───────╮
        -- │ MASON │
        -- ╰───────╯
        require('mason').setup({
            ui = {
                icons = {
                    package_installed = ' ',
                    package_pending = ' ',
                    package_uninstalled = ' ',
                },
                border = 'single',
                height = 0.8,
            },
        })

        -- ╭─────────────────╮
        -- │ MASON LSPCONFIG │
        -- ╰─────────────────╯
        require('mason-lspconfig').setup({
            ensure_installed = {
                'cssls',
                'emmet_ls',
                'html',
                'intelephense',
                'jdtls',
                'jsonls',
                'ltex',
                'lua_ls',
                'ruff',
                'rust_analyzer',

                'ts_ls',
                'volar',
                'yamlls',
            },
        })

        -- ╭───────────╮
        -- │ LSPCONFIG │
        -- ╰───────────╯
        local lspconfig = require('lspconfig')

        -- ╭──────────────────────╮
        -- │ CMP LSP CAPABILITIES │
        -- ╰──────────────────────╯
        local lsp_defaults = lspconfig.util.default_config
        lsp_defaults.capabilities =
            vim.tbl_deep_extend('force', lsp_defaults.capabilities, require('cmp_nvim_lsp').default_capabilities())
        -- lsp_defaults.capabilities = vim.tbl_deep_extend(
        --     'force',
        --     lsp_defaults.capabilities,
        --     require('blink.cmp').get_lsp_capabilities(lsp_defaults.capabilities)
        -- )

        -- ╭─────────────────────────────────╮
        -- │ LSP BORDER FOR :LSPINFO COMMAND │
        -- ╰─────────────────────────────────╯
        require('lspconfig.ui.windows').default_options.border = 'single'

        -- ╭───────────────────╮
        -- │ WINBAR WITH NAVIC │
        -- ╰───────────────────╯
        local navic = require('nvim-navic')

        -- ╭─────────────────────────────────────────────────────────╮
        -- │                   DIAGNOSTIC KAYMAPS                    │
        -- ╰─────────────────────────────────────────────────────────╯
        local opts = function(desc)
            return { noremap = true, silent = true, desc = desc }
        end

        vim.keymap.set('n', '<space>d', vim.diagnostic.open_float, opts('Open Diagnostic Window'))
        vim.keymap.set('n', '<space><left>', function()
            vim.diagnostic.jump({ count = -vim.v.count1 })
        end, opts('Previous Diagnostic'))
        vim.keymap.set('n', '<space><right>', function()
            vim.diagnostic.jump({ count = vim.v.count1 })
        end, opts('Next Diagnostic'))
        vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts('Send Diagnostic to Locallist'))

        -- ╭───────────────────────╮
        -- │ LSPATTACH AUTOCOMMAND │
        -- ╰───────────────────────╯
        vim.api.nvim_create_autocmd('LspAttach', {
            group = vim.api.nvim_create_augroup('UserLspConfig', {}),
            callback = function(ev)
                vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

                -- ╭─────────╮
                -- │ KEYMAPS │
                -- ╰─────────╯
                local bufopts = function(desc)
                    return { buffer = ev.buf, desc = desc }
                end
                -- All lsp keymaps starts with gr expept K.
                -- Default lsp keymaps. Setting the keymaps again, only to change the description.
                vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts('Hover'))
                vim.keymap.set({ 'n', 'v' }, 'gra', vim.lsp.buf.code_action, bufopts('LSP Code Action'))
                vim.keymap.set({ 'n', 'v' }, '<M-CR>', vim.lsp.buf.code_action, bufopts('LSP Code Action'))
                vim.keymap.set('n', 'grn', vim.lsp.buf.rename, bufopts('LSP Rename'))
                vim.keymap.set('n', 'grr', vim.lsp.buf.references, bufopts('LSP References'))
                -- Custom lsp keymaps.
                vim.keymap.set('n', 'grd', vim.lsp.buf.definition, bufopts('LSP Go to Definition'))
                vim.keymap.set('n', 'grD', vim.lsp.buf.declaration, bufopts('LSP Go to Declaration'))
                vim.keymap.set('n', 'gri', vim.lsp.buf.implementation, bufopts('LSP Go to Implementation'))
                vim.keymap.set('n', 'grf', function()
                    vim.lsp.buf.format({ async = true })
                end, bufopts('LSP Formatting'))
                vim.keymap.set('n', 'grk', vim.lsp.buf.signature_help, bufopts('LSP Singature Help'))
                vim.keymap.set('n', 'grs', vim.lsp.buf.document_symbol, bufopts('LSP Document Symbols'))
                vim.keymap.set('n', 'grt', vim.lsp.buf.type_definition, bufopts('LSP Type Definition'))
                vim.keymap.set('n', 'grwa', vim.lsp.buf.add_workspace_folder, bufopts('LSP Add Workspace Folder'))
                vim.keymap.set('n', 'grwr', vim.lsp.buf.remove_workspace_folder, bufopts('LSP Remove Workspace Folder'))
                vim.keymap.set('n', 'grwl', function()
                    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
                end, bufopts('LSP List Workspace Folder'))

                -- Get client
                local client = vim.lsp.get_client_by_id(ev.data.client_id)

                -- ╭─────────────╮
                -- │ INLAY HINTS │
                -- ╰─────────────╯
                if client.server_capabilities.inlayHintProvider then
                    vim.lsp.inlay_hint.enable(true)
                else
                    vim.lsp.inlay_hint.enable(false)
                end

                -- ╭────────────╮
                -- │ NVIM-NAVIC │
                -- ╰────────────╯
                if client.server_capabilities.documentSymbolProvider then
                    vim.o.winbar = "%{%v:lua.require'nvim-navic'.get_location()%}"
                    navic.attach(client, ev.buf)
                end
            end,
        })

        -- ╭────────────────────╮
        -- │ TOGGLE INLAY HINTS │
        -- ╰────────────────────╯
        if vim.lsp.inlay_hint then
            vim.keymap.set('n', '<Space>ih', function()
                vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled())
            end, { desc = 'Toggle Inlay Hints' })
        end

        -- ╭─────────────╮
        -- │ LSP BORDERS │
        -- ╰─────────────╯
        local border = {
            { '┌', 'FloatBorder' },
            { '─', 'FloatBorder' },
            { '┐', 'FloatBorder' },
            { '│', 'FloatBorder' },
            { '┘', 'FloatBorder' },
            { '─', 'FloatBorder' },
            { '└', 'FloatBorder' },
            { '│', 'FloatBorder' },
        }

        local handlers = {
            ['textDocument/hover'] = vim.lsp.with(vim.lsp.handlers.hover, { border = border }),
            ['textDocument/signatureHelp'] = vim.lsp.with(vim.lsp.handlers.signature_help, { border = border }),
        }

        -- ╭───────────────────╮
        -- │ DIAGNOSTIC CONFIG │
        -- ╰───────────────────╯
        vim.diagnostic.config({
            virtual_text = {
                prefix = '', -- Could be '●', '▎', │, 'x', '■', , 
            },
            jump = {
                float = true,
            },
            float = { border = 'single' },
            signs = {
                text = {
                    [vim.diagnostic.severity.ERROR] = ' ',
                    [vim.diagnostic.severity.WARN] = ' ',
                    [vim.diagnostic.severity.HINT] = '󰌶 ',
                    [vim.diagnostic.severity.INFO] = ' ',
                },
                numhl = {
                    [vim.diagnostic.severity.ERROR] = 'DiagnosticSignError',
                    [vim.diagnostic.severity.WARN] = 'DiagnosticSignWarn',
                    [vim.diagnostic.severity.HINT] = 'DiagnosticSignHint',
                    [vim.diagnostic.severity.INFO] = 'DiagnosticSignInfo',
                },
            },
        })

        --  ╭──────────────────────────────────────────────────────────╮
        --  │                         SERVERS                          │
        --  ╰──────────────────────────────────────────────────────────╯

        -- ╭────────────╮
        -- │ LUA SERVER │
        -- ╰────────────╯
        local runtime_path = vim.split(package.path, ';')
        table.insert(runtime_path, 'lua/?.lua')
        table.insert(runtime_path, 'lua/?/init.lua')
        lspconfig.lua_ls.setup({
            handlers = handlers,
            on_init = function(client)
                local path = client.workspace_folders[1].name
                if vim.loop.fs_stat(path .. '/.luarc.json') or vim.loop.fs_stat(path .. '/.luarc.jsonc') then
                    return
                end

                client.config.settings.Lua = vim.tbl_deep_extend('force', client.config.settings.Lua, {
                    runtime = {
                        -- Tell the language server which version of Lua you're using
                        -- (most likely LuaJIT in the case of Neovim)
                        version = 'LuaJIT',
                    },
                    -- Make the server aware of Neovim runtime files
                    workspace = {
                        checkThirdParty = false,
                        library = {
                            vim.env.VIMRUNTIME,
                            -- Depending on the usage, you might want to add additional paths here.
                            -- "${3rd}/luv/library"
                            -- "${3rd}/busted/library",
                        },
                        -- or pull in all of 'runtimepath'. NOTE: this is a lot slower
                        -- library = vim.api.nvim_get_runtime_file("", true)
                    },
                })
                client.notify('workspace/didChangeConfiguration', { settings = client.config.settings })
            end,
            settings = {
                Lua = {},
            },
        })

        -- ╭───────────────────╮
        -- │ JAVASCRIPT SERVER │
        -- ╰───────────────────╯
        lspconfig.ts_ls.setup({
            handlers = handlers,
            init_options = {
                plugins = {
                    {
                        name = '@/vue/typescript-plugin',
                        location = '/Users/ilias/.local/share/nvim/mason/packages/vue-language-server/node_modules/@vue/language-server',
                        languages = { 'vue' },
                    },
                },
                preferences = {
                    includeInlayParameterNameHints = 'all',
                    includeInlayParameterNameHintsWhenArgumentMatchesName = true,
                    includeInlayFunctionParameterTypeHints = true,
                    includeInlayVariableTypeHints = true,
                    includeInlayPropertyDeclarationTypeHints = true,
                    includeInlayFunctionLikeReturnTypeHints = true,
                    includeInlayEnumMemberValueHints = true,
                    importModuleSpecifierPreference = 'non-relative',
                },
            },
            -- filetypes = { 'typescript', 'javascript', 'javascriptreact', 'typescriptreact', 'vue' },
            -- on_attach = function(client, bufnr)
            --     client.server_capabilities.document_formatting = false
            --     client.server_capabilities.document_range_formatting = false
            --     on_attach(client, bufnr)
            -- end,
        })

        -- ╭──────────────────╮
        -- │ VOLAR VUE SERVER │
        -- ╰──────────────────╯
        lspconfig.volar.setup({
            handlers = handlers,
            init_options = {
                typescript = {
                    tsdk = '/Users/ilias/.local/share/nvim/mason/packages/typescript-language-server/node_modules/typescript/lib',
                },
                vue = {
                    hybridMode = false,
                },
            },
        })

        -- ╭───────────────╮
        -- │ PYTHON SERVER │
        -- ╰───────────────╯
        lspconfig.ruff.setup({
            handlers = handlers,
        })

        -- ╭──────────────╮
        -- │ EMMET SERVER │
        -- ╰──────────────╯
        lspconfig.emmet_ls.setup({
            handlers = handlers,
        })

        -- ╭────────────╮
        -- │ CSS SERVER │
        -- ╰────────────╯
        lspconfig.cssls.setup({
            handlers = handlers,
            settings = {
                css = {
                    lint = {
                        unknownAtRules = 'ignore',
                    },
                },
            },
        })

        -- ╭─────────────────╮
        -- │ TAILWIND SERVER │
        -- ╰─────────────────╯
        lspconfig.tailwindcss.setup({
            handlers = handlers,
            settings = {
                tailwindCSS = {
                    classAttributes = { 'class', 'className', 'class:list', 'classList', 'ngClass' },
                    includeLanguages = {
                        eelixir = 'html-eex',
                        eruby = 'erb',
                        htmlangular = 'html',
                        templ = 'html',
                    },
                    lint = {
                        cssConflict = 'warning',
                        invalidApply = 'error',
                        invalidConfigPath = 'error',
                        invalidScreen = 'error',
                        invalidTailwindDirective = 'error',
                        invalidVariant = 'error',
                        recommendedVariantOrder = 'warning',
                    },
                    validate = true,
                },
            },
        })

        -- ╭─────────────╮
        -- │ JSON SERVER │
        -- ╰─────────────╯
        lspconfig.jsonls.setup({
            handlers = handlers,
            filetypes = { 'json', 'jsonc' },
            init_options = {
                provideFormatter = true,
            },
        })

        -- ╭─────────────╮
        -- │ HTML SERVER │
        -- ╰─────────────╯
        lspconfig.html.setup({
            handlers = handlers,
            settigns = {
                css = {
                    lint = {
                        validProperties = {},
                    },
                },
            },
        })

        -- ╭─────────────╮
        -- │ LTEX SERVER │
        -- ╰─────────────╯
        lspconfig.ltex.setup({
            handlers = handlers,
            filetypes = { 'bibtex', 'markdown', 'latex', 'tex' },
            settings = {
                -- ltex = {
                --     language = 'de-DE',
                -- },
            },
        })

        -- ╭───────────────╮
        -- │ TEXLAB SERVER │
        -- ╰───────────────╯
        lspconfig.texlab.setup({
            handlers = handlers,
            settings = {
                texlab = {
                    auxDirectory = '.',
                    bibtexFormatter = 'texlab',
                    build = {
                        args = { '-pdf', '-interaction=nonstopmode', '-synctex=1', '%f' },
                        executable = 'latexmk',
                        forwardSearchAfter = false,
                        onSave = false,
                    },
                    chktex = {
                        onEdit = false,
                        onOpenAndSave = false,
                    },
                    diagnosticsDelay = 300,
                    formatterLineLength = 100,
                    forwardSearch = {
                        args = {},
                    },
                    latexFormatter = 'latexindent',
                    latexindent = {
                        modifyLineBreaks = false,
                    },
                },
            },
        })

        -- ╭────────────╮
        -- │ PHP SERVER │
        -- ╰────────────╯
        lspconfig.intelephense.setup({
            handlers = handlers,
        })

        -- ╭─────────────╮
        -- │ JAVA SERVER │
        -- ╰─────────────╯
        lspconfig.jdtls.setup({
            handlers = handlers,
        })

        -- ╭─────────────╮
        -- │ YAML SERVER │
        -- ╰─────────────╯
        lspconfig.yamlls.setup({
            handlers = handlers,
            settings = {
                yaml = {
                    validate = true,
                    hover = true,
                    completion = true,
                    format = {
                        enable = true,
                        singleQuote = true,
                        bracketSpacing = true,
                    },
                    editor = {
                        tabSize = 2,
                    },
                    schemaStore = {
                        enable = true,
                    },
                },
                editor = {
                    tabSize = 2,
                },
            },
        })

        -- ╭─────────────╮
        -- │ RUST SERVER │
        -- ╰─────────────╯
        lspconfig.rust_analyzer.setup({
            handlers = handlers,
        })

        -- ╭──────────────╮
        -- │ TYPST SERVER │
        -- ╰──────────────╯
        lspconfig.tinymist.setup({
            handlers = handlers,
            single_file_support = true,
            root_dir = function()
                return vim.fn.getcwd()
            end,
            settings = {
                formatterMode = 'typstyle',
            },
        })
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/lsp/glance.lua`:

```````lua
return {
    'dnlhc/glance.nvim',
    keys = {
        { '<space>gr', '<cmd>Glance references<cr>', desc = 'Glance references' },
        { '<space>gd', '<cmd>Glance definitions<cr>', desc = 'Glance definitions' },
        { '<space>gy', '<cmd>Glance type_definitions<cr>', desc = 'Glance type_definitions' },
        { '<space>gm', '<cmd>Glance implementations<cr>', desc = 'Glance implementations' },
    },
    config = true,
}

```````

`/home/tlh/.config/nvim/lua/plugins/nvim-autopairs.lua`:

```````lua
return {
    'windwp/nvim-autopairs',
    enabled = true,
    event = 'InsertEnter',
    config = function()
        require('nvim-autopairs').setup({
            fast_wrap = {},
        })

        local npairs = require('nvim-autopairs')
        local Rule = require('nvim-autopairs.rule')
        local cond = require('nvim-autopairs.conds')

        local brackets = { { '(', ')' }, { '[', ']' }, { '{', '}' } }

        -- ADD SPACES BETWEEN PARENTHESES
        npairs.add_rules({
            -- Rule for a pair with left-side ' ' and right side ' '
            Rule(' ', ' ')
                -- Pair will only occur if the conditional function returns true
                :with_pair(
                    function(opts)
                        -- We are checking if we are inserting a space in (), [], or {}
                        local pair = opts.line:sub(opts.col - 1, opts.col)
                        return vim.tbl_contains({
                            brackets[1][1] .. brackets[1][2],
                            brackets[2][1] .. brackets[2][2],
                            brackets[3][1] .. brackets[3][2],
                        }, pair)
                    end
                )
                :with_move(cond.none())
                :with_cr(cond.none())
                -- We only want to delete the pair of spaces when the cursor is as such: ( | )
                :with_del(
                    function(opts)
                        local col = vim.api.nvim_win_get_cursor(0)[2]
                        local context = opts.line:sub(col - 1, col + 2)
                        return vim.tbl_contains({
                            brackets[1][1] .. '  ' .. brackets[1][2],
                            brackets[2][1] .. '  ' .. brackets[2][2],
                            brackets[3][1] .. '  ' .. brackets[3][2],
                        }, context)
                    end
                ),
        })

        -- ARROW KEY ON JAVASCRIPT
        npairs.add_rules({
            Rule('%(.*%)%s*%=>$', ' {  }', { 'typescript', 'typescriptreact', 'javascript' })
                :use_regex(true)
                :set_end_pair_length(2),
        })

        -- AUTO ADDSPACE ON =
        npairs.add_rules({
            Rule('=', '')
                :with_pair(cond.not_inside_quote())
                :with_pair(function(opts)
                    local last_char = opts.line:sub(opts.col - 1, opts.col - 1)
                    if last_char:match('[%w%=%s]') then
                        return true
                    end
                    return false
                end)
                :replace_endpair(function(opts)
                    local prev_2char = opts.line:sub(opts.col - 2, opts.col - 1)
                    local next_char = opts.line:sub(opts.col, opts.col)
                    next_char = next_char == ' ' and '' or ' '
                    if prev_2char:match('%w$') then
                        return '<bs> =' .. next_char
                    end
                    if prev_2char:match('%=$') then
                        return next_char
                    end
                    if prev_2char:match('=') then
                        return '<bs><bs>=' .. next_char
                    end
                    return ''
                end)
                :set_end_pair_length(0)
                :with_move(cond.none())
                :with_del(cond.none()),
        })

        -- For each pair of brackets we will add another rule
        for _, bracket in pairs(brackets) do
            npairs.add_rules({
                -- Each of these rules is for a pair with left-side '( ' and right-side ' )' for each bracket type
                Rule(bracket[1] .. ' ', ' ' .. bracket[2])
                    :with_pair(cond.none())
                    :with_move(function(opts)
                        return opts.char == bracket[2]
                    end)
                    :with_del(cond.none())
                    :use_key(bracket[2])
                    -- Removes the trailing whitespace that can occur without this
                    :replace_map_cr(
                        function(_)
                            return '<C-c>2xi<CR><C-c>O'
                        end
                    ),
            })
        end

        -- MOVE PAST COMMAS AND SEMICOLONS
        for _, punct in pairs({ ',', ';' }) do
            require('nvim-autopairs').add_rules({
                require('nvim-autopairs.rule')('', punct)
                    :with_move(function(opts)
                        return opts.char == punct
                    end)
                    :with_pair(function()
                        return false
                    end)
                    :with_del(function()
                        return false
                    end)
                    :with_cr(function()
                        return false
                    end)
                    :use_key(punct),
            })
        end
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/journal.lua`:

```````lua
return {
    'jakobkhansen/journal.nvim',
    config = function()
        require('journal').setup({
            filetype = 'md', -- Filetype to use for new journal entries
            root = '~/Dropbox/Journal', -- Root directory for journal entries
            date_format = '%m/%d/%Y', -- Date format for `:Journal <date-modifier>`
            autocomplete_date_modifier = 'end', -- "always"|"never"|"end". Enable date modifier autocompletion

            -- Configuration for journal entries
            journal = {
                -- Default configuration for `:Journal <date-modifier>`
                format = '%Y/%m-%B/daily/%d-%A',
                template = '# %A %B %d %Y\n',
                frequency = { day = 1 },

                -- Nested configurations for `:Journal <type> <type> ... <date-modifier>`
                entries = {
                    day = {
                        format = '%Y/%m-%B/daily/%d-%A', -- Format of the journal entry in the filesystem.
                        template = '# %A %B %d %Y\n', -- Optional. Template used when creating a new journal entry
                        frequency = { day = 1 }, -- Optional. The frequency of the journal entry. Used for `:Journal next`, `:Journal -2` etc
                    },
                    week = {
                        format = '%Y/%m-%B/weekly/week-%W',
                        template = '# Week %W %B %Y\n',
                        frequency = { day = 7 },
                    },
                    month = {
                        format = '%Y/%m-%B/%B',
                        template = '# %B %Y\n',
                        frequency = { month = 1 },
                    },
                    year = {
                        format = '%Y/%Y',
                        template = '# %Y\n',
                        frequency = { year = 1 },
                    },
                },
            },
        })
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/rest.lua`:

```````lua
return {
    'rest-nvim/rest.nvim',
    enabled = true,
    keys = {
        { '<leader>R', '<cmd>lua require("rest-nvim").run()<cr>', desc = 'Rest API' },
    },
    dependencies = { 'nvim-lua/plenary.nvim' },
    config = function()
        require('rest-nvim').setup({
            -- Open request results in a horizontal split
            result_split_horizontal = false,
            -- Keep the http file buffer above|left when split horizontal|vertical
            result_split_in_place = false,
            -- Skip SSL verification, useful for unknown certificates
            skip_ssl_verification = false,
            -- Encode URL before making request
            encode_url = true,
            -- Highlight request on run
            highlight = {
                enabled = true,
                timeout = 150,
            },
            result = {
                -- toggle showing URL, HTTP info, headers at top the of result window
                show_url = true,
                show_http_info = true,
                show_headers = true,
                -- executables or functions for formatting response body [optional]
                -- set them to false if you want to disable them
                formatters = {
                    json = 'jq',
                    html = function(body)
                        return vim.fn.system({
                            'jq',
                            -- '-i',
                            -- '-q',
                            -- '-',
                        }, body)
                    end,
                },
            },
            -- Jump to request line on run
            jump_to_request = false,
            env_file = '.env',
            custom_dynamic_variables = {},
            yank_dry_run = true,
        })
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/inc_rename.lua`:

```````lua
return {
    'smjonas/inc-rename.nvim',
    cmd = 'IncRename',
    keys = {
        { '<space>ir', ':IncRename ', desc = 'IncRename' },
    },
    config = true,
}

```````

`/home/tlh/.config/nvim/lua/plugins/image_preview.lua`:

```````lua
return {
    'adelarsq/image_preview.nvim',
    enabled = true,
    keys = { '<leader>p' },
    config = function()
        require('image_preview').setup()
    end,
}

```````

`/home/tlh/.config/nvim/lua/plugins/oil.lua`:

```````lua
return {
    'stevearc/oil.nvim',
    enabled = true,
    keys = {
        { '<leader>o', '<cmd>Oil --float<cr>', desc = 'File browser' },
    },
    opts = {
        float = {
            max_width = 100,
            max_height = 80,
        },
    },
}

```````

`/home/tlh/.config/nvim/lua/plugins/comments.lua`:

```````lua
return {
    -- ╭─────────────────────────────────────────────────────────╮
    -- │                      COMMENT.NVIM                       │
    -- ╰─────────────────────────────────────────────────────────╯
    {
        'numToStr/Comment.nvim',
        event = { 'BufReadPre', 'BufNewFile' },
        keys = {
            { 'gc', mode = 'v' },
            { 'gb', mode = 'v' },
            { 'gcc' },
            { 'gbc' },
            { 'gco' },
            { 'gcO' },
            { 'gcA' },
        },
        dependencies = {
            {
                'JoosepAlviste/nvim-ts-context-commentstring',
                config = function()
                    require('ts_context_commentstring').setup({
                        enable_autocmd = false,
                    })
                end,
            },
        },
        config = function()
            require('Comment').setup({
                pre_hook = require('ts_context_commentstring.integrations.comment_nvim').create_pre_hook(),
                -- pre_hook = function()
                --     return vim.bo.commentstring
                -- end,
            })
        end,
    },

    -- ╭─────────────────────────────────────────────────────────╮
    -- │                   TODO-COMMENTS.NVIM                    │
    -- ╰─────────────────────────────────────────────────────────╯
    {
        'folke/todo-comments.nvim',
        event = { 'BufReadPre', 'BufNewFile' },
        keys = {
            { '<leader>tq', '<cmd>TodoQuickFix<cr>', desc = 'Todo QuickFix' },
            { '<leader>tl', '<cmd>TodoLocList<cr>', desc = 'Todo LocList' },
            { '<leader>ts', '<cmd>TodoTelescope<cr>', desc = 'Todo Telescope' },
        },
        dependencies = { 'nvim-lua/plenary.nvim' },
        opts = {
            signs = true, -- show icons in the signs column
            sign_priority = 8, -- sign priority
            -- keywords recognized as todo comments
            keywords = {
                FIX = {
                    icon = ' ', -- icon used for the sign, and in search results
                    color = 'error', -- can be a hex color, or a named color (see below)
                    alt = { 'FIXME', 'BUG', 'FIXIT', 'ISSUE' }, -- a set of other keywords that all map to this FIX keywords
                    -- signs = false, -- configure signs for some keywords individually
                },
                TODO = { icon = ' ', color = 'info' },
                HACK = { icon = ' ', color = 'warning' },
                WARN = { icon = ' ', color = 'warning', alt = { 'WARNING', 'XXX' } },
                PERF = { icon = ' ', alt = { 'OPTIM', 'PERFORMANCE', 'OPTIMIZE' } },
                NOTE = { icon = ' ', color = 'hint', alt = { 'INFO' } },
                TEST = { icon = '⏲ ', color = 'test', alt = { 'TESTING', 'PASSED', 'FAILED' } },
            },
            gui_style = {
                fg = 'NONE', -- The gui style to use for the fg highlight group.
                bg = 'BOLD', -- The gui style to use for the bg highlight group.
            },
            merge_keywords = true, -- when true, custom keywords will be merged with the defaults
            -- highlighting of the line containing the todo comment
            -- * before: highlights before the keyword (typically comment characters)
            -- * keyword: highlights of the keyword
            -- * after: highlights after the keyword (todo text)
            highlight = {
                multiline = true, -- enable multine todo comments
                multiline_pattern = '^.', -- lua pattern to match the next multiline from the start of the matched keyword
                multiline_context = 10, -- extra lines that will be re-evaluated when changing a line
                before = '', -- "fg" or "bg" or empty
                keyword = 'wide', -- "fg", "bg", "wide", "wide_bg", "wide_fg" or empty. (wide and wide_bg is the same as bg, but will also highlight surrounding characters, wide_fg acts accordingly but with fg)
                after = 'fg', -- "fg" or "bg" or empty
                pattern = [[.*<(KEYWORDS)\s*:]], -- pattern or table of patterns, used for highlighting (vim regex)
                comments_only = true, -- uses treesitter to match keywords in comments only
                max_line_len = 400, -- ignore lines longer than this
                exclude = {}, -- list of file types to exclude highlighting
            },
            -- list of named colors where we try to extract the guifg from the
            -- list of highlight groups or use the hex color if hl not found as a fallback
            colors = {
                error = { 'DiagnosticError', 'ErrorMsg', '#DC2626' },
                warning = { 'DiagnosticWarn', 'WarningMsg', '#FBBF24' },
                info = { 'DiagnosticInfo', '#2563EB' },
                hint = { 'DiagnosticHint', '#10B981' },
                default = { 'Identifier', '#7C3AED' },
                test = { 'Identifier', '#FF00FF' },
            },
            search = {
                command = 'rg',
                args = {
                    '--color=never',
                    '--no-heading',
                    '--with-filename',
                    '--line-number',
                    '--column',
                },
                -- regex that will be used to match keywords.
                -- don't replace the (KEYWORDS) placeholder
                pattern = [[\b(KEYWORDS):]], -- ripgrep regex
                -- pattern = [[\b(KEYWORDS)\b]], -- match without the extra colon. You'll likely get false positives
            },
        },
    },

    -- ╭─────────────────────────────────────────────────────────╮
    -- │                    COMMENT-BOX.NVIM                     │
    -- ╰─────────────────────────────────────────────────────────╯
    {
        'LudoPinelli/comment-box.nvim',
        cmd = { 'CBcatalog', 'CBlcbox7', 'CBlcbox13', 'CBd', 'CBline14' },
        keys = {
            { '<leader>cb', '<cmd>CBlcbox7<cr>', desc = 'Section Title' },
            { '<leader>cd', '<cmd>CBd<cr>', desc = 'Delete Commet Box' },
            { '<leader>ca', '<cmd>CBlcbox13<cr>', desc = 'Subsection Title' },
            { '<leader>cl', '<cmd>CBcatalog<cr>', desc = 'Comment Box Catalog' },
            { '<leader>cl', '<cmd>CBline14<cr>', desc = 'Dividing Line' },
        },
        opts = {
            line_width = 60,
        },
    },

    -- ╭─────────────────────────────────────────────────────────╮
    -- │                   NVIM-COMMENT-FRAME                    │
    -- ╰─────────────────────────────────────────────────────────╯
    {
        's1n7ax/nvim-comment-frame',
        enabled = true,
        keys = {
            { '<leader>cf', desc = 'Single Comment Frame' },
            { '<leader>cm', desc = 'Multi Comment Frame' },
        },
        dependencies = 'nvim-treesitter',
        config = true,
    },
}

```````

`/home/tlh/.config/nvim/lua/core/autocommands.lua`:

```````lua
-- ╭─────────────────────────────────────────────────────────╮
-- │                 HIGHLIGHT SELECTET TEXT                 │
-- ╰─────────────────────────────────────────────────────────╯
vim.api.nvim_create_autocmd('TextYankPost', {
    callback = function()
        vim.highlight.on_yank({
            higroup = 'IncSearch',
            timeout = 100,
        })
    end,
})

-- ╭─────────────────────────────────────────────────────────╮
-- │    FORCE TREESITTER TO WORK WITH SPECIFIC FILESTYPES    │
-- ╰─────────────────────────────────────────────────────────╯
vim.api.nvim_create_autocmd('FileType', {
    pattern = { 'zsh', 'conf' },
    callback = function()
        vim.bo.filetype = 'sh'
    end,
})

-- ╭─────────────────────────────────────────────────────────╮
-- │    FORCE TREESITTER TO WORK WITH SPECIFIC FILESTYPES    │
-- ╰─────────────────────────────────────────────────────────╯
vim.filetype.add({
    extension = {
        sh = 'sh',
        zsh = 'sh',
        conf = 'sh',
    },
    filename = {
        ['.zshrc'] = 'sh',
        ['.zshenv'] = 'sh',
        ['.conf'] = 'sh',
    },
})

-- ╭─────────────────────────────────────────────────────────╮
-- │                QUIT SOME WINDOWS WITH Q                 │
-- ╰─────────────────────────────────────────────────────────╯
vim.api.nvim_create_autocmd('FileType', {
    pattern = { 'help', 'qf', 'man', 'oil', 'aerial-nav', 'query' },
    callback = function()
        vim.keymap.set('n', 'q', '<cmd>bd<cr>', { silent = true, buffer = true })
    end,
})

-- ╭─────────────────────────────────────────────────────────╮
-- │                  QUIT DIFFVIEW WITH Q                   │
-- ╰─────────────────────────────────────────────────────────╯
vim.api.nvim_create_autocmd('FileType', {
    pattern = { 'DiffViewFiles', 'checkhealth' },
    callback = function()
        vim.keymap.set('n', 'q', '<cmd>tabc<cr>', { silent = true, buffer = true })
    end,
})

-- ╭─────────────────────────────────────────────────────────╮
-- │       CHECK IF CODE ACTIONS ARE AVAILEBLE ON LSP        │
-- ╰─────────────────────────────────────────────────────────╯
vim.api.nvim_create_autocmd({ 'CursorHold', 'CursorHoldI' }, {
    callback = function()
        require('code_action_utils').code_action_listener()
    end,
})

-- ╭─────────────────────────────────────────────────────────╮
-- │                 OPEN HELP IN A NEW TAB                  │
-- ╰─────────────────────────────────────────────────────────╯
vim.api.nvim_create_autocmd('FileType', {
    pattern = 'help',
    command = ':wincmd T',
})

-- ╭─────────────────────────────────────────────────────────╮
-- │                      FORMATOPTIONS                      │
-- ╰─────────────────────────────────────────────────────────╯
vim.api.nvim_create_autocmd({ 'BufEnter' }, {
    callback = function()
        vim.opt.formatoptions:remove({ 'o', 'r', 'c' })
        vim.opt.formatoptions:append({ 't' })
    end,
})

-- ╭─────────────────────────────────────────────────────────╮
-- │       JUMP TO LAST EDIT POSITION ON OPENING FILE        │
-- ╰─────────────────────────────────────────────────────────╯
vim.api.nvim_create_autocmd('BufReadPost', {
    desc = 'Open file at the last position it was edited earlier',
    pattern = '*',
    command = 'silent! normal! g`"zv',
})

-- ╭─────────────────────────────────────────────────────────╮
-- │               MESSAGE IF MACRO IS STOPPED               │
-- ╰─────────────────────────────────────────────────────────╯
local macro_group = vim.api.nvim_create_augroup('MacroRecording', { clear = true })
vim.api.nvim_create_autocmd('RecordingLeave', {
    group = macro_group,
    callback = function()
        -- Display a message when macro recording stops
        print('Macro recording stopped')
    end,
})

```````

`/home/tlh/.config/nvim/lua/core/options.lua`:

```````lua
-- Search
vim.opt.ignorecase = true
vim.opt.incsearch = true
vim.opt.smartcase = true
vim.opt.hlsearch = true

-- Indents, spaces
vim.opt.autoindent = true
vim.opt.smartindent = true
vim.opt.tabstop = 4
vim.opt.shiftwidth = 4
vim.opt.softtabstop = 4
vim.opt.expandtab = true

-- UI
vim.opt.background = 'dark'
vim.opt.number = true
vim.opt.relativenumber = false
vim.opt.showcmd = true
vim.o.cmdheight = 0
vim.opt.signcolumn = 'yes'
vim.opt.scrolloff = 4
vim.opt.sidescrolloff = 4
vim.opt.laststatus = 3
vim.opt.list = true
vim.opt.listchars:append({ tab = '»-' })
vim.opt.listchars:append({ trail = '·' })
vim.opt.listchars:append({ extends = '»' })
vim.opt.listchars:append({ precedes = '«' })
vim.opt.fillchars:append({ eob = ' ', fold = ' ', foldsep = ' ', foldopen = '', foldclose = '' })
vim.opt.confirm = true
vim.opt.smoothscroll = true
vim.opt.winminwidth = 5

-- Text
vim.opt.textwidth = 0
vim.opt.wrapmargin = 0
vim.opt.wrap = true
vim.opt.linebreak = true
vim.opt.breakindent = true
vim.opt.selection = 'inclusive'
vim.opt.swapfile = true
vim.opt.undofile = true
vim.opt.undolevels = 10000
vim.opt.conceallevel = 0
vim.opt.virtualedit = 'onemore'

-- Folding
vim.o.foldenable = false

-- Clipboard
vim.opt.clipboard = 'unnamedplus'

-- Keys
vim.opt.backspace = { 'indent', 'eol', 'start' }
vim.opt.mouse = 'a'

-- Cursor
vim.opt.cursorline = true
vim.opt.cursorcolumn = false
vim.opt.guicursor = {
    'n-v-c:block-Cursor/lCursor-blinkwait1000-blinkon100-blinkoff100',
    'i-ci:ver25-Cursor/lCursor-blinkwait1000-blinkon100-blinkoff100',
    'r:hor50-Cursor/lCursor-blinkwait100-blinkon100-blinkoff100',
}

-- Path
vim.opt.path:append('**')

-- Spell
vim.opt.spell = true
vim.opt.spelllang = { 'en' }

-- Split
vim.opt.splitright = true
vim.opt.splitbelow = true
vim.opt.splitkeep = 'screen'

-- Other
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1
vim.g.url_effect_enabled = true -- Highlight URLs with an underline effect.

vim.g.autoformat_enabled = true -- Enable auto formatting at start.
vim.g.autopairs_enabled = true -- Enable autopairs at start.

-- Markdown
vim.g.markdown_fenced_languages = { 'html', 'python', 'lua', 'js=javascript' }
vim.g.markdown_recommended_style = 0 -- Fix markdown indentation settings

-- For treesitter commentstring
vim.opt.updatetime = 100
vim.g.skip_ts_context_commentstring_module = true

-- Disable providers for health checks
vim.g.loaded_python3_provider = 0
vim.g.loaded_ruby_provider = 0
vim.g.loaded_perl_provider = 0
vim.g.loaded_node_provider = 0

```````

`/home/tlh/.config/nvim/lua/core/utils.lua`:

```````lua
local M = {}

-- Toggle split window from equalize to maximize
M.max_or_equal = function()
    local winwidth = vim.fn.winwidth(vim.api.nvim_get_current_win())
    if winwidth <= vim.o.columns / 2 then
        vim.cmd('wincmd|')
    else
        vim.cmd('wincmd=')
    end
end

return M

```````

`/home/tlh/.config/nvim/lua/core/keymaps.lua`:

```````lua
--  ╭──────────────────────────────────────────────────────────╮
--  │                      BASIC KEYMAPS                       │
--  ╰──────────────────────────────────────────────────────────╯

-- Function helpers
local Utils = require('core.utils')

-- Exit from insert mode
vim.keymap.set('i', 'kj', '<esc>', { desc = 'Exit insert mode' })

-- Save
vim.keymap.set('n', '<leader>w', '<cmd>w!<CR>', { desc = 'Save' })

-- Create Splits
vim.keymap.set('n', '<Space>\\', ':vsplit<CR>', { desc = 'Split Window Vertically' })
vim.keymap.set('n', '<Space>/', ':split<CR>', { desc = 'Split Window Horizontally' })

-- Better up/down
vim.keymap.set({ 'n', 'x' }, 'j', "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })
vim.keymap.set({ 'n', 'x' }, 'k', "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })

-- Search
vim.keymap.set('n', 'ƒ', '/')
-- Search and replace word under the cursor
vim.keymap.set(
    'n',
    '<leader>R',
    ':%s/\\<<C-r><C-w>\\>/<C-r><C-w>/gI<Left><Left><Left>',
    { desc = 'Search and replace word under the cursor' }
)

-- Search and replace in visual selection
vim.keymap.set('x', '<leader>r', [[:s/\%V]], { desc = 'Search and replace in visual selection' })

-- Select all
vim.keymap.set({ 'n', 'x' }, '<C-a>', 'gg<S-v>G', { desc = 'Select all' })

-- For correcting a word in insert mode
vim.keymap.set('i', '<c-l>', '<c-g>u<Esc>[s1z=`]a<c-g>u')

-- Buffers
vim.keymap.set('n', '<Space>bd', '<cmd>bd<cr>', { desc = 'Delete Buffer' })

-- Move to split panes using <space> hlkj keys
vim.keymap.set('n', '<Space>h', '<c-w>h', { desc = 'Move Split Pane Left' })
vim.keymap.set('n', '<Space>l', '<c-w>l', { desc = 'Move Split Pane Right' })
vim.keymap.set('n', '<Space>k', '<c-w>k', { desc = 'Move Split Pane Up' })
vim.keymap.set('n', '<Space>j', '<c-w>j', { desc = 'Move Split Pane Down' })

-- Equalize split panes
vim.keymap.set('n', '<Space>m', function()
    Utils.max_or_equal()
end, { desc = 'Max or Equal Split' })

-- Resize split panes
vim.keymap.set('n', '<M-UP>', '<cmd>resize +2<cr>', { desc = 'Resize pane up' })
vim.keymap.set('n', '<M-DOWN>', '<cmd>resize -2<cr>', { desc = 'Resize pane down' })
vim.keymap.set('n', '<M-LEFT>', '<cmd>vertical resize +2<cr>', { desc = 'Resize pane left' })
vim.keymap.set('n', '<M-RIGHT>', '<cmd>vertical resize -2<cr>', { desc = 'Resize pane right' })

-- Move lines
vim.keymap.set('n', '<c-k>', ':m -2<CR>==', { silent = true, desc = 'Move line up' })
vim.keymap.set('n', '<c-j>', ':m +1<CR>==', { silent = true, desc = 'Move line down' })
-- vim.keymap.set('i', '<c-k>', '<esc><cmd>m .-2<cr>==gi')
-- vim.keymap.set('i', '<c-j>', '<esc><cmd>m .+1<cr>==gi')
vim.keymap.set('v', '<c-k>', ":m '<-2<CR>gv=gv", { silent = true, desc = 'Move line up visual' })
vim.keymap.set('v', '<c-j>', ":m '>+1<CR>gv=gv", { silent = true, desc = 'Move line down visual' })

-- Indent lines in visual selection
vim.keymap.set('v', '<', '<gv')
vim.keymap.set('v', '>', '>gv')

-- Paste
vim.keymap.set('v', 'p', '"_dP')
vim.keymap.set('x', 'p', 'P')
vim.keymap.set('n', 'dD', '"_dd')

-- Not yanking with 'c' and 'x'
vim.keymap.set({ 'n', 'v' }, 'c', '"_c')
vim.keymap.set('n', 'C', '"_C')
-- vim.keymap.set('n', 'x', '"_x')

-- Jump to BoL and EoL without leaving insert mode
vim.keymap.set('i', '<M-i>', '<Esc>I', { desc = 'Jump to Beginn of Line in insert mode' })
vim.keymap.set('i', '<M-a>', '<Esc>A', { desc = 'Jump to End of Line in insert mode' })

-- Inner quotes
vim.keymap.set({ 'o', 'x' }, 'iq', "i'", { desc = 'Inner Single Quotes' })
vim.keymap.set({ 'o', 'x' }, 'iQ', 'i"', { desc = 'Inner Double Quotes' })

-- Outer quotes
vim.keymap.set({ 'o', 'x' }, 'aq', "2i'", { desc = 'Around Single Quotes' })
vim.keymap.set({ 'o', 'x' }, 'aQ', '2i"', { desc = 'Around Double Quotes' })
vim.keymap.set({ 'o', 'x' }, "a'", "2i'", { desc = 'Around Single Quotes' })
vim.keymap.set({ 'o', 'x' }, 'a"', '2i"', { desc = 'Around Double Quotes' })

-- Inner and outer rectangle brackets []
vim.keymap.set({ 'o', 'x' }, 'ir', 'i[', { desc = 'Inner Brackets' })
vim.keymap.set({ 'o', 'x' }, 'ar', 'a[', { desc = 'Inner Brackets' })

-- Add comma
-- vim.keymap.set("n", ",,", [[f'a]])
vim.keymap.set('i', '<C-b>', '{},<esc>hha', { silent = true, desc = 'Add curly with comma {},' })

-- Go to last change
vim.keymap.set('n', 'g,', 'g;', { desc = 'Go to newest change' })
vim.keymap.set('n', 'g;', 'g,', { desc = 'Go to last change' })

-- Clear search with <esc>
vim.keymap.set({ 'i', 'n' }, '<esc>', '<cmd>noh<cr><esc>', { desc = 'Escape and clear hlsearch' })

-- Add new file
vim.keymap.set('n', '<leader>fn', '<cmd>enew<cr>', { desc = 'New File' })

-- Indent properly when entering insert mode on empty lines
vim.keymap.set('n', 'i', function()
    if vim.api.nvim_get_current_line():find('^%s*$') then
        return [["_cc]]
    end
    return 'i'
end, { expr = true, desc = 'better i' })

-- Spelling
vim.keymap.set('n', 'z.', '1z=', { desc = '󰓆 Fix Spelling' })
-- Choose word from vim.ui.select
vim.keymap.set('n', 'z=', function()
    vim.ui.select(
        vim.fn.spellsuggest(vim.fn.expand('<cword>')),
        {},
        vim.schedule_wrap(function(selected)
            if selected then
                vim.cmd('normal! ciw' .. selected)
            end
        end)
    )
end, { desc = 'Spelling suggestions' })

-- Messages
vim.keymap.set('n', '<leader>mm', '<cmd>messages<cr>', { desc = 'File Changes (Messages)' })

-- Don't yank emty lines with dd
vim.keymap.set('n', 'dd', function()
    if vim.fn.getline('.') == '' then
        return '"_dd'
    end
    return 'dd'
end, { expr = true })

--  ╭──────────────────────────────────────────────────────────╮
--  │                 PLUGINS RELATED KEYMAPS                            │
--  ╰──────────────────────────────────────────────────────────╯

-- Bufferline.nvim
vim.keymap.set('n', '<S-Left>', '<cmd>BufferLineCyclePrev<cr>', { desc = 'Buffer Previous' })
vim.keymap.set('n', '<S-Right>', '<cmd>BufferLineCycleNext<cr>', { desc = 'Buffer Next' })
vim.keymap.set('n', '<space>bp', '<cmd>BufferLineTogglePin<cr>', { desc = 'Pin Buffer' })
vim.keymap.set('n', '<space>bk', '<cmd>BufferLinePick<cr>', { desc = 'Pick Buffer' })
vim.keymap.set('n', '<space>bo', '<cmd>BufferLineCloseOthers<cr>', { desc = 'Close Other Buffers' })
vim.keymap.set('n', '<space>b<left>', '<cmd>BufferLineMovePrev<cr>', { desc = 'Move Buffer to the left' })
vim.keymap.set('n', '<space>b<right>', '<cmd>BufferLineMoveNext<cr>', { desc = 'Move Buffer to the right' })
vim.keymap.set('n', '<space>b1', '<cmd>BufferLineGoToBuffer 1<cr>', { desc = 'Go to Buffer 1' })
vim.keymap.set('n', '<space>b2', '<cmd>BufferLineGoToBuffer 2<cr>', { desc = 'Go to Buffer 2' })
vim.keymap.set('n', '<space>b3', '<cmd>BufferLineGoToBuffer 3<cr>', { desc = 'Go to Buffer 3' })
vim.keymap.set('n', '<space>b4', '<cmd>BufferLineGoToBuffer 4<cr>', { desc = 'Go to Buffer 4' })
vim.keymap.set('n', '<space>b5', '<cmd>BufferLineGoToBuffer 5<cr>', { desc = 'Go to Buffer 5' })
vim.keymap.set('n', '<space>b6', '<cmd>BufferLineGoToBuffer 6<cr>', { desc = 'Go to Buffer 6' })
vim.keymap.set('n', '<space>b7', '<cmd>BufferLineGoToBuffer 7<cr>', { desc = 'Go to Buffer 7' })
vim.keymap.set('n', '<space>b8', '<cmd>BufferLineGoToBuffer 8<cr>', { desc = 'Go to Buffer 8' })
vim.keymap.set('n', '<space>b9', '<cmd>BufferLineGoToBuffer 9<cr>', { desc = 'Go to Buffer 9' })

vim.keymap.set('o', 'm', [[:<c-u>lua require 'tsht'.nodes()<cr>]], { silent = true, remap = true })
vim.keymap.set('x', 'm', [[:<c-u>lua require 'tsht'.nodes()<cr>]], { silent = true })

-- lazy.nvim
vim.keymap.set('n', '<Leader>la', '<cmd>Lazy<cr>', { desc = 'Open Lazy' })
vim.keymap.set('n', '<Leader>lc', '<cmd>Lazy check<cr>', { desc = 'Check Lazy Plugins' })
vim.keymap.set('n', '<Leader>ls', '<cmd>Lazy sync<cr>', { desc = 'Sync Lazy Plugins' })

-- nvim-dap
vim.keymap.set(
    'n',
    '<leader>dB',
    '<cmd>lua require"dap".set_breakpoint(vim.fn.input("Breakpoint condition: "))<CR>',
    { desc = 'Add Conditional Breakpoint' }
)
vim.keymap.set('n', '<leader>dc', '<cmd>DapContinue<CR>', { desc = 'Dap Continue' })
vim.keymap.set('n', '<leader>dsi', '<cmd>DapStepInto<CR>', { desc = 'Dap Step Into' })
vim.keymap.set('n', '<leader>dso', '<cmd>DapStepOver<CR>', { desc = 'Dap Step Over' })
vim.keymap.set('n', '<leader>dst', '<cmd>DapStepOut<CR>', { desc = 'Dap Step Out' })
vim.keymap.set('n', '<leader>dt', '<cmd>DapTerminate<CR>', { desc = 'Dap Terminate' })
vim.keymap.set('n', '<leader>dl', '<cmd>DapShowLog<CR>', { desc = 'Dap Show Log' })
vim.keymap.set('n', '<leader>dr', '<cmd>DapToggleRepl<CR>', { desc = 'Dap Toggle Repl' })

-- diffview.nvim
vim.keymap.set('n', '<leader>dv', function()
    local lib = require('diffview.lib')
    local view = lib.get_current_view()
    if view then
        -- Current tabpage is a Diffview; close it
        vim.cmd.DiffviewClose()
    else
        -- No open Diffview exists: open a new one
        vim.cmd.DiffviewOpen()
    end
end, { desc = 'Diffview Toggle' })

-- noice.nvim
vim.keymap.set('n', '<space>nn', '<cmd>Noice<cr>', { desc = 'Noice Messages' })
vim.keymap.set('n', '<space>na', '<cmd>NoiceAll<cr>', { desc = 'Noice All Messages' })
vim.keymap.set('n', '<space>nl', '<cmd>NoiceLast<cr>', { desc = 'Noice Last' })
vim.keymap.set('n', '<space>nt', '<cmd>NoiceTelescope<cr>', { desc = 'Noice Telescope' })
vim.keymap.set('n', '<space>ne', '<cmd>NoiceErrors<cr>', { desc = 'Noice Errors' })
vim.keymap.set('n', '<space>ns', function()
    require('noice').redirect('Notifications')
end, { desc = 'Noice Notifications' })

-- toggleterm.nvim
function _G.set_terminal_keymaps()
    local opts = { buffer = 0 }
    vim.keymap.set('t', '<esc>', [[<C-\><C-n>]], opts)
    vim.keymap.set('t', 'kj', [[<C-\><C-n>]], opts)
    vim.keymap.set('t', '<C-h>', [[<Cmd>wincmd h<CR>]], opts)
    vim.keymap.set('t', '<C-j>', [[<Cmd>wincmd j<CR>]], opts)
    vim.keymap.set('t', '<C-k>', [[<Cmd>wincmd k<CR>]], opts)
    vim.keymap.set('t', '<C-l>', [[<Cmd>wincmd l<CR>]], opts)
    vim.keymap.set('t', '<C-w>', [[<C-\><C-n><C-w>]], opts)
end
vim.cmd('autocmd! TermOpen term://* lua set_terminal_keymaps()')

-- nvim-treesitter-context
vim.keymap.set('n', '<leader>ct', '<cmd>TSContextToggle<cr>', { desc = 'Toggle TS Context' })

AvanteUtils = require('plugins.ai.avante')

vim.keymap.set({ 'n', 'v' }, '<leader>Oag', function()
    AvanteUtils.ask(AvanteUtils.avante_grammar_correction)
end, { desc = 'Grammar Correction(ask)' })

vim.keymap.set({ 'n', 'v' }, '<leader>Oak', function()
    AvanteUtils.ask(AvanteUtils.avante_keywords)
end, { desc = 'Keywords(ask)' })
vim.keymap.set({ 'n', 'v' }, '<leader>Oal', function()
    AvanteUtils.ask(AvanteUtils.avante_code_readability_analysis)
end, { desc = 'Code Readability Analysis(ask)' })
vim.keymap.set({ 'n', 'v' }, '<leader>Oao', function()
    AvanteUtils.ask(AvanteUtils.avante_optimize_code)
end, { desc = 'Optimize Code(ask)' })
vim.keymap.set({ 'n', 'v' }, '<leader>Oam', function()
    AvanteUtils.ask(AvanteUtils.avante_summarize)
end, { desc = 'Summarize text(ask)' })
vim.keymap.set({ 'n', 'v' }, '<leader>Oan', function()
    AvanteUtils.ask(AvanteUtils.avante_translate)
end, { desc = 'Translate text(ask)' })
vim.keymap.set({ 'n', 'v' }, '<leader>Oax', function()
    AvanteUtils.ask(AvanteUtils.avante_explain_code)
end, { desc = 'Explain Code(ask)' })
vim.keymap.set({ 'n', 'v' }, '<leader>Oac', function()
    AvanteUtils.ask(AvanteUtils.avante_complete_code)
end, { desc = 'Complete Code(ask)' })
vim.keymap.set({ 'n', 'v' }, '<leader>Oad', function()
    AvanteUtils.ask(AvanteUtils.avante_add_docstring)
end, { desc = 'Docstring(ask)' })
vim.keymap.set({ 'n', 'v' }, '<leader>Oab', function()
    AvanteUtils.ask(AvanteUtils.avante_fix_bugs)
end, { desc = 'Fix Bugs(ask)' })
vim.keymap.set({ 'n', 'v' }, '<leader>Oau', function()
    AvanteUtils.ask(AvanteUtils.avante_add_tests)
end, { desc = 'Add Tests(ask)' })

vim.keymap.set('v', '<leader>OaG', function()
    AvanteUtils.prefill_edit_window(AvanteUtils.avante_grammar_correction)
end, { desc = 'Grammar Correction' })
vim.keymap.set('v', '<leader>OaK', function()
    AvanteUtils.prefill_edit_window(AvanteUtils.avante_keywords)
end, { desc = 'Keywords' })
vim.keymap.set('v', '<leader>OaO', function()
    AvanteUtils.prefill_edit_window(AvanteUtils.avante_optimize_code)
end, { desc = 'Optimize Code(edit)' })
vim.keymap.set('v', '<leader>OaC', function()
    AvanteUtils.prefill_edit_window(AvanteUtils.avante_complete_code)
end, { desc = 'Complete Code(edit)' })
vim.keymap.set('v', '<leader>OaD', function()
    AvanteUtils.prefill_edit_window(AvanteUtils.avante_add_docstring)
end, { desc = 'Docstring(edit)' })
vim.keymap.set('v', '<leader>OaB', function()
    AvanteUtils.prefill_edit_window(AvanteUtils.avante_fix_bugs)
end, { desc = 'Fix Bugs(edit)' })
vim.keymap.set('v', '<leader>OaU', function()
    AvanteUtils.prefill_edit_window(AvanteUtils.avante_add_tests)
end, { desc = 'Add Tests(edit)' })

```````

`/home/tlh/.config/nvim/lua/core/usercommands.lua`:

```````lua
-- Open GitHub Repo from lazy.nvim
-- url: https://github.com/justinsgithub/dotfiles/blob/main/neovim/.config/nvim/lua/user/commands.lua
vim.api.nvim_create_user_command('OpenGithubRepo', function(_)
    local ghpath = vim.api.nvim_eval("shellescape(expand('<cfile>'))")
    local formatpath = ghpath:sub(2, #ghpath - 1)
    local repourl = 'https://www.github.com/' .. formatpath
    vim.fn.system({ 'open', repourl })
end, {
    desc = 'Open Github Repo',
    force = true,
})

-- Cleaning registers
vim.api.nvim_create_user_command('ClearReg', function()
    print('Clearing registers')
    vim.cmd([[
    let regs=split('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-"', '\zs')
    for r in regs
        call setreg(r, [])
        endfor
        ]])
end, {})

```````

`/home/tlh/.config/nvim/lua/code_action_utils.lua`:

```````lua
-- Check if code actions are availeble on lsp
local M = {}

local lsp_util = vim.lsp.util

function M.code_action_listener()
    local context = { diagnostics = vim.lsp.diagnostic.get_line_diagnostics() }
    local params = lsp_util.make_range_params()
    params.context = context
end

return M

```````

`/home/tlh/.config/nvim/snippets/package.json`:

```````json
{
  "name": "snips",
  "engines": {
    "vscode": "^1.11.0"
  },
  "contributes": {
    "snippets": [
      {
        "language": "plaintext",
        "path": "./snippets/vscode/global.json"
      },
      {
        "language": "markdown",
        "path": "./snippets/vscode/global.json"
      },
      {
        "language": "tex",
        "path": "./snippets/vscode/global.json"
      },
      {
        "language": "html",
        "path": "./snippets/vscode/global.json"
      },
      {
        "language": "c",
        "path": "./snippets/vscode/c.json"
      },
      {
        "language": "cpp",
        "path": "./snippets/vscode/cpp.json"
      },
      {
        "language": "cs",
        "path": "./snippets/vscode/csharp.json"
      },
      {
        "language": "csharp",
        "path": "./snippets/vscode/csharp.json"
      },
      {
        "language": "gitcommit",
        "path": "./snippets/vscode/gitcommit.json"
      },
      {
        "language": "NeogitCommitMessage",
        "path": "./snippets/vscode/gitcommit.json"
      },
      {
        "language": "ejs",
        "path": "./snippets/vscode/frameworks/ejs.json"
      },
      {
        "language": "eruby",
        "path": "./snippets/vscode/erb.json"
      },
      {
        "language": "elixir",
        "path": "./snippets/vscode/elixir.json"
      },
      {
        "language": "eelixir",
        "path": "./snippets/vscode/eelixir.json"
      },
      {
        "language": "fortran",
        "path": "./snippets/vscode/fortran.json"
      },
      {
        "language": "glsl",
        "path": "./snippets/vscode/glsl.json"
      },
      {
        "language": "liquid",
        "path": "./snippets/vscode/liquid.json"
      },
      {
        "language": "lua",
        "path": "./snippets/vscode/lua.json"
      },
      {
        "language": "go",
        "path": "./snippets/vscode/go.json"
      },
      {
        "language": "fennel",
        "path": "./snippets/vscode/fennel.json"
      },
      {
        "language": "php",
        "path": "./snippets/vscode/php.json"
      },
      {
        "language": "rescript",
        "path": "./snippets/vscode/rescript.json"
      },
      {
        "language": "ruby",
        "path": "./snippets/vscode/ruby.json"
      },
      {
        "language": "rails",
        "path": "./snippets/vscode/frameworks/rails.json"
      },
      {
        "language": "rust",
        "path": "./snippets/vscode/rust.json"
      },
      {
        "language": "haskell",
        "path": "./snippets/vscode/haskell.json"
      },
      {
        "language": "scala",
        "path": "./snippets/vscode/scala.json"
      },
      {
        "language": "solidity",
        "path": "./snippets/vscode/solidity.json"
      },
      {
        "language": "swift",
        "path": "./snippets/vscode/swift.json"
      },
      {
        "language": "sql",
        "path": "./snippets/vscode/sql.json"
      },
      {
        "language": "shellscript",
        "path": "./snippets/vscode/shell.json"
      },
      {
        "language": "shell",
        "path": "./snippets/vscode/shell.json"
      },
      {
        "language": "sh",
        "path": "./snippets/vscode/shell.json"
      },
      {
        "language": "bash",
        "path": "./snippets/vscode/shell.json"
      },
      {
        "language": "markdown",
        "path": "./snippets/vscode/markdown.json"
      },
      {
        "language": "rmd",
        "path": "./snippets/vscode/markdown.json"
      },
      {
        "language": "mdx",
        "path": "./snippets/vscode/markdown.json"
      },
      {
        "language": "tex",
        "path": "./snippets/vscode/latex.json"
      },
      {
        "language": "plaintex",
        "path": "./snippets/vscode/latex.json"
      },
      {
        "language": "java",
        "path": "./snippets/vscode/java.json"
      },
      {
        "language": "html",
        "path": "./snippets/vscode/html.json"
      },
      {
        "language": "jade",
        "path": "./snippets/vscode/html.json"
      },
      {
        "language": "pug",
        "path": "./snippets/vscode/html.json"
      },
      {
        "language": "eruby",
        "path": "./snippets/vscode/html.json"
      },
      {
        "language": "css",
        "path": "./snippets/vscode/css.json"
      },
      {
        "language": "scss",
        "path": "./snippets/vscode/css.json"
      },
      {
        "language": "sass",
        "path": "./snippets/vscode/css.json"
      },
      {
        "language": "less",
        "path": "./snippets/vscode/css.json"
      },
      {
        "language": "stylus",
        "path": "./snippets/vscode/css.json"
      },
      {
        "language": "javascript",
        "path": "./snippets/vscode/javascript/javascript.json"
      },
      {
        "language": "javascriptreact",
        "path": "./snippets/vscode/javascript/javascript.json"
      },
      {
        "language": "vue",
        "path": "./snippets/vscode/javascript/javascript.json"
      },
      {
        "language": "typescript",
        "path": "./snippets/vscode/javascript/typescript.json"
      },
      {
        "language": "typescriptreact",
        "path": "./snippets/vscode/javascript/typescript.json"
      },
      {
        "language": "javascriptreact",
        "path": "./snippets/vscode/javascript/react.json"
      },
      {
        "language": "typescriptreact",
        "path": "./snippets/vscode/javascript/react-ts.json"
      },
      {
        "language": "vue",
        "path": "./snippets/vscode/frameworks/vue/html.json"
      },
      {
        "language": "vue",
        "path": "./snippets/vscode/frameworks/vue/pug.json"
      },
      {
        "language": "vue",
        "path": "./snippets/vscode/frameworks/vue/javascript.json"
      },
      {
        "language": "vue",
        "path": "./snippets/vscode/frameworks/vue/vue.json"
      },
      {
        "language": "python",
        "path": "./snippets/vscode/python/base.json"
      },
      {
        "language": "python",
        "path": "./snippets/vscode/python/comprehension.json"
      },
      {
        "language": "python",
        "path": "./snippets/vscode/python/debug.json"
      },
      {
        "language": "python",
        "path": "./snippets/vscode/python/python.json"
      },
      {
        "language": "python",
        "path": "./snippets/vscode/python/unittest.json"
      },
      {
        "language": "django",
        "path": "./snippets/vscode/frameworks/django/imports.json"
      },
      {
        "language": "django",
        "path": "./snippets/vscode/frameworks/django/forms.json"
      },
      {
        "language": "django",
        "path": "./snippets/vscode/frameworks/django/models.json"
      },
      {
        "language": "django",
        "path": "./snippets/vscode/frameworks/django/views.json"
      },
      {
        "language": "django",
        "path": "./snippets/vscode/frameworks/django/filetemplates.json"
      },
      {
        "language": "flutter",
        "path": "./snippets/vscode/frameworks/flutter.json"
      },
      {
        "language": "jekyll",
        "path": "./snippets/vscode/frameworks/jekyll.json"
      },
      {
        "language": "cobol",
        "path": "./snippets/vscode/cobol/vscode_cobol.json"
      },
      {
        "language": "cobol",
        "path": "./snippets/vscode/cobol/vscode_cobol-compound.json"
      },
      {
        "language": "cobol",
        "path": "./snippets/vscode/cobol/vscode_cobol_dir.json"
      },
      {
        "language": "cobol",
        "path": "./snippets/vscode/cobol/vscode_cobol_jcl.json"
      },
      {
        "language": "kotlin",
        "path": "./snippets/vscode/kotlin.json"
      },
      {
        "language": [
          "plaintex",
          "tex"
        ],
        "path": "./snippets/vscode/latex/latex-snippets.json"
      },
      {
        "language": "twig",
        "path": "./snippets/vscode/frameworks/twig.json"
      },
      {
        "language": "r",
        "path": "./snippets/vscode/r.json"
      },
      {
        "language": "rmd",
        "path": "./snippets/vscode/r.json"
      },
      {
        "language": "rmd",
        "path": "./snippets/vscode/rmarkdown.json"
      },
      {
        "language": "org",
        "path": "./snippets/vscode/org.json"
      },
      {
        "language": "norg",
        "path": "./snippets/vscode/norg.json"
      },
      {
        "language": "mint",
        "path": "./snippets/vscode/mint.json"
      },
      {
        "language": "gdscript",
        "path": "./snippets/vscode/gdscript.json"
      }
    ]
  }
}

```````

`/home/tlh/.config/nvim/snippets/java.snippets`:

```````snippets
## Access Modifiers
snippet po
	protected ${0}
snippet pu
	public ${0}
snippet pr
	private ${0}
##
## Annotations
snippet before
	@Before
	static void ${1:intercept}(${2:args}) { ${0} }
snippet mm
	@ManyToMany
	${0}
snippet mo
	@ManyToOne
	${0}
snippet om
	@OneToMany${1:(cascade=CascadeType.ALL)}
	${0}
snippet oo
	@OneToOne
	${1}
##
## Basic Java packages and import
snippet im
	import ${0}
snippet j.b
	java.beans.
snippet j.i
	java.io.
snippet j.m
	java.math.
snippet j.n
	java.net.
snippet j.u
	java.util.
##
## Class
snippet cl
	class ${1:`vim_snippets#Filename("$1", "untitled")`} ${0}
snippet pcl
	public class ${1:`vim_snippets#Filename("$1", "untitled")`} ${0}
snippet in
	interface ${1:`vim_snippets#Filename("$1", "untitled")`} ${2:extends Parent}
snippet tc
	public class ${1:`vim_snippets#Filename("$1")`} extends ${0:TestCase}
##
## Class Enhancements
snippet ext
	extends ${0}
snippet imp
	implements ${0}
##
## Comments
snippet /*
	/*
	 * ${0}
	 */
##
## Constants
snippet co
	static public final ${1:String} ${2:var} = ${3};
snippet cos
	static public final String ${1:var} = "${2}";
##
## Control Statements
snippet case
	case ${1}:
		${0}
snippet def
	default:
		${0}
snippet el
	else
snippet eif
	else if (${1}) ${0}
snippet if
	if (${1}) ${0}
snippet sw
	switch (${1}) {
		${0}
	}
##
## Create a Method
snippet m
	${1:void} ${2:method}(${3}) ${4:throws }
##
## Create a Variable
snippet v
	${1:String} ${2:var}${3: = null}${4};
##
## Declaration for ArrayList
snippet d.al
	List<${1:Object}> ${2:list} = new ArrayList<$1>();${0}
## Declaration for HashMap
snippet d.hm
	Map<${1:Object}, ${2:Object}> ${3:map} = new HashMap<$1, $2>();${0}
## Declaration for HashSet
snippet d.hs
	Set<${1:Object}> ${2:set} = new HashSet<$1>();${0}
## Declaration for Stack
snippet d.st
	Stack<${1:Object}> ${2:stack} = new Stack<$1>();${0}
##
## Singleton Pattern
snippet singlet
	private static class Holder {
		private static final ${1:`vim_snippets#Filename("$1")`} INSTANCE = new $1();
	}

	private $1() { }

	public static $1 getInstance() {
		return Holder.INSTANCE;
	}
##
## Enhancements to Methods, variables, classes, etc.
snippet ab
	abstract ${0}
snippet fi
	final ${0}
snippet st
	static ${0}
snippet sy
	synchronized ${0}
##
## Error Methods
snippet err
	System.err.print("${0:Message}");
snippet errf
	System.err.printf("${1:Message}", ${0:exception});
snippet errln
	System.err.println("${0:Message}");
##
## Exception Handling
snippet as
	assert ${1:test} : "${2:Failure message}";
snippet ae
	assertEquals("${1:Failure message}", ${2:expected}, ${3:actual});
snippet aae
	assertArrayEquals("${1:Failure message}", ${2:expecteds}, ${3:actuals});
snippet af
	assertFalse("${1:Failure message}", $2);
snippet at
	assertTrue("${1:Failure message}", $2);
snippet an
	assertNull("${1:Failure message}", ${2:object});
snippet ann
	assertNotNull("${1:Failure message}", ${2:object});
snippet ass
	assertSame("${1:Failure message}", ${2:expected}, ${3:actual});
snippet asns
	assertNotSame("${1:Failure message}", ${2:expected}, ${3:actual});
snippet fa
	fail("${1:Failure message}");
snippet ca
	catch(${1:Exception} ${2:e}) ${0}
snippet thr
	throw ${0}
snippet ths
	throws ${0}
snippet try
	try {
		${0:${VISUAL}}
	} catch(${1:Exception} ${2:e}) {
	}
snippet tryf
	try {
		${0:${VISUAL}}
	} catch(${1:Exception} ${2:e}) {
	} finally {
	}
##
## Find Methods
snippet findall
	List<${1:listName}> ${2:items} = $1.findAll();
snippet findbyid
	${1:var} ${2:item} = $1.findById(${3});
##
## Javadocs
snippet /**
	/**
	 * ${0}
	 */
snippet @au
	@author `system("grep \`id -un\` /etc/passwd | cut -d \":\" -f5 | cut -d \",\" -f1")`
snippet @br
	@brief ${0:Description}
snippet @fi
	@file ${0:`vim_snippets#Filename("$1")`}.java
snippet @pa
	@param ${0:param}
snippet @re
	@return ${0:param}
##
## Logger Methods
snippet debug
	Logger.debug(${1:param});
snippet error
	Logger.error(${1:param});
snippet info
	Logger.info(${1:param});
snippet warn
	Logger.warn(${1:param});
##
## Loops
snippet enfor
	for (${1} : ${2}) ${0}
snippet for
	for (${1}; ${2}; ${3}) ${0}
snippet wh
	while (${1:true}) ${0}
snippet wht
	while (true) ${0}
##
## Main method
snippet psvm
	public static void main (String[] args) {
		${0}
	}
snippet main
	public static void main (String[] args) {
		${0}
	}
##
## Print Methods
snippet sout
	System.out.println(${0});
snippet serr
	System.err.println(${0});
snippet print
	System.out.print("${0:Message}");
snippet printf
	System.out.printf("${1:Message}", ${0:args});
snippet println
	System.out.println(${0});
snippet printlna
	System.out.println(Arrays.toString(${0}));
##
## Render Methods
snippet ren
	render(${1:param});
snippet rena
	renderArgs.put("${1}", ${2});
snippet renb
	renderBinary(${1:param});
snippet renj
	renderJSON(${1:param});
snippet renx
	renderXml(${1:param});
##
## Setter and Getter Methods
snippet set
	${1:public} void set${3:}(${2:String} ${0:}){
		this.$4 = $4;
	}
snippet get
	${1:public} ${2:String} get${3:}(){
		return this.${0:};
	}
##
## Terminate Methods or Loops
snippet re
	return ${0}
snippet br
	break;
##
## Test Methods
snippet t
	public void test${1:Name}() throws Exception {
		${0}
	}
snippet test
	@Test
	public void test${1:Name}() throws Exception {
		${0}
	}
##
## Utils
snippet Sc
	Scanner
##
## Miscellaneous
snippet action
	public static void ${1:index}(${2:args}) { ${0} }
snippet rnf
	notFound(${1:param});
snippet rnfin
	notFoundIfNull(${1:param});
snippet rr
	redirect(${1:param});
snippet ru
	unauthorized(${1:param});
snippet unless
	(unless=${1:param});

```````

`/home/tlh/.config/nvim/snippets/markdown.lua`:

```````lua
-- As defining all of the snippet-constructors (s, c, t, ...) in every file is rather cumbersome,
-- luasnip will bring some globals into scope for executing these files.
-- defined by snip_env in setup
require("luasnip.loaders.from_lua").lazy_load()
local env = snip_env

return {
  -- s("date", p(os.date, "%Y-%m-%d")),
  env.s({ trig = "gwa", name = "Gitlab Warning" }, {
    env.t(":warning: "),
    env.i(1, { "some-warning" }),
  }),
  env.s({ trig = "hugoimg", name = "Hugo image shortcut" }, {
    env.t("{{< img name="),
    env.i(1, { "name" }),
    env.t(" lazy="),
    env.i(2, { "true" }),
    env.t(" >}}"),
  }),
  env.s({ trig = "hugotoc", name = "Hugo toc shortcut" }, {
    env.t("{{< toc >}}"),
  }),
  env.s({ trig = "hugosep", name = "Hugo intro separator shortcut" }, {
    env.t("<!-- more -->"),
  }),
  -- s(
  -- 	"hugores2",
  -- 	fmt(
  -- 		[[
  --      - name: {1}
  --        src: {2}.png
  --        title: {3}
  --    ]],
  -- 		{
  -- 			i(1, "name"),
  -- 			rep(1), -- repeat value 1 but "overjumps" it
  -- 			i(2, "title"),
  -- 		}
  -- 	)
  -- ),
  env.s({ trig = "hugores", name = "Hugo resource entry" }, {
    env.t("\t- name: "),
    env.i(1, { "name", "" }),
    env.t("\t\tsrc: "),
    -- use value of node 1 but do not "overjump" it
    env.d(2, function(args)
      return env.sn(nil, { env.i(1), env.i(1, args[1]) })
    end, { 1 }),
    env.t("\t\ttitle: "),
    env.i(3, { "title" }),
  }),
  env.s(
    "link",
    env.fmt(
      [[
      [{}]({}){}
      ]],
      {
        env.i(1, "name"),
        env.i(2, "url"),
        env.i(0),
      }
    )
  ),
}

```````

`/home/tlh/.config/nvim/snippets/vscode/org.json`:

```````json
{
  "center block": {
    "description": "#+BEGIN_CENTER block",
    "prefix": "<C",
    "body": ["#+BEGIN_CENTER", "$0", "#+END_CENTER"]
  },
  "comment block": {
    "description": "#+BEGIN_COMMENT block",
    "prefix": "<c",
    "body": ["#+BEGIN_COMMENT", "$0", "#+END_COMMENT"]
  },
  "example block": {
    "description": "#+BEGIN_EXAMPLE block",
    "prefix": "<e",
    "body": ["#+BEGIN_EXAMPLE", "$0", "#+END_EXAMPLE"]
  },
  "src block": {
    "description": "#+BEGIN_SRC ... block",
    "prefix": "<s",
    "body": ["#+BEGIN_SRC ${1:lang}", "$0", "#+END_SRC"]
  },
  "verse": {
    "description": "verse",
    "prefix": "<v",
    "body": ["#+BEGIN_VERSE", "$0", "#+END_VERSE"]
  },
  "export ascii": {
    "description": "#+BEGIN_EXPORT ascii",
    "prefix": "<a",
    "body": ["#+BEGIN_EXPORT ascii", "$0", "#+END_EXPORT"]
  },
  "export html": {
    "description": "#+BEGIN_EXPORT html block",
    "prefix": "<h",
    "body": ["#+BEGIN_EXPORT html", "$0", "#+END_EXPORT"]
  },
  "export latex": {
    "description": "#+BEGIN_EXPORT latex block",
    "prefix": "<l",
    "body": ["#+BEGIN_EXPORT latex", "$0", "#+END_EXPORT"]
  },
  "quote block": {
    "description": "#+BEGIN_QUOTE block",
    "prefix": "<q",
    "body": ["#+BEGIN_QUOTE", "$0", "#+END_QUOTE"]
  },
  "blog": {
    "description": "blog",
    "prefix": "blog",
    "body": [
      "#+STARTUP: showall indent",
      "#+STARTUP: hidestars",
      "#+BEGIN_HTML",
      "---",
      "layout: default",
      "title: ${1:title}",
      "excerpt: ${2:excerpt}",
      "---",
      "$0"
    ]
  },
  "code": {
    "description": "code",
    "prefix": "code",
    "body": ["#+BEGIN_${1:LANG} ${2:options}", "$0", "#+END_$1"]
  },
  "dot": {
    "description": "dot",
    "prefix": "dot",
    "body": [
      "#+BEGIN_SRC dot :file ${1:file} :cmdline -T${2:pdf} :exports none :results silent",
      "$0",
      "#+END_SRC",
      "",
      "[[file:$1]]"
    ]
  },
  "elisp": {
    "description": "elisp",
    "prefix": "elisp",
    "body": ["#+BEGIN_SRC emacs-lisp :tangle yes", "$0", "#+END_SRC"]
  },
  "embedded": {
    "description": "embedded",
    "prefix": "emb",
    "body": ["src_${1:lang}${2:[${3:where}]}{${4:code}}"]
  },
  "entry": {
    "description": "entry",
    "prefix": "entry",
    "body": [
      "#+BEGIN_HTML",
      "---",
      "layout: ${1:default}",
      "title: ${2:title}",
      "---",
      "#+END_HTML",
      "$0"
    ]
  },
  "export": {
    "description": "export",
    "prefix": "export",
    "body": ["#+BEGIN_EXPORT ${1:type}", "$0", "#+END_EXPORT"]
  },
  "figure": {
    "description": "figure",
    "prefix": "fig",
    "body": [
      "#+CAPTION: ${1:caption}",
      "#+ATTR_LATEX: ${2:scale=0.75}",
      "#+LABEL: fig:${3:label}"
    ]
  },
  "header": {
    "description": "org-file header",
    "prefix": "head",
    "body": [
      "#+TITLE:     ${1:Untitled Document}",
      "#+AUTHOR:    ${2:Author}",
      "#+DATE:      ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}"
    ]
  },
  "image": {
    "description": "img",
    "prefix": "img",
    "body": [
      "#+ATTR_HTML: :alt $2 :align ${3:left} :class img",
      "[[${1:src}]${4:[${5:title}]}]",
      "$0"
    ]
  },
  "latex": {
    "description": "latex",
    "prefix": "latex",
    "body": ["#+BEGIN_LATEX", "$0", "#+END_LATEX"]
  },
  "latex matrix": {
    "description": "matrix",
    "prefix": "matrix",
    "body": [
      "\\left \\(",
      "\t\\begin{array}{${1:ccc}}",
      "\t\t${2:v1 & v2} \\\\\\",
      "\t\t$0",
      "\t\\end{array}",
      "\\right \\)"
    ]
  },
  "todo": {
    "description": "TODO item",
    "prefix": "todo",
    "body": ["TODO ${1:task description}"]
  },
  "html width": {
    "description": "#+attr_html: :width ...",
    "body": ["#+ATTR_HTML: :width ${1:500px}"]
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/go.json`:

```````json
{
  "single import": {
    "prefix": "im",
    "body": "import \"${1:package}\"",
    "description": "Snippet for import statement"
  },
  "multiple imports": {
    "prefix": "ims",
    "body": "import (\n\t\"${1:package}\"\n)",
    "description": "Snippet for a import block"
  },
  "single constant": {
    "prefix": "co",
    "body": "const ${1:name} = ${2:value}",
    "description": "Snippet for a constant"
  },
  "multiple constants": {
    "prefix": "cos",
    "body": "const (\n\t${1:name} = ${2:value}\n)",
    "description": "Snippet for a constant block"
  },
  "type function declaration": {
    "prefix": "tyf",
    "body": "type ${1:name} func($3) $4",
    "description": "Snippet for a type function declaration"
  },
  "type interface declaration": {
    "prefix": "tyi",
    "body": "type ${1:name} interface {\n\t$0\n}",
    "description": "Snippet for a type interface"
  },
  "type struct declaration": {
    "prefix": "tys",
    "body": "type ${1:name} struct {\n\t$0\n}",
    "description": "Snippet for a struct declaration"
  },
  "package main and main function": {
    "prefix": "pkgm",
    "body": "package main\n\nfunc main() {\n\t$0\n}",
    "description": "Snippet for main package & function"
  },
  "function declaration": {
    "prefix": "func",
    "body": "func $1($2) $3 {\n\t$0\n}",
    "description": "Snippet for function declaration"
  },
  "variable declaration": {
    "prefix": "var",
    "body": "var ${1:name} ${2:type}",
    "description": "Snippet for a variable"
  },
  "switch statement": {
    "prefix": "switch",
    "body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$0\n}",
    "description": "Snippet for switch statement"
  },
  "select statement": {
    "prefix": "sel",
    "body": "select {\ncase ${1:condition}:\n\t$0\n}",
    "description": "Snippet for select statement"
  },
  "case clause": {
    "prefix": "cs",
    "body": "case ${1:condition}:$0",
    "description": "Snippet for case clause"
  },
  "for statement": {
    "prefix": "for",
    "body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}",
    "description": "Snippet for a for loop"
  },
  "for range statement": {
    "prefix": "forr",
    "body": "for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}",
    "description": "Snippet for a for range loop"
  },
  "channel declaration": {
    "prefix": "ch",
    "body": "chan ${1:type}",
    "description": "Snippet for a channel"
  },
  "map declaration": {
    "prefix": "map",
    "body": "map[${1:type}]${2:type}",
    "description": "Snippet for a map"
  },
  "empty interface": {
    "prefix": "in",
    "body": "interface{}",
    "description": "Snippet for empty interface"
  },
  "if statement": {
    "prefix": "if",
    "body": "if ${1:condition} {\n\t$0\n}",
    "description": "Snippet for if statement"
  },
  "else branch": {
    "prefix": "el",
    "body": "else {\n\t$0\n}",
    "description": "Snippet for else branch"
  },
  "if else statement": {
    "prefix": "ie",
    "body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}",
    "description": "Snippet for if else"
  },
  "if err != nil": {
    "prefix": "iferr",
    "body": "if err != nil {\n\t${1:return ${2:nil, }${3:err}}\n}",
    "description": "Snippet for if err != nil"
  },
  "fmt.Println": {
    "prefix": "fp",
    "body": "fmt.Println(\"$1\")",
    "description": "Snippet for fmt.Println()"
  },
  "fmt.Printf": {
    "prefix": "ff",
    "body": "fmt.Printf(\"$1\", ${2:var})",
    "description": "Snippet for fmt.Printf()"
  },
  "log.Println": {
    "prefix": "lp",
    "body": "log.Println(\"$1\")",
    "description": "Snippet for log.Println()"
  },
  "log.Printf": {
    "prefix": "lf",
    "body": "log.Printf(\"$1\", ${2:var})",
    "description": "Snippet for log.Printf()"
  },
  "log variable content": {
    "prefix": "lv",
    "body": "log.Printf(\"${1:var}: %#+v\\\\n\", ${1:var})",
    "description": "Snippet for log.Printf() with variable content"
  },
  "t.Log": {
    "prefix": "tl",
    "body": "t.Log(\"$1\")",
    "description": "Snippet for t.Log()"
  },
  "t.Logf": {
    "prefix": "tlf",
    "body": "t.Logf(\"$1\", ${2:var})",
    "description": "Snippet for t.Logf()"
  },
  "t.Logf variable content": {
    "prefix": "tlv",
    "body": "t.Logf(\"${1:var}: %#+v\\\\n\", ${1:var})",
    "description": "Snippet for t.Logf() with variable content"
  },
  "make(...)": {
    "prefix": "make",
    "body": "make(${1:type}, ${2:0})",
    "description": "Snippet for make statement"
  },
  "new(...)": {
    "prefix": "new",
    "body": "new(${1:type})",
    "description": "Snippet for new statement"
  },
  "panic(...)": {
    "prefix": "pn",
    "body": "panic(\"$0\")",
    "description": "Snippet for panic"
  },
  "http ResponseWriter *Request": {
    "prefix": "wr",
    "body": "${1:w} http.ResponseWriter, ${2:r} *http.Request",
    "description": "Snippet for http Response"
  },
  "http.HandleFunc": {
    "prefix": "hf",
    "body": "${1:http}.HandleFunc(\"${2:/}\", ${3:handler})",
    "description": "Snippet for http.HandleFunc()"
  },
  "http handler declaration": {
    "prefix": "hand",
    "body": "func $1(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n\t$0\n}",
    "description": "Snippet for http handler declaration"
  },
  "http.Redirect": {
    "prefix": "rd",
    "body": "http.Redirect(${1:w}, ${2:r}, \"${3:/}\", ${4:http.StatusFound})",
    "description": "Snippet for http.Redirect()"
  },
  "http.Error": {
    "prefix": "herr",
    "body": "http.Error(${1:w}, ${2:err}.Error(), ${3:http.StatusInternalServerError})",
    "description": "Snippet for http.Error()"
  },
  "http.ListenAndServe": {
    "prefix": "las",
    "body": "http.ListenAndServe(\"${1::8080}\", ${2:nil})",
    "description": "Snippet for http.ListenAndServe"
  },
  "http.Serve": {
    "prefix": "sv",
    "body": "http.Serve(\"${1::8080}\", ${2:nil})",
    "description": "Snippet for http.Serve"
  },
  "goroutine anonymous function": {
    "prefix": "go",
    "body": "go func($1) {\n\t$0\n}($2)",
    "description": "Snippet for anonymous goroutine declaration"
  },
  "goroutine function": {
    "prefix": "gf",
    "body": "go ${1:func}($0)",
    "description": "Snippet for goroutine declaration"
  },
  "defer statement": {
    "prefix": "df",
    "body": "defer ${1:func}($0)",
    "description": "Snippet for defer statement"
  },
  "test function": {
    "prefix": "tf",
    "body": "func Test$1(t *testing.T) {\n\t$0\n}",
    "description": "Snippet for Test function"
  },
  "test main": {
    "prefix": "tm",
    "body": "func TestMain(m *testing.M) {\n\t$1\n\n\tos.Exit(m.Run())\n}",
    "description": "Snippet for TestMain function"
  },
  "benchmark function": {
    "prefix": "bf",
    "body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}",
    "description": "Snippet for Benchmark function"
  },
  "example function": {
    "prefix": "ef",
    "body": "func Example$1() {\n\t$2\n\t//Output:\n\t$3\n}",
    "description": "Snippet for Example function"
  },
  "table driven test": {
    "prefix": "tdt",
    "body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
    "description": "Snippet for table driven test"
  },
  "init function": {
    "prefix": "finit",
    "body": "func init() {\n\t$1\n}",
    "description": "Snippet for init function"
  },
  "main function": {
    "prefix": "fmain",
    "body": "func main() {\n\t$1\n}",
    "description": "Snippet for main function"
  },
  "method declaration": {
    "prefix": "meth",
    "body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
    "description": "Snippet for method declaration"
  },
  "hello world web app": {
    "prefix": "helloweb",
    "body": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc greet(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World! %s\", time.Now())\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", greet)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "description": "Snippet for sample hello world webapp"
  },
  "sort implementation": {
    "prefix": "sort",
    "body": "type ${1:SortBy} []${2:Type}\n\nfunc (a $1) Len() int           { return len(a) }\nfunc (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }",
    "description": "Snippet for a custom sort.Sort interface implementation, for a given slice type."
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/lua.json`:

```````json
{
  "require": {
    "prefix": "req",
    "body": ["require(\"${1:module}\")"],
    "description": "Require module"
  },
  "return": {
    "prefix": "rt",
    "body": ["return $0"],
    "description": "return value"
  },
  "assigment": {
    "prefix": "ll",
    "body": ["local ${1:varName} = ${0:value}"],
    "description": "create a variable"
  },
  "local": {
    "prefix": "l",
    "body": ["local ${0}"],
    "description": "create a variable"
  },
  "locreq": {
    "prefix": "lreq",
    "body": ["local ${1:var} = require(\"${2:module}\")"],
    "description": "Require module as a variable"
  },
  "class": {
    "prefix": "cl",
    "body": [
      "${1:className} = {}\n",
      "$1.${2:new} = function($3)",
      "\tlocal ${4:varName} = ${5:{}}\n",
      "\t${6: --code}\n",
      "\treturn $4",
      "end"
    ],
    "description": "Create a class"
  },
  "if": {
    "prefix": "if",
    "body": ["if ${1:true} then", "\t$0", "end"]
  },
  "elseif": {
    "prefix": "elseif",
    "body": ["elseif ${1:true} then", "\t$0"]
  },
  "for": {
    "prefix": "for",
    "body": ["for ${1:i}=${2:1},${3:10} do", "\t$0", "end"],
    "description": "for loop range"
  },
  "foreach": {
    "prefix": "foreach",
    "body": ["for i, ${1:x} in pairs(${2:table}) do", "\t$0", "end"]
  },
  "forline": {
    "prefix": "forline",
    "body": [
      "f = io.open(${1:\"${2:filename}\"}, \"${3:r}\")\n",
      "while true do",
      "\tline = f:read()",
      "\tif line == nil then break end\n",
      "\t${0:-- code}",
      "end"
    ],
    "description": "read file line by line"
  },
  "function": {
    "prefix": "fu",
    "body": ["function ${1:name}($2)", "\t${3:-- code}", "end"]
  },
  "inline-function": {
    "prefix": "f=",
    "body": ["local ${1:name} = function($2)", "\t${0:-- code}", "end"]
  },
  "print": {
    "prefix": "p",
    "body": ["print(${0})"]
  },
  "self": {
    "prefix": "self:",
    "body": ["function self:${1:methodName}($2)", "\t$0", "end"]
  },
  "while": {
    "prefix": "while",
    "body": ["while ${1:true} do", "\t$0", "end"]
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/package.json`:

```````json
{
  "name": "snips",
  "engines": {
    "vscode": "^1.11.0"
  },
  "contributes": {
    "snippets": [
      {
        "language": "plaintext",
        "path": "./global.json"
      },
      {
        "language": "markdown",
        "path": "./global.json"
      },
      {
        "language": "tex",
        "path": "./global.json"
      },
      {
        "language": "html",
        "path": "./global.json"
      },
      {
        "language": "c",
        "path": "./c.json"
      },
      {
        "language": "cpp",
        "path": "./cpp.json"
      },
      {
        "language": "gitcommit",
        "path": "./gitcommit.json"
      },
      {
        "language": "NeogitCommitMessage",
        "path": "./gitcommit.json"
      },
      {
        "language": "ejs",
        "path": "./frameworks/ejs.json"
      },
      {
        "language": "glsl",
        "path": "./glsl.json"
      },
      {
        "language": "lua",
        "path": "./lua.json"
      },
      {
        "language": "go",
        "path": "./go.json"
      },
      {
        "language": "rust",
        "path": "./rust.json"
      },
      {
        "language": "haskell",
        "path": "./haskell.json"
      },
      {
        "language": "scala",
        "path": "./scala.json"
      },
      {
        "language": "sql",
        "path": "./sql.json"
      },
      {
        "language": "shellscript",
        "path": "./shell.json"
      },
      {
        "language": "shell",
        "path": "./shell.json"
      },
      {
        "language": "sh",
        "path": "./shell.json"
      },
      {
        "language": "bash",
        "path": "./shell.json"
      },
      {
        "language": "markdown",
        "path": "./markdown.json"
      },
      {
        "language": "rmd",
        "path": "./markdown.json"
      },
      {
        "language": "mdx",
        "path": "./markdown.json"
      },
      {
        "language": "tex",
        "path": "./latex.json"
      },
      {
        "language": "plaintex",
        "path": "./latex.json"
      },
      {
        "language": "java",
        "path": "./java.json"
      },
      {
        "language": "html",
        "path": "./html.json"
      },
      {
        "language": "jade",
        "path": "./html.json"
      },
      {
        "language": "pug",
        "path": "./html.json"
      },
      {
        "language": "eruby",
        "path": "./html.json"
      },
      {
        "language": "css",
        "path": "./css.json"
      },
      {
        "language": "scss",
        "path": "./css.json"
      },
      {
        "language": "sass",
        "path": "./css.json"
      },
      {
        "language": "less",
        "path": "./css.json"
      },
      {
        "language": "stylus",
        "path": "./css.json"
      },
      {
        "language": "javascript",
        "path": "./javascript/javascript.json"
      },
      {
        "language": "javascriptreact",
        "path": "./javascript/javascript.json"
      },
      {
        "language": "vue",
        "path": "./javascript/javascript.json"
      },
      {
        "language": "typescript",
        "path": "./javascript/typescript.json"
      },
      {
        "language": "typescriptreact",
        "path": "./javascript/typescript.json"
      },
      {
        "language": "javascriptreact",
        "path": "./javascript/react.json"
      },
      {
        "language": "typescriptreact",
        "path": "./javascript/react-ts.json"
      },
      {
        "language": "vue",
        "path": "./frameworks/vue/html.json"
      },
      {
        "language": "vue",
        "path": "./frameworks/vue/pug.json"
      },
      {
        "language": "vue",
        "path": "./frameworks/vue/javascript.json"
      },
      {
        "language": "vue",
        "path": "./frameworks/vue/vue.json"
      },
      {
        "language": "python",
        "path": "./python/base.json"
      },
      {
        "language": "python",
        "path": "./python/comprehension.json"
      },
      {
        "language": "python",
        "path": "./python/debug.json"
      },
      {
        "language": "python",
        "path": "./python/python.json"
      },
      {
        "language": "python",
        "path": "./python/unittest.json"
      },
      {
        "language": "flutter",
        "path": "./frameworks/flutter.json"
      },
      {
        "language": "jekyll",
        "path": "./frameworks/jekyll.json"
      },
      {
        "language": "kotlin",
        "path": "./kotlin.json"
      },
      {
        "language": [
          "plaintex",
          "tex"
        ],
        "path": "./latex/latex-snippets.json"
      },
      {
        "language": "org",
        "path": "./org.json"
      },
      {
        "language": "norg",
        "path": "./norg.json"
      },
      {
        "language": "gdscript",
        "path": "./gdscript.json"
      }
    ]
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/markdown.json`:

```````json
{
  "header 1": {
    "prefix": "h1",
    "body": ["# ${0}"],
    "description": "Add header level 1"
  },
  "header 2": {
    "prefix": "h2",
    "body": ["## ${0}"],
    "description": "Add header level 2"
  },
  "header 3": {
    "prefix": "h3",
    "body": ["### ${0}"],
    "description": "Add header level 3"
  },
  "header 4": {
    "prefix": "h4",
    "body": ["#### ${0}"],
    "description": "Add header level 4"
  },
  "header 5": {
    "prefix": "h5",
    "body": ["##### ${0}"],
    "description": "Add header level 5"
  },
  "header 6": {
    "prefix": "h6",
    "body": ["###### ${0}"],
    "description": "Add header level 6"
  },
  "Links": {
    "prefix": ["l", "link"],
    "body": ["[${1}](${2}) ${0}"],
    "description": "Add links"
  },
  "URLS": {
    "prefix": ["u", "url"],
    "body": ["<${1}> ${0}"],
    "description": "Add urls"
  },
  "Images": {
    "prefix": "img",
    "body": ["![${1}](${2}) ${0}"],
    "description": "Add images"
  },
  "Insert strikethrough": {
    "prefix": "strikethrough",
    "body": "~~${1}~~ ${0}",
    "description": "Insert strikethrough"
  },
  "Insert bold text": {
    "prefix": ["bold", "b"],
    "body": "**${1}** $0",
    "description": "Insert bold text"
  },
  "Insert italic text": {
    "prefix": ["i", "italic"],
    "body": "*${1}* $0",
    "description": "Insert italic text"
  },
  "Insert bold and italic text": {
    "prefix": ["bold and italic", "bi"],
    "body": "***${1}*** $0",
    "description": "Insert bold and italic text"
  },
  "Insert quoted text": {
    "prefix": "quote",
    "body": "> ${1}",
    "description": "Insert quoted text"
  },
  "Insert code": {
    "prefix": "code",
    "body": "`${1}` $0",
    "description": "Insert code"
  },
  "Insert code block": {
    "prefix": "codeblock",
    "body": ["```${1:language}", "$0", "```"],
    "description": "Insert fenced code block"
  },
  "Insert unordered list": {
    "prefix": "unordered list",
    "body": ["- ${1:first}", "- ${2:second}", "- ${3:third}", "$0"],
    "description": "Insert unordered list"
  },
  "Insert ordered list": {
    "prefix": "ordered list",
    "body": ["1. ${1:first}", "2. ${2:second}", "3. ${3:third}", "$0"],
    "description": "Insert ordered list"
  },
  "Insert horizontal rule": {
    "prefix": "horizontal rule",
    "body": "----------\n",
    "description": "Insert horizontal rule"
  },
  "Insert task list": {
    "prefix": "task",
    "body": ["- [${1| ,x|}] ${2:text}", "${0}"],
    "description": "Insert task list"
  },
  "Insert task list 2": {
    "prefix": "task2",
    "body": ["- [${1| ,x|}] ${2:text}", "- [${3| ,x|}] ${4:text}", "${0}"],
    "description": "Insert task list with 2 tasks"
  },
  "Insert task list 3": {
    "prefix": "task3",
    "body": [
      "- [${1| ,x|}] ${2:text}",
      "- [${3| ,x|}] ${4:text}",
      "- [${5| ,x|}] ${6:text}",
      "${0}"
    ],
    "description": "Insert task list with 3 tasks"
  },
  "Insert task list 4": {
    "prefix": "task4",
    "body": [
      "- [${1| ,x|}] ${2:text}",
      "- [${3| ,x|}] ${4:text}",
      "- [${5| ,x|}] ${6:text}",
      "- [${7| ,x|}] ${8:text}",
      "${0}"
    ],
    "description": "Insert task list with 4 tasks"
  },
  "Insert task list 5": {
    "prefix": "task5",
    "body": [
      "- [${1| ,x|}] ${2:text}",
      "- [${3| ,x|}] ${4:text}",
      "- [${5| ,x|}] ${6:text}",
      "- [${7| ,x|}] ${8:text}",
      "- [${9| ,x|}] ${10:text}",
      "${0}"
    ],
    "description": "Insert task list with 5 tasks"
  },
  "Insert table": {
    "prefix": "table",
    "body": [
      "| ${1:Column1}  | ${2:Column2}   | ${3:Column3}   |",
      "| ------------- | -------------- | -------------- |",
      "| ${4:Item1}    | ${5:Item1}     | ${6:Item1}     |",
      "${0}"
    ],
    "description": "Insert table with 2 rows and 3 columns. First row is heading."
  },
  "Insert 2x1 table": {
    "prefix": "2x1table",
    "body": [
      "| ${1:Column1}  |",
      "| ------------- |",
      "| ${2:Item1}    |",
      "${0}"
    ],
    "description": "Insert table with 2 rows and 1 column. First row is heading."
  },
  "Insert 3x1 table": {
    "prefix": "3x1table",
    "body": [
      "| ${1:Column1}  |",
      "| ------------- |",
      "| ${2:Item1}    |",
      "| ${3:Item2}    |",
      "${0}"
    ],
    "description": "Insert table with 3 rows and 1 column. First row is heading."
  },
  "Insert 4x1 table": {
    "prefix": "4x1table",
    "body": [
      "| ${1:Column1}  |",
      "| ------------- |",
      "| ${2:Item1}    |",
      "| ${3:Item2}    |",
      "| ${4:Item3}    |",
      "${0}"
    ],
    "description": "Insert table with 4 rows and 1 column. First row is heading."
  },
  "Insert 5x1 table": {
    "prefix": "5x1table",
    "body": [
      "| ${1:Column1}  |",
      "| ------------- |",
      "| ${2:Item1}    |",
      "| ${3:Item2}    |",
      "| ${4:Item3}    |",
      "| ${5:Item4}    |",
      "${0}"
    ],
    "description": "Insert table with 5 rows and 1 column. First row is heading."
  },
  "Insert 2x2 table": {
    "prefix": "2x2table",
    "body": [
      "| ${1:Column1}   | ${2:Column2}    |",
      "| -------------- | --------------- |",
      "| ${3:Item1.1}   | ${4:Item2.1}   |",
      "${0}"
    ],
    "description": "Insert table with 2 rows and 2 columns. First row is heading."
  },
  "Insert 3x2 table": {
    "prefix": "3x2table",
    "body": [
      "| ${1:Column1}   | ${2:Column2}    |",
      "| -------------- | --------------- |",
      "| ${3:Item1.1}   | ${4:Item2.1}   |",
      "| ${5:Item1.2}   | ${6:Item2.2}   |",
      "${0}"
    ],
    "description": "Insert table with 3 rows and 2 columns. First row is heading."
  },
  "Insert 4x2 table": {
    "prefix": "4x2table",
    "body": [
      "| ${1:Column1}   | ${2:Column2}    |",
      "| -------------- | --------------- |",
      "| ${3:Item1.1}   | ${4:Item2.1}   |",
      "| ${5:Item1.2}   | ${6:Item2.2}   |",
      "| ${7:Item1.3}   | ${8:Item2.3}   |",
      "${0}"
    ],
    "description": "Insert table with 4 rows and 2 columns. First row is heading."
  },
  "Insert 5x2 table": {
    "prefix": "5x2table",
    "body": [
      "| ${1:Column1}   | ${2:Column2}    |",
      "| -------------- | --------------- |",
      "| ${3:Item1.1}   | ${4:Item2.1}   |",
      "| ${4:Item1.2}   | ${5:Item2.2}   |",
      "| ${6:Item1.3}   | ${7:Item2.3}   |",
      "| ${8:Item1.4}   | ${9:Item2.4}   |",
      "${0}"
    ],
    "description": "Insert table with 5 rows and 2 columns. First row is heading."
  },
  "Insert 2x3 table": {
    "prefix": "2x3table",
    "body": [
      "| ${1:Column1}    | ${2:Column2}    | ${3:Column3}    |",
      "| --------------- | --------------- | --------------- |",
      "| ${4:Item1.1}    | ${5:Item2.1}    | ${6:Item3.1}    |",
      "${0}"
    ],
    "description": "Insert table with 2 rows and 3 columns. First row is heading."
  },
  "Insert 3x3 table": {
    "prefix": "3x3table",
    "body": [
      "| ${1:Column1}    | ${2:Column2}    | ${3:Column3}    |",
      "| --------------- | --------------- | --------------- |",
      "| ${4:Item1.1}    | ${5:Item2.1}    | ${6:Item3.1}    |",
      "| ${7:Item1.2}    | ${8:Item2.2}    | ${9:Item3.2}    |",
      "${0}"
    ],
    "description": "Insert table with 3 rows and 3 columns. First row is heading."
  },
  "Insert 4x3 table": {
    "prefix": "4x3table",
    "body": [
      "| ${1:Column1}    | ${2:Column2}    | ${3:Column3}    |",
      "| --------------- | --------------- | --------------- |",
      "| ${4:Item1.1}    | ${5:Item2.1}    | ${6:Item3.1}    |",
      "| ${7:Item1.2}    | ${8:Item2.2}    | ${9:Item3.2}    |",
      "| ${10:Item1.3}   | ${11:Item2.3}   | ${12:Item3.3}   |",
      "${0}"
    ],
    "description": "Insert table with 4 rows and 3 columns. First row is heading."
  },
  "Insert 5x3 table": {
    "prefix": "5x3table",
    "body": [
      "| ${1:Column1}    | ${2:Column2}    | ${3:Column3}    |",
      "| --------------- | --------------- | --------------- |",
      "| ${4:Item1.1}    | ${5:Item2.1}    | ${6:Item3.1}    |",
      "| ${7:Item1.2}    | ${8:Item2.2}    | ${9:Item3.2}    |",
      "| ${10:Item1.3}   | ${11:Item2.3}   | ${12:Item3.3}   |",
      "| ${13:Item1.4}   | ${14:Item2.4}   | ${15:Item3.4}   |",
      "${0}"
    ],
    "description": "Insert table with 5 rows and 3 columns. First row is heading."
  },
  "Insert Prompt Tag": {
    "prefix": "prompt",
    "body": [
      "<details>",
      "<summary> ${1:PromptName}</summary>",
      "<hr/>",
      "<blockquote> ${2:PromptBody}</blockquote>",
      "</details>"
    ]
  },
  "Insert Prompt With Example": {
    "prefix": "prompt-example",
    "body": [
      "<details>",
      "<summary> ${1:PromptName}</summary>",
      "<hr/>",
      "<blockquote> ${2:PromptBody}</blockquote>",
      "<hr/>",
      "<b>Example</b>",
      "<blockquote> ${3:PromptExample}</blockquote>",
      "</details>"
    ]
  },
  "Insert Prompt with Notes": {
    "prefix": "prompt-notes",
    "body": [
      "<details>",
      "<summary> ${1:PromptName} </summary>",
      "<hr/>",
      "<blockquote> ${2:PromptBody}</blockquote>",
      "<b>Notes:</b>",
      "<p><ul><li>${3:PromptNotes1}</li><li>${4:PromptNotes2}</li></ul></p>",
      "</details>"
    ]
  },
  "Insert Prompt With Warning": {
    "prefix": "prompt-warning",
    "body": [
      "<details>",
      "<summary> ${1:PromptName}</summary>",
      "<hr/>",
      "<blockquote> ${2:PromptBody}</blockquote>",
      "<hr/>",
      "<p><b>${3:WarningType} Warning:</b> ${4:WhateverWarning}</p>",
      "</details>"
    ]
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/gdscript.json`:

```````json
{
  "Inner class": {
    "prefix": "class",
    "body": ["class $1 extends ${2:Reference}", "\t$3"]
  },

  "Print messages to console": {
    "prefix": "pr",
    "body": ["print($1)"]
  },

  "_ready method of Node": {
    "prefix": "ready",
    "body": ["func _ready():", "\t${1:pass}"]
  },

  "_init method of Object": {
    "prefix": "init",
    "body": ["func _init():", "\t${1:pass}"]
  },

  "_process method of Node": {
    "prefix": "process",
    "body": ["func _process(delta):", "\t${1:pass}"]
  },

  "_input method of Node": {
    "prefix": "input",
    "body": ["func _input(event):", "\t${1:pass}"]
  },

  "_input_event method of Node": {
    "prefix": "inpute",
    "body": ["func _input_event(event):", "\t${1:pass}"]
  },

  "_draw method of Node": {
    "prefix": "draw",
    "body": ["func _draw():", "\t${1:pass}"]
  },

  "_gui_input method of Node": {
    "prefix": "guii",
    "body": ["func _gui_input(event):", "\t${1:pass}"]
  },

  "for loop": {
    "prefix": "for",
    "body": ["for $1 in $2:", "\t${3:pass}"]
  },

  "for range loop": {
    "prefix": "for",
    "body": ["for $1 in range(${2:start}{$3:,end}):", "\t${4:pass}"]
  },

  "if elif else": {
    "prefix": "if",
    "body": [
      "if ${1:condition}:",
      "\t${3:pass}",
      "elif ${2:condition}:",
      "\t${4:pass}",
      "else:",
      "\t${5:pass}"
    ]
  },

  "if else": {
    "prefix": "if",
    "body": ["if ${1:condition}:", "\t${2:pass}", "else:", "\t${3:pass}"]
  },

  "if": {
    "prefix": "if",
    "body": ["if ${1:condition}:", "\t${2:pass}"]
  },

  "while": {
    "prefix": "while",
    "body": ["while ${1:condition}:", "\t${2:pass}"]
  },

  "function define": {
    "prefix": "func",
    "body": ["func ${1:method}(${2:args}):", "\t${3:pass}"]
  },

  "signal declaration": {
    "prefix": "signal",
    "body": ["signal ${1:signalname}(${2:args})"]
  },

  "export variables": {
    "prefix": "export",
    "body": [
      "export(${1:type}${2:,other_configs}) var ${3:name}${4: = }${5:}${6: setget }"
    ]
  },

  "define variables": {
    "prefix": "var",
    "body": ["var ${1:name}${2: = }${3:}${4: setget }"]
  },

  "define onready variables": {
    "prefix": "onready",
    "body": ["onready var ${1:name} = get_node($2)"]
  },

  "Is instance of a class or script": {
    "prefix": "is",
    "body": ["${1:instance} is ${2:class}"]
  },

  "element in array": {
    "prefix": "in",
    "body": ["${1:element} in ${$2:array}"]
  },

  "GDScript template": {
    "prefix": "gdscript",
    "body": [
      "extends ${1:BaseClass}",
      "",
      "# class member variables go here, for example:",
      "# var a = 2",
      "# var b = \"textvar\"",
      "",
      "func _ready():",
      "\t# Called every time the node is added to the scene.",
      "\t# Initialization here",
      "\tpass",
      ""
    ]
  },

  "pass statement": {
    "prefix": "pass",
    "body": ["pass"]
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/c.json`:

```````json
{
  "for": {
    "prefix": "for",
    "body": [
      "for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:length}; $2++) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for 'for' loop"
  },
  "forr": {
    "prefix": "forr",
    "body": [
      "for (${1:size_t} ${2:i} = ${3:length} - 1; $2 >= ${4:0}; $2--) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for reverse 'for' loop"
  },
  "while": {
    "prefix": "while",
    "body": ["while ($1) {", "\t$0", "}"],
    "description": ""
  },
  "if": {
    "prefix": "if",
    "body": ["if ($1) {", "\t$0", "}"],
    "description": "Code snippet for if statement"
  },
  "else": {
    "prefix": "else",
    "body": ["else {", "\t$0", "}"],
    "description": "Code snippet for else statement"
  },
  "else if": {
    "prefix": "else if",
    "body": ["else if ($1) {", "\t$0", "}"],
    "description": "Code snippet for else-if statement"
  },
  "enum": {
    "prefix": "enum",
    "body": ["enum ${1:MyEnum} {", "\t$0", "};"],
    "description": "Code snippet for enum"
  },
  "#ifdef": {
    "prefix": "#ifdef",
    "body": ["#ifdef ${1:DEBUG}", "$0", "#endif /* $1 */"],
    "description": "Code snippet for #ifdef"
  },
  "#ifndef": {
    "prefix": "#ifndef",
    "body": ["#ifndef ${1:DEBUG}", "$0", "#endif /* !$1 */"],
    "description": "Code snippet for #ifndef"
  },
  "#if": {
    "prefix": "#if",
    "body": ["#if ${1:0}", "$0", "#endif /* $1 */"],
    "description": "Code snippet for #if"
  },
  "struct": {
    "prefix": "struct",
    "body": ["struct ${1:MyStruct} {", "\t$0", "};"],
    "description": "Code snippet for struct"
  },
  "typedef struct": {
    "prefix": "structt",
    "body": ["typedef struct {", "\t$0", "} ${1:MyStruct};"],
    "description": "Code snippet to define a type with struct"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:switch_on}) {",
      "\tdefault:",
      "\t\t$0",
      "\t\tbreak;",
      "}"
    ],
    "description": "Code snippet for switch statement"
  },
  "case": {
    "prefix": "case",
    "body": ["case $1:", "\t$0", "\tbreak;"],
    "description": "Code snippet for case branch"
  },
  "union": {
    "prefix": "union",
    "body": ["union ${1:MyUnion} {", "\t$0", "};"],
    "description": "Code snippet for union"
  },
  "#inc": {
    "prefix": "#inc",
    "body": ["#include \"$0\""],
    "description": "Code snippet for #include \" \""
  },
  "#inc<": {
    "prefix": "#inc<",
    "body": ["#include <$0>"],
    "description": "Code snippet for #include < >"
  },
  "#def": {
    "prefix": "def",
    "body": ["#define $0"],
    "description": "Code snippet for #define \" \""
  },
  "Main function template": {
    "prefix": "main",
    "body": [
      "int main (int argc, char *argv[])",
      "{",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "A standard main function for a C program"
  },
  "Standard Starter Template": {
    "prefix": "sst",
    "body": [
      "#include <stdio.h>",
      "",
      "int main (int argc, char *argv[])",
      "{",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "A standard starter template for a C program"
  },
  "Stdlib Variant Starter Template": {
    "prefix": "libsst",
    "body": [
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "",
      "int main (int argc, char *argv[])",
      "{",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "A standard starter template for a C program with stdlib included"
  },
  "Do...while loop": {
    "prefix": "do",
    "body": ["do {", "\t$1", "} while($2);"],
    "description": "Creates a do...while loop"
  },
  "Create linked list": {
    "prefix": "clist",
    "body": [
      "typedef struct _node * Link;",
      "typedef struct _node node;",
      "struct _node {",
      "\tint value;",
      "\tLink next;",
      "};"
    ],
    "description": "Creates a linked list template"
  },
  "Create a function": {
    "prefix": "func",
    "body": ["${2:void} ${1:func}(${4:void})", "{", "\t$3", "}"],
    "description": "Creates a function"
  },
  "Create int function": {
    "prefix": "intfunc",
    "body": ["int $1 ()", "{", "\tint $2 = $3;$4", "\treturn $2;", "}"],
    "description": "Creates a function that returns the int type"
  },
  "Create float function": {
    "prefix": "flfunc",
    "body": ["float $1 ()", "{", "\tfloat $2 = $3;$4", "\treturn $2;", "}"],
    "description": "Creates a function that returns the float type"
  },
  "Create double function": {
    "prefix": "doubfunc",
    "body": ["double $1 ()", "{", "\tdouble $2 = $3;$4", "\treturn $2;", "}"],
    "description": "Creates a function that returns the double type"
  },
  "Create string function": {
    "prefix": "strfunc",
    "body": ["char[] $1 ()", "{", "\tchar[] $2 = {$3};$4", "\treturn $2;", "}"],
    "description": "Creates a function that returns the char array type"
  },
  "Create long function": {
    "prefix": "longfunc",
    "body": ["long $1 ()", "{", "\tlong $2 = $3;$4", "\treturn $3;", "}"],
    "description": "Creates a function that returns the long type"
  },
  "Print variable of type float (2 decimal places)": {
    "prefix": "pflo",
    "body": ["printf(\"$0 :>> %.2f\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type float rounded to 2 decimal places"
  },
  "Print variable of type integer": {
    "prefix": "pint",
    "body": ["printf(\"$0 :>> %d\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type signed integer"
  },
  "Print variable of type char": {
    "prefix": "pcha",
    "body": ["printf(\"$0 :>> %c\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type char"
  },
  "Print variable of type pointer": {
    "prefix": "ppoint",
    "body": ["printf(\"$0 :>> %p\\n\", (void *) $0);"],
    "description": "Calls printf() to log value of variable of type pointer"
  },
  "Print variable of type size_t": {
    "prefix": "psiz",
    "body": ["printf(\"$0 :>> %zu\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type size_t"
  },
  "printf": {
    "prefix": "printf",
    "body": ["printf(\"$1\\n\"$0);"],
    "description": "Generic printf() snippet"
  },
  "sprintf": {
    "prefix": "sprintf",
    "body": ["sprintf($1, \"$2\\n\"$0);"],
    "description": "Generic sprintf() snippet"
  },
  "fprintf": {
    "prefix": "fprintf",
    "body": ["fprintf(${1:stderr}, \"$2\\n\"$0);"],
    "description": "Generic fprintf() snippet"
  },
  "scanf": {
    "prefix": "scanf",
    "body": ["scanf(\"$1\"$0);"],
    "description": "Generic scanf() snippet"
  },
  "sscanf": {
    "prefix": "sscanf",
    "body": ["sscanf($1, \"$2\"$0);"],
    "description": "Generic sscanf() snippet"
  },
  "fscanf": {
    "prefix": "fscanf",
    "body": ["fscanf($1, \"$2\"$0);"],
    "description": "Generic fscanf() snippet"
  },
  "Allocate memory using malloc": {
    "prefix": "mal",
    "body": [
      "${1:int} *${2:v} = malloc(${3:1} * sizeof($1));",
      "",
      "if (!$2) {",
      "\tfprintf(stderr, \"Memory allocation failed!\\n\");",
      "\t$4;",
      "}",
      "$0",
      "free($2);"
    ],
    "description": "Allocates memory to a pointer variable using malloc(), then deallocates using free()."
  },
  "Allocate memory using calloc": {
    "prefix": "cal",
    "body": [
      "${1:int} *${2:v} = calloc(${3:1}, sizeof($1));",
      "",
      "if (!$2) {",
      "\tfprintf(stderr, \"Memory allocation failed!\\n\");",
      "\t$4;",
      "}",
      "$0",
      "free($2);"
    ],
    "description": "Allocates memory to a pointer variable using calloc(), then deallocates using free()."
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/gitcommit.json`:

```````json
{
  "conventional commit": {
    "prefix": "cc",
    "body": ["${1:type}(${2:scope}): ${3:title}", "", "$0"]
  },
  "fix conventional commit": {
    "prefix": "fix",
    "body": ["fix(${1:scope}): ${2:title}", "", "$0"]
  },
  "feat conventional commit": {
    "prefix": "feat",
    "body": ["feat(${1:scope}): ${2:title}", "", "$0"]
  },
  "build conventional commit": {
    "prefix": "build",
    "body": ["build(${1:scope}): ${2:title}", "", "$0"]
  },
  "chore conventional commit": {
    "prefix": "chore",
    "body": ["chore(${1:scope}): ${2:title}", "", "$0"]
  },
  "ci conventional commit": {
    "prefix": "ci",
    "body": ["ci(${1:scope}): ${2:title}", "", "$0"]
  },
  "docs conventional commit": {
    "prefix": "docs",
    "body": ["docs(${1:scope}): ${2:title}", "", "$0"]
  },
  "style conventional commit": {
    "prefix": "style",
    "body": ["style(${1:scope}): ${2:title}", "", "$0"]
  },
  "refactor conventional commit": {
    "prefix": "refactor",
    "body": ["refactor(${1:scope}): ${2:title}", "", "$0"]
  },
  "perf conventional commit": {
    "prefix": "perf",
    "body": ["perf(${1:scope}): ${2:title}", "", "$0"]
  },
  "test conventional commit": {
    "prefix": "test",
    "body": ["test(${1:scope}): ${2:title}", "", "$0"]
  },
  "breaking change conventional commit footer": {
    "prefix": "BREAK",
    "body": ["BREAKING CHANGE: $0"]
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/html.json`:

```````json
{
  "doctype": {
    "prefix": "doctype",
    "body": ["<!DOCTYPE>", "$1"],
    "description": "HTML - Defines the document type",
    "scope": "text.html"
  },
  "a": {
    "prefix": "a",
    "body": "<a href=\"$1\">$2</a>$3",
    "description": "HTML - Defines a hyperlink",
    "scope": "text.html"
  },
  "abbr": {
    "prefix": "abbr",
    "body": "<abbr title=\"$1\">$2</abbr>$3",
    "description": "HTML - Defines an abbreviation",
    "scope": "text.html"
  },
  "address": {
    "prefix": "address",
    "body": ["<address>", "$1", "</address>"],
    "description": "HTML - Defines an address element",
    "scope": "text.html"
  },
  "area": {
    "prefix": "area",
    "body": "<area shape=\"$1\" coords=\"$2\" href=\"$3\" alt=\"$4\">$5",
    "description": "HTML - Defines an area inside an image map",
    "scope": "text.html"
  },
  "article": {
    "prefix": "article",
    "body": ["<article>", "\t$1", "</article>"],
    "description": "HTML - Defines an article",
    "scope": "text.html"
  },
  "aside": {
    "prefix": "aside",
    "body": ["<aside>", "\t$1", "</aside>$2"],
    "description": "HTML - Defines content aside from the page content",
    "scope": "text.html"
  },
  "audio": {
    "prefix": "audio",
    "body": ["<audio controls>", "\t$1", "</audio>"],
    "description": "HTML - Defines sounds content",
    "scope": "text.html"
  },
  "b": {
    "prefix": "b",
    "body": "<b>$1</b>$2",
    "description": "HTML - Defines bold text",
    "scope": "text.html"
  },
  "base": {
    "prefix": "base",
    "body": "<base href=\"$1\" target=\"$2\">$3",
    "description": "HTML - Defines a base URL for all the links in a page",
    "scope": "text.html"
  },
  "bdi": {
    "prefix": "bdi",
    "body": "<bdi>$1</bdi>$2",
    "description": "HTML - Used to isolate text that is of unknown directionality",
    "scope": "text.html"
  },
  "bdo": {
    "prefix": "bdo",
    "body": ["<bdo dir=\"$1\">", "$2", "</bdo>"],
    "description": "HTML - Defines the direction of text display",
    "scope": "text.html"
  },
  "big": {
    "prefix": "big",
    "body": "<big>$1</big>$2",
    "description": "HTML - Used to make text bigger",
    "scope": "text.html"
  },
  "blockquote": {
    "prefix": "blockquote",
    "body": ["<blockquote cite=\"$2\">", "\t$1", "</blockquote>"],
    "description": "HTML - Defines a long quotation",
    "scope": "text.html"
  },
  "body": {
    "prefix": "body",
    "body": ["<body>", "\t$1", "</body>"],
    "description": "HTML - Defines the body element",
    "scope": "text.html"
  },
  "br": {
    "prefix": "br",
    "body": "<br>",
    "description": "HTML - Inserts a single line break",
    "scope": "text.html"
  },
  "button": {
    "prefix": "button",
    "body": "<button type=\"$1\">$2</button>$3",
    "description": "HTML - Defines a push button",
    "scope": "text.html"
  },
  "canvas": {
    "prefix": "canvas",
    "body": "<canvas id=\"$1\">$2</canvas>$3",
    "description": "HTML - Defines graphics",
    "scope": "text.html"
  },
  "caption": {
    "prefix": "caption",
    "body": "<caption>$1</caption>$2",
    "description": "HTML - Defines a table caption",
    "scope": "text.html"
  },
  "cite": {
    "prefix": "cite",
    "body": "<cite>$1</cite>$2",
    "description": "HTML - Defines a citation",
    "scope": "text.html"
  },
  "code": {
    "prefix": "code",
    "body": "<code>$1</code>$2",
    "description": "HTML - Defines computer code text",
    "scope": "text.html"
  },
  "col": {
    "prefix": "col",
    "body": "<col>$2",
    "description": "HTML - Defines attributes for table columns",
    "scope": "text.html"
  },
  "colgroup": {
    "prefix": "colgroup",
    "body": ["<colgroup>", "\t$1", "</colgroup>"],
    "description": "HTML - Defines group of table columns",
    "scope": "text.html"
  },
  "command": {
    "prefix": "command",
    "body": "<command>$1</command>$2",
    "description": "HTML - Defines a command button [not supported]",
    "scope": "text.html"
  },
  "datalist": {
    "prefix": "datalist",
    "body": ["<datalist>", "\t$1", "</datalist>"],
    "description": "HTML - Defines a dropdown list",
    "scope": "text.html"
  },
  "dd": {
    "prefix": "dd",
    "body": "<dd>$1</dd>$2",
    "description": "HTML - Defines a definition description",
    "scope": "text.html"
  },
  "del": {
    "prefix": "del",
    "body": "<del>$1</del>$2",
    "description": "HTML - Defines deleted text",
    "scope": "text.html"
  },
  "details": {
    "prefix": "details",
    "body": ["<details>", "\t$1", "</details>"],
    "description": "HTML - Defines details of an element",
    "scope": "text.html"
  },
  "dialog": {
    "prefix": "dialog",
    "body": "<dialog>$1</dialog>$2",
    "description": "HTML - Defines a dialog (conversation)",
    "scope": "text.html"
  },
  "dfn": {
    "prefix": "dfn",
    "body": "<dfn>$1</dfn>$2",
    "description": "HTML - Defines a definition term",
    "scope": "text.html"
  },
  "div": {
    "prefix": "div",
    "body": ["<div>", "\t$1", "</div>"],
    "description": "HTML - Defines a section in a document",
    "scope": "text.html"
  },
  "dl": {
    "prefix": "dl",
    "body": ["<dl>", "\t$1", "</dl>"],
    "description": "HTML - Defines a definition list",
    "scope": "text.html"
  },
  "dt": {
    "prefix": "dt",
    "body": "<dt>$1</dt>$2",
    "description": "HTML - Defines a definition term",
    "scope": "text.html"
  },
  "em": {
    "prefix": "em",
    "body": "<em>$1</em>$2",
    "description": "HTML - Defines emphasized text",
    "scope": "text.html"
  },
  "embed": {
    "prefix": "embed",
    "body": "<embed src=\"$1\">$2",
    "description": "HTML - Defines external interactive content ot plugin",
    "scope": "text.html"
  },
  "fieldset": {
    "prefix": "fieldset",
    "body": ["<fieldset>", "\t$1", "</fieldset>"],
    "description": "HTML - Defines a fieldset",
    "scope": "text.html"
  },
  "figcaption": {
    "prefix": "figcaption",
    "body": "<figcaption>$1</figcaption>$2",
    "description": "HTML - Defines a caption for a figure",
    "scope": "text.html"
  },
  "figure": {
    "prefix": "figure",
    "body": ["<figure>", "\t$1", "</figure>"],
    "description": "HTML - Defines a group of media content, and their caption",
    "scope": "text.html"
  },
  "footer": {
    "prefix": "footer",
    "body": ["<footer>", "\t$1", "</footer>"],
    "description": "HTML - Defines a footer for a section or page",
    "scope": "text.html"
  },
  "form": {
    "prefix": "form",
    "body": ["<form>", "\t$1", "</form>"],
    "description": "HTML - Defines a form",
    "scope": "text.html"
  },
  "h1": {
    "prefix": "h1",
    "body": "<h1>$1</h1>$2",
    "description": "HTML - Defines header 1",
    "scope": "text.html"
  },
  "h2": {
    "prefix": "h2",
    "body": "<h2>$1</h2>$2",
    "description": "HTML - Defines header 2",
    "scope": "text.html"
  },
  "h3": {
    "prefix": "h3",
    "body": "<h3>$1</h3>$2",
    "description": "HTML - Defines header 3",
    "scope": "text.html"
  },
  "h4": {
    "prefix": "h4",
    "body": "<h4>$1</h4>$2",
    "description": "HTML - Defines header 4",
    "scope": "text.html"
  },
  "h5": {
    "prefix": "h5",
    "body": "<h5>$1</h5>$2",
    "description": "HTML - Defines header 5",
    "scope": "text.html"
  },
  "h6": {
    "prefix": "h6",
    "body": "<h6>$1</h6>$2",
    "description": "HTML - Defines header 6",
    "scope": "text.html"
  },
  "head": {
    "prefix": "head",
    "body": ["<head>", "\t$1", "</head>"],
    "description": "HTML - Defines information about the document",
    "scope": "text.html"
  },
  "header": {
    "prefix": "header",
    "body": ["<header>", "\t$1", "</header>"],
    "description": "HTML - Defines a header for a section of page",
    "scope": "text.html"
  },
  "hgroup": {
    "prefix": "hgroup",
    "body": ["<hgroup>", "\t$1", "</hgroup>"],
    "description": "HTML - Defines information about a section in a document",
    "scope": "text.html"
  },
  "hr": {
    "prefix": "hr",
    "body": "<hr>",
    "description": "HTML - Defines a horizontal rule",
    "scope": "text.html"
  },
  "html": {
    "prefix": "html",
    "body": ["<html>", "\t$1", "</html>"],
    "description": "HTML - Defines an html document",
    "scope": "text.html"
  },
  "html5": {
    "prefix": "html5",
    "body": [
      "<!DOCTYPE html>",
      "<html lang=\"$1en\">",
      "\t<head>",
      "\t\t<title>$2</title>",
      "\t\t<meta charset=\"UTF-8\">",
      "\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">",
      "\t\t<link href=\"$3css/style.css\" rel=\"stylesheet\">",
      "\t</head>",
      "\t<body>",
      "\t$4",
      "\t</body>",
      "</html>"
    ],
    "description": "HTML - Defines a template for a html5 document",
    "scope": "text.html"
  },
  "i": {
    "prefix": "i",
    "body": "<i>$1</i>$2",
    "description": "HTML - Defines italic text",
    "scope": "text.html"
  },
  "iframe": {
    "prefix": "iframe",
    "body": "<iframe src=\"$1\">$2</iframe>$3",
    "description": "HTML - Defines an inline sub window",
    "scope": "text.html"
  },
  "img": {
    "prefix": "img",
    "body": "<img src=\"$1\" alt=\"$2\">$3",
    "description": "HTML - Defines an image",
    "scope": "text.html"
  },
  "input": {
    "prefix": "input",
    "body": "<input type=\"$1\" name=\"$2\" value=\"$3\">$4",
    "description": "HTML - Defines an input field",
    "scope": "text.html"
  },
  "ins": {
    "prefix": "ins",
    "body": "<ins>$1</ins>$2",
    "description": "HTML - Defines inserted text",
    "scope": "text.html"
  },
  "keygen": {
    "prefix": "keygen",
    "body": "<keygen name=\"$1\">$2",
    "description": "HTML - Defines a generated key in a form",
    "scope": "text.html"
  },
  "kbd": {
    "prefix": "kbd",
    "body": "<kbd>$1</kbd>$2",
    "description": "HTML - Defines keyboard text",
    "scope": "text.html"
  },
  "label": {
    "prefix": "label",
    "body": "<label for=\"$1\">$2</label>$3",
    "description": "HTML - Defines an inline window",
    "scope": "text.html"
  },
  "legend": {
    "prefix": "legend",
    "body": "<legend>$1</legend>$2",
    "description": "HTML - Defines a title in a fieldset",
    "scope": "text.html"
  },
  "li": {
    "prefix": "li",
    "body": "<li>$1</li>$2",
    "description": "HTML - Defines a list item",
    "scope": "text.html"
  },
  "link": {
    "prefix": "link",
    "body": "<link rel=\"$1\" type=\"$2\" href=\"$3\">$4",
    "description": "HTML - Defines a resource reference",
    "scope": "text.html"
  },
  "main": {
    "prefix": "main",
    "body": ["<main>", "\t$1", "</main>"],
    "description": "HTML - Defines an image map",
    "scope": "text.html"
  },
  "map": {
    "prefix": "map",
    "body": ["<map name=\"$1\">", "\t$2", "</map>"],
    "description": "HTML - Defines an image map",
    "scope": "text.html"
  },
  "mark": {
    "prefix": "mark",
    "body": "<mark>$1</mark>$2",
    "description": "HTML - Defines marked text",
    "scope": "text.html"
  },
  "menu": {
    "prefix": "menu",
    "body": ["<menu>", "\t$1", "</menu>"],
    "description": "HTML - Defines a menu list",
    "scope": "text.html"
  },
  "menuitem": {
    "prefix": "menuitem",
    "body": "<menuitem>$1</menuitem>$2",
    "description": "HTML - Defines a menu item [firefox only]",
    "scope": "text.html"
  },
  "meta": {
    "prefix": "meta",
    "body": "<meta name=\"$1\" content=\"$2\">$3",
    "description": "HTML - Defines meta information",
    "scope": "text.html"
  },
  "meter": {
    "prefix": "meter",
    "body": "<meter value=\"$1\">$2</meter>$3",
    "description": "HTML - Defines measurement within a predefined range",
    "scope": "text.html"
  },
  "nav": {
    "prefix": "nav",
    "body": ["<nav>", "\t$1", "</nav>"],
    "description": "HTML - Defines navigation links",
    "scope": "text.html"
  },
  "noscript": {
    "prefix": "noscript",
    "body": ["<noscript>", "$1", "</noscript>"],
    "description": "HTML - Defines a noscript section",
    "scope": "text.html"
  },
  "object": {
    "prefix": "object",
    "body": "<object width=\"$1\" height=\"$2\" data=\"$3\">$4</object>$5",
    "description": "HTML - Defines an embedded object",
    "scope": "text.html"
  },
  "ol": {
    "prefix": "ol",
    "body": ["<ol>", "\t$1", "</ol>"],
    "description": "HTML - Defines an ordered list",
    "scope": "text.html"
  },
  "optgroup": {
    "prefix": "optgroup",
    "body": ["<optgroup>", "\t$1", "</optgroup>"],
    "description": "HTML - Defines an option group",
    "scope": "text.html"
  },
  "option": {
    "prefix": "option",
    "body": "<option value=\"$1\">$2</option>$3",
    "description": "HTML - Defines an option in a drop-down list",
    "scope": "text.html"
  },
  "output": {
    "prefix": "output",
    "body": "<output name=\"$1\" for=\"$2\">$3</output>$4",
    "description": "HTML - Defines some types of output",
    "scope": "text.html"
  },
  "p": {
    "prefix": "p",
    "body": "<p>$1</p>$2",
    "description": "HTML - Defines a paragraph",
    "scope": "text.html"
  },
  "param": {
    "prefix": "param",
    "body": "<param name=\"$1\" value=\"$2\">$3",
    "description": "HTML - Defines a parameter for an object",
    "scope": "text.html"
  },
  "pre": {
    "prefix": "pre",
    "body": ["<pre>$1</pre>"],
    "description": "HTML - Defines preformatted text",
    "scope": "text.html"
  },
  "progress": {
    "prefix": "progress",
    "body": "<progress value=\"$1\" max=\"$2\">$3</progress>$4",
    "description": "HTML - Defines progress of a task of any kind",
    "scope": "text.html"
  },
  "q": {
    "prefix": "q",
    "body": "<q>$1</q>$2",
    "description": "HTML - Defines a short quotation",
    "scope": "text.html"
  },
  "rp": {
    "prefix": "rp",
    "body": "<rp>$1</rp>$2",
    "description": "HTML - Used in ruby annotations to define what to show browsers that do not support the ruby element",
    "scope": "text.html"
  },
  "rt": {
    "prefix": "rt",
    "body": "<rt>$1</rt>$2",
    "description": "HTML - Defines explanation to ruby annotations",
    "scope": "text.html"
  },
  "ruby": {
    "prefix": "ruby",
    "body": ["<ruby>", "$1", "</ruby>"],
    "description": "HTML - Defines ruby annotations",
    "scope": "text.html"
  },
  "s": {
    "prefix": "s",
    "body": "<s>$1</s>$2",
    "description": "HTML - Used to define strikethrough text",
    "scope": "text.html"
  },
  "samp": {
    "prefix": "samp",
    "body": "<samp>$1</samp>$2",
    "description": "HTML - Defines sample computer code",
    "scope": "text.html"
  },
  "script": {
    "prefix": "script",
    "body": ["<script>", "\t$1", "</script>"],
    "description": "HTML - Defines a script",
    "scope": "text.html"
  },
  "section": {
    "prefix": "section",
    "body": ["<section>", "\t$1", "</section>"],
    "description": "HTML - Defines a section",
    "scope": "text.html"
  },
  "select": {
    "prefix": "select",
    "body": ["<select>", "\t$1", "</select>"],
    "description": "HTML - Defines a selectable list",
    "scope": "text.html"
  },
  "small": {
    "prefix": "small",
    "body": "<small>$1</small>$2",
    "description": "HTML - Defines small text",
    "scope": "text.html"
  },
  "source": {
    "prefix": "source",
    "body": "<source src=\"$1\" type=\"$2\">$3",
    "description": "HTML - Defines media resource",
    "scope": "text.html"
  },
  "span": {
    "prefix": "span",
    "body": "<span>$1</span>$2",
    "description": "HTML - Defines a section in a document",
    "scope": "text.html"
  },
  "strong": {
    "prefix": "strong",
    "body": "<strong>$1</strong>$2",
    "description": "HTML - Defines strong text",
    "scope": "text.html"
  },
  "style": {
    "prefix": "style",
    "body": ["<style>", "$1", "</style>"],
    "description": "HTML - Defines a style definition",
    "scope": "text.html"
  },
  "sub": {
    "prefix": "sub",
    "body": "<sub>$1</sub>$2",
    "description": "HTML - Defines sub-scripted text",
    "scope": "text.html"
  },
  "sup": {
    "prefix": "sup",
    "body": "<sup>$1</sup>$2",
    "description": "HTML - Defines super-scripted text",
    "scope": "text.html"
  },
  "summary": {
    "prefix": "summary",
    "body": "<summary>$1</summary>$2",
    "description": "HTML - Defines a visible heading for the detail element [limited support]",
    "scope": "text.html"
  },
  "table": {
    "prefix": "table",
    "body": ["<table>", "\t$1", "</table>"],
    "description": "HTML - Defines a table",
    "scope": "text.html"
  },
  "tbody": {
    "prefix": "tbody",
    "body": ["<tbody>", "\t$1", "</tbody>"],
    "description": "HTML - Defines a table body",
    "scope": "text.html"
  },
  "td": {
    "prefix": "td",
    "body": "<td>$1</td>$2",
    "description": "HTML - Defines a table cell",
    "scope": "text.html"
  },
  "textarea": {
    "prefix": "textarea",
    "body": "<textarea rows=\"$1\" cols=\"$2\">$3</textarea>$4",
    "description": "HTML - Defines a text area",
    "scope": "text.html"
  },
  "tfoot": {
    "prefix": "tfoot",
    "body": ["<tfoot>", "\t$1", "</tfoot>"],
    "description": "HTML - Defines a table footer",
    "scope": "text.html"
  },
  "thead": {
    "prefix": "thead",
    "body": ["<thead>", "$1", "</thead>"],
    "description": "HTML - Defines a table head",
    "scope": "text.html"
  },
  "th": {
    "prefix": "th",
    "body": "<th>$1</th>$2",
    "description": "HTML - Defines a table header",
    "scope": "text.html"
  },
  "time": {
    "prefix": "time",
    "body": "<time datetime=\"$1\">$2</time>$3",
    "description": "HTML - Defines a date/time",
    "scope": "text.html"
  },
  "title": {
    "prefix": "title",
    "body": "<title>$1</title>$2",
    "description": "HTML - Defines the document title",
    "scope": "text.html"
  },
  "tr": {
    "prefix": "tr",
    "body": "<tr>$1</tr>$2",
    "description": "HTML - Defines a table row",
    "scope": "text.html"
  },
  "track": {
    "prefix": "track",
    "body": "<track src=\"$1\" kind=\"$2\" srclang=\"$3\" label=\"$4\">$5",
    "description": "HTML - Defines a table row",
    "scope": "text.html"
  },
  "u": {
    "prefix": "u",
    "body": "<u>$1</u>$2",
    "description": "HTML - Used to define underlined text",
    "scope": "text.html"
  },
  "ul": {
    "prefix": "ul",
    "body": ["<ul>", "\t$1", "</ul>"],
    "description": "HTML - Defines an unordered list",
    "scope": "text.html"
  },
  "var": {
    "prefix": "var",
    "body": "<var>$1</var>$2",
    "description": "HTML - Defines a variable",
    "scope": "text.html"
  },
  "video": {
    "prefix": "video",
    "body": ["<video width=\"$1\" height=\"$2\" controls>", "\t$3", "</video>"],
    "description": "HTML - Defines a video",
    "scope": "text.html"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/frameworks/flutter.json`:

```````json
{
  "Stateless Widget": {
    "prefix": "statelessW",
    "body": [
      "class ${1:name} extends StatelessWidget {",
      "  const ${1:name}({Key? key}) : super(key: key);\n",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(",
      "      child: ${2:null},",
      "    );",
      "  }",
      "}"
    ],
    "description": "Create a Stateless widget"
  },
  "Stateful Widget": {
    "prefix": "statefulW",
    "body": [
      "class ${1:name} extends StatefulWidget {",
      "  ${1:name}({Key? key}) : super(key: key);\n",
      "  @override",
      "  _${1:WidgetName}State createState() => _${1:WidgetName}State();",
      "}\n",
      "class _${1:index}State extends State<${1:index}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(",
      "       child: ${2:null},",
      "    );",
      "  }",
      "}"
    ],
    "description": "Create a Stateful widget"
  },
  "Build Method": {
    "prefix": "build",
    "body": [
      "@override",
      "Widget build(BuildContext context) {",
      "  return ${0:};",
      "}"
    ],
    "description": "Describes the part of the user interface represented by this widget."
  },
  "Custom Painter ": {
    "prefix": "customPainter",
    "body": [
      "class ${0:name}Painter extends CustomPainter {",
      "",
      "  @override",
      "  void paint(Canvas canvas, Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldRepaint(${0:name}Painter oldDelegate) => false;",
      "",
      "  @override",
      "  bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
      "}"
    ],
    "description": "Used for creating custom paint"
  },
  "Custom Clipper ": {
    "prefix": "customClipper",
    "body": [
      "class ${0:name}Clipper extends CustomClipper<Path> {",
      "",
      "  @override",
      "  Path getClip(Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldReclip(CustomClipper<Path> oldClipper) => false;",
      "}"
    ],
    "description": "Used for creating custom shapes"
  },
  "InitState ": {
    "prefix": "initS",
    "body": [
      "@override",
      "void initState() { ",
      "  super.initState();",
      "  ${0:}",
      "}"
    ],
    "description": "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates."
  },
  "Dispose": {
    "prefix": "dis",
    "body": [
      "@override",
      "void dispose() { ",
      "  ${0:}",
      "  super.dispose();",
      "}"
    ],
    "description": "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
  },
  "Reassemble": {
    "prefix": "reassemble",
    "body": [
      "@override",
      "void reassemble(){",
      "  super.reassemble();",
      "  ${0:}",
      "}"
    ],
    "description": "Called whenever the application is reassembled during debugging, for example during hot reload."
  },
  "didChangeDependencies": {
    "prefix": "didChangeD",
    "body": [
      "@override",
      "void didChangeDependencies() {",
      "  super.didChangeDependencies();",
      "  ${0:}",
      "}"
    ],
    "description": "Called when a dependency of this State object changes"
  },
  "didUpdateWidget": {
    "prefix": "didUpdateW",
    "body": [
      "@override",
      "void didUpdateWidget (${1:Type} ${2:oldWidget}) {",
      "  super.didUpdateWidget(${2:oldWidget});",
      "  ${0:}",
      "}"
    ],
    "description": "Called whenever the widget configuration changes."
  },
  "ListView.Builder": {
    "prefix": "listViewB",
    "body": [
      "ListView.builder(",
      "  itemCount: ${1:1},",
      "  itemBuilder: (BuildContext context, int index) {",
      "  return ${2:};",
      " },",
      "),"
    ],
    "description": "Creates a scrollable, linear array of widgets that are created on demand.Providing a non-null `itemCount` improves the ability of the [ListView] to estimate the maximum scroll extent."
  },
  "ListView.Separated": {
    "prefix": "listViewS",
    "body": [
      "ListView.separated(",
      "  itemCount: ${1:1},",
      "  separatorBuilder: (BuildContext context, int index) {",
      "  return ${2:};",
      " },",
      "  itemBuilder: (BuildContext context, int index) {",
      "  return ${3:};",
      " },",
      "),"
    ],
    "description": "Creates a fixed-length scrollable linear array of list 'items' separated by list item 'separators'."
  },
  "GridView.Builder": {
    "prefix": "gridViewB",
    "body": [
      "GridView.builder(",
      "  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
      "    crossAxisCount: ${1:2},",
      "  ),",
      "  itemCount: ${2:2},",
      "  itemBuilder: (BuildContext context, int index) {",
      "    return ${3:};",
      "  },",
      "),"
    ],
    "description": "Creates a scrollable, 2D array of widgets that are created on demand. Providing a non-null `itemCount` improves the ability of the [GridView] to estimate the maximum scroll extent."
  },
  "GridView.Count": {
    "prefix": "gridViewC",
    "body": [
      "GridView.count(",
      "  crossAxisSpacing: ${1:1},",
      "  mainAxisSpacing: ${2:2},",
      "  crossAxisCount: ${3:2},",
      "  children: <Widget> [",
      "    ${4:}",
      "  ],",
      "),"
    ],
    "description": "Creates a scrollable, 2D array of widgets with a fixed number of tiles in the cross axis."
  },
  "GridView.Extent": {
    "prefix": "gridViewE",
    "body": [
      "GridView.extent(",
      "  maxCrossAxisExtent:  ${1:2},",
      "  children: <Widget> [",
      "    ${2:}",
      "  ],",
      "),"
    ],
    "description": "Creates a scrollable, 2D array of widgets with tiles that each have a maximum cross-axis extent."
  },
  "Custom Scroll View": {
    "prefix": "customScrollV",
    "body": [
      "CustomScrollView(",
      "  slivers: <Widget>[",
      "  ${0:}",
      "  ],",
      "),"
    ],
    "description": "Creates a `ScrollView` that creates custom scroll effects using slivers. If the `primary` argument is true, the `controller` must be null."
  },
  "Stream Builder": {
    "prefix": "streamBldr",
    "body": [
      "StreamBuilder(",
      "  stream: ${1:stream},",
      "  initialData: ${2:initialData},",
      "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "    return Container(",
      "      child: ${3:child},",
      "    );",
      "  },",
      "),"
    ],
    "description": "Creates a new `StreamBuilder` that builds itself based on the latest snapshot of interaction with the specified `stream`"
  },
  "Animated Builder": {
    "prefix": "animatedBldr",
    "body": [
      "AnimatedBuilder(",
      "  animation: ${1:animation},",
      "  child: ${2:child},",
      "  builder: (BuildContext context, Widget child) {",
      "    return ${3:};",
      "  },",
      "),"
    ],
    "description": "Creates an Animated Builder. The widget specified to `child` is passed to the `builder` "
  },
  "Stateful Builder": {
    "prefix": "statefulBldr",
    "body": [
      "StatefulBuilder(",
      "  builder: (BuildContext context, setState) {",
      "    return ${0:};",
      "  },",
      "),"
    ],
    "description": "Creates a widget that both has state and delegates its build to a callback. Useful for rebuilding specific sections of the widget tree."
  },
  "Orientation Builder": {
    "prefix": "orientationBldr",
    "body": [
      "OrientationBuilder(",
      "  builder: (BuildContext context, Orientation orientation) {",
      "    return Container(",
      "      child: ${3:child},",
      "    );",
      "  },",
      "),"
    ],
    "description": "Creates a builder which allows for the orientation of the device to be specified and referenced"
  },
  "Layout Builder": {
    "prefix": "layoutBldr",
    "body": [
      "LayoutBuilder(",
      "  builder: (BuildContext context, BoxConstraints constraints) {",
      "    return ${0:};",
      "  },",
      "),"
    ],
    "description": "Similar to the Builder widget except that the framework calls the builder function at layout time and provides the parent widget's constraints."
  },
  "Single Child ScrollView": {
    "prefix": "singleChildSV",
    "body": [
      "SingleChildScrollView(",
      "  controller: ${1:controller,}",
      "  child: Column(",
      "    ${0:}",
      "  ),",
      "),"
    ],
    "description": "Creates a scroll view with a single child"
  },
  "Future Builder": {
    "prefix": "futureBldr",
    "body": [
      "FutureBuilder(",
      "  future: ${1:Future},",
      "  initialData: ${2:InitialData},",
      "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "    return ${3:};",
      "  },",
      "),"
    ],
    "description": "Creates a Future Builder. This builds itself based on the latest snapshot of interaction with a Future."
  },
  "No Such Method": {
    "prefix": "nosm",
    "body": [
      "@override",
      "dynamic noSuchMethod(Invocation invocation) {",
      "  ${1:}",
      "}"
    ],
    "description": "This method is invoked when a non-existent method or property is accessed."
  },
  "Inherited Widget": {
    "prefix": "inheritedW",
    "body": [
      "class ${1:Name} extends InheritedWidget {",
      "  ${1:Name}({Key? key, required this.child}) : super(key: key, child: child);",
      "",
      "  final Widget child;",
      "",
      "  static ${1:Name}? of(BuildContext context) {",
      "    return context.dependOnInheritedWidgetOfExactType<${1:Name}>();",
      "  }",
      "",
      "  @override",
      "  bool updateShouldNotify(${1:Name} oldWidget) {",
      "    return ${2:true};",
      "  }",
      "}"
    ],
    "description": "Class used to propagate information down the widget tree"
  },
  "Mounted": {
    "prefix": "mounted",
    "body": ["@override", "bool get mounted {", "  ${0:}", "}"],
    "description": "Whether this State object is currently in a tree."
  },
  "Sink": {
    "prefix": "snk",
    "body": [
      "Sink<${1:type}> get ${2:name} => _${2:name}Controller.sink;",
      "final _${2:name}Controller = StreamController<${1:type}>();"
    ],
    "description": "A Sink is the input of a stream."
  },
  "Stream": {
    "prefix": "strm",
    "body": [
      "Stream<${1:type}> get ${2:name} => _${2:name}Controller.stream;",
      "final _${2:name}Controller = StreamController<${1:type}>();"
    ],
    "description": "A source of asynchronous data events. A stream can be of any data type <T>"
  },
  "Subject": {
    "prefix": "subj",
    "body": [
      "Stream<${1:type}> get ${2:name} => _${2:name}Subject.stream;",
      "final _${2:name}Subject = BehaviorSubject<${1:type}>();"
    ],
    "description": "A BehaviorSubject is also a broadcast StreamController which returns an Observable rather than a Stream."
  },
  "toString": {
    "prefix": "toStr",
    "body": ["@override", "String toString() {", "return ${1:toString};", " }"],
    "description": "Returns a string representation of this object."
  },
  "debugPrint": {
    "prefix": "debugP",
    "body": ["debugPrint(${1:statement});"],
    "description": "Prints a message to the console, which you can access using the flutter tool's `logs` command (flutter logs)."
  },
  "Material Package": {
    "prefix": "importM",
    "body": "import 'package:flutter/material.dart';",
    "description": "Import flutter material package"
  },
  "Cupertino Package": {
    "prefix": "importC",
    "body": "import 'package:flutter/cupertino.dart';",
    "description": "Import Flutter Cupertino package"
  },
  "flutter_test Package": {
    "prefix": "importFT",
    "body": "import 'package:flutter_test/flutter_test.dart';",
    "description": "Import flutter_test package"
  },
  "Material App": {
    "prefix": "mateapp",
    "description": "Create a MaterialApp",
    "body": [
      "import 'package:flutter/material.dart';",
      " ",
      "void main() => runApp(MyApp());",
      " ",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      title: 'Material App',",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: Text('Material App Bar'),",
      "        ),",
      "        body: Center(",
      "          child: Container(",
      "            child: Text('Hello World'),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "Cupertino App": {
    "prefix": "cupeapp",
    "description": "Create a CupertinoApp",
    "body": [
      "import 'package:flutter/cupertino.dart';",
      " ",
      "void main() => runApp(MyApp());",
      " ",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return CupertinoApp(",
      "      title: 'Cupertino App',",
      "      home: CupertinoPageScaffold(",
      "        navigationBar: CupertinoNavigationBar(",
      "          middle: Text('Cupertino App Bar'),",
      "        ),",
      "        child: Center(",
      "          child: Container(",
      "            child: Text('Hello World'),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "Tween Animation Builder": {
    "prefix": "tweenAnimationBuilder",
    "body": [
      "TweenAnimationBuilder(",
      "    duration: ${1:const Duration(),}",
      "    tween: ${2:Tween(),}",
      "    builder: (BuildContext context, ${3:dynamic} value, Widget? child) {",
      "       return ${4:Container();}",
      "     },",
      " ),  "
    ],
    "description": "Widget builder that animates a property of a Widget to a target value whenever the target value changes."
  },
  "Value Listenable Builder": {
    "prefix": "valueListenableBuilder",
    "body": [
      "ValueListenableBuilder(",
      "    valueListenable: ${1: null},",
      "    builder: (BuildContext context, ${2:dynamic} value, Widget? child) {",
      "       return ${3: Container();}",
      "    },",
      " ),"
    ],
    "description": "Given a ValueListenable<T> and a builder which builds widgets from concrete values of T, this class will automatically register itself as a listener of the ValueListenable and call the builder with updated values when the value changes."
  },
  "Test": {
    "prefix": "f-test",
    "body": ["test(", "   \"${1:test description}\",", "   () {},", ");"],
    "description": "Create a test function"
  },
  "Test Widgets": {
    "prefix": "widgetTest",
    "body": [
      "testWidgets(",
      "   \"${1:test description}\",",
      "   (WidgetTester tester) async {},",
      ");"
    ],
    "description": "Create a testWidgets function"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/frameworks/vue/html.json`:

```````json
{
  "template": {
    "prefix": "template",
    "body": [
      "<template>",
      "\t<${1:div}$2>",
      "\t\t$0",
      "\t</${1:div}>",
      "</template>"
    ],
    "description": "template element"
  },
  "v-text": {
    "prefix": "vText",
    "body": ["v-text=\"${1:msg}\""],
    "description": "Expects: string. Updates the element’s textContent."
  },
  "v-html": {
    "prefix": "vHtml",
    "body": ["v-html=\"${1:html}\""],
    "description": "Expects: string. Updates the element’s innerHTML."
  },
  "v-show": {
    "prefix": "vShow",
    "body": ["v-show=\"${1:condition}\""],
    "description": "Expects: any"
  },
  "v-if": {
    "prefix": "vIf",
    "body": ["v-if=\"${1:condition}\""],
    "description": "Expects: any"
  },
  "v-else": {
    "prefix": "vElse",
    "body": ["v-else"],
    "description": "Does not expect expression. previous sibling element must have v-if or v-else-if."
  },
  "v-else-if": {
    "prefix": "vElseIf",
    "body": ["v-else-if=\"${1:condition}\""],
    "description": "Expects: any. previous sibling element must have v-if or v-else-if."
  },
  "v-for-without-key": {
    "prefix": "vForWithoutKey",
    "body": ["v-for=\"${1:item} in ${2:items}\""],
    "description": "Expects: Array | Object | number | string"
  },
  "v-for": {
    "prefix": "vFor",
    "body": [
      "v-for=\"(${1:item}, ${2:index}) in ${3:items}\" :key=\"${4:index}\""
    ],
    "description": "Expects: Array | Object | number | string"
  },
  "v-on": {
    "prefix": "vOn",
    "body": ["v-on:${1:event}=\"${2:handle}\""],
    "description": "Expects: Function | Inline Statement"
  },
  "v-bind": {
    "prefix": "vBind",
    "body": ["v-bind$1=\"${2}\""],
    "description": "Expects: any (with argument) | Object (without argument)"
  },
  "v-model": {
    "prefix": "vModel",
    "body": ["v-model=\"${1:something}\""],
    "description": "Expects: varies based on value of form inputs element or output of components"
  },
  "v-slot": {
    "prefix": "vSlot",
    "body": ["v-slot$1=\"${2}\""],
    "description": "Expects: JavaScript expression that is valid in a function argument position (supports destructuring in supported environments). Optional - only needed if expecting props to be passed to the slot."
  },
  "v-pre": {
    "prefix": "vPre",
    "body": ["v-pre"],
    "description": "Does not expect expression"
  },
  "v-cloak": {
    "prefix": "vCloak",
    "body": ["v-cloak"],
    "description": "Does not expect expression"
  },
  "v-once": {
    "prefix": "vOnce",
    "body": ["v-once"],
    "description": "Does not expect expression"
  },
  "key": {
    "prefix": "key",
    "body": [":key=\"${1:key}\""],
    "description": "Expects: string. Children of the same common parent must have unique keys. Duplicate keys will cause render errors."
  },
  "ref": {
    "prefix": "ref",
    "body": ["ref=\"${1:reference}\"$0"],
    "description": "Expects: string. ref is used to register a reference to an element or a child component. The reference will be registered under the parent component’s $refs object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance."
  },
  "slotA": {
    "prefix": "slotA",
    "body": ["slot=\"$1\"$0"],
    "description": "slot=''. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to."
  },
  "slotE": {
    "prefix": "slotE",
    "body": ["<slot$1>$2</slot>$0"],
    "description": "<slot></slot>. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to."
  },
  "slotScope": {
    "prefix": "slotScope",
    "body": ["slot-scope=\"$1\"$0"],
    "description": "Used to denote an element or component as a scoped slot. The attribute’s value should be a valid JavaScript expression that can appear in the argument position of a function signature. This means in supported environments you can also use ES2015 destructuring in the expression. Serves as a replacement for scope in 2.5.0+."
  },
  "scope": {
    "prefix": "scope",
    "body": ["scope=\"${1:this api replaced by slot-scope in 2.5.0+}\"$0"],
    "description": "Used to denote a <template> element as a scoped slot, which is replaced by `slot-scope` in 2.5.0+."
  },
  "component": {
    "prefix": "component",
    "body": ["<component :is=\"${1:componentId}\"></component>$0"],
    "description": "component element"
  },
  "keep-alive": {
    "prefix": "keepAlive",
    "body": ["<keep-alive$1>", "$2", "</keep-alive>$0"],
    "description": "keep-alive element"
  },
  "transition": {
    "prefix": "transition",
    "body": ["<transition$1>", "$2", "</transition>$0"],
    "description": "transition element"
  },
  "transition-group": {
    "prefix": "transitionGroup",
    "body": ["<transition-group$1>", "$2", "</transition-group>"],
    "description": "transition-group element"
  },
  "enter-class": {
    "prefix": "enterClass",
    "body": ["enter-class=\"$1\"$0"],
    "description": "enter-class=''. Expects: string."
  },
  "leave-class": {
    "prefix": "leaveClass",
    "body": ["leave-class=\"$1\"$0"],
    "description": "leave-class=''. Expects: string."
  },
  "appear-class": {
    "prefix": "appearClass",
    "body": ["appear-class=\"$1\"$0"],
    "description": "appear-class=''. Expects: string."
  },
  "enter-to-class": {
    "prefix": "enterToClass",
    "body": ["enter-to-class=\"$1\"$0"],
    "description": "enter-to-class=''. Expects: string."
  },
  "leave-to-class": {
    "prefix": "leaveToClass",
    "body": ["leave-to-class=\"$1\"$0"],
    "description": "leave-to-class=''. Expects: string."
  },
  "appear-to-class": {
    "prefix": "appearToClass",
    "body": ["appear-to-class=\"$1\"$0"],
    "description": "appear-to-class=''. Expects: string."
  },
  "enter-active-class": {
    "prefix": "enterActiveClass",
    "body": ["enter-active-class=\"$1\"$0"],
    "description": "enter-active-class=''. Expects: string."
  },
  "leave-active-class": {
    "prefix": "leaveActiveClass",
    "body": ["leave-active-class=\"$1\"$0"],
    "description": "leave-active-class=''. Expects: string."
  },
  "appear-active-class": {
    "prefix": "appearActiveClass",
    "body": ["appear-active-class=\"$1\"$0"],
    "description": "appear-active-class=''. Expects: string."
  },
  "before-enter": {
    "prefix": "beforeEnterEvent",
    "body": ["@before-enter=\"$1\"$0"],
    "description": "@before-enter=''"
  },
  "before-leave": {
    "prefix": "beforeLeaveEvent",
    "body": ["@before-leave=\"$1\"$0"],
    "description": "@before-leave=''"
  },
  "before-appear": {
    "prefix": "beforeAppearEvent",
    "body": ["@before-appear=\"$1\"$0"],
    "description": "@before-appear=''"
  },
  "enter": {
    "prefix": "enterEvent",
    "body": ["@enter=\"$1\"$0"],
    "description": "@enter=''"
  },
  "leave": {
    "prefix": "leaveEvent",
    "body": ["@leave=\"$1\"$0"],
    "description": "@leave=''"
  },
  "appear": {
    "prefix": "appearEvent",
    "body": ["@appear=\"$1\"$0"],
    "description": "@appear=''"
  },
  "after-enter": {
    "prefix": "afterEnterEvent",
    "body": ["@after-enter=\"$1\"$0"],
    "description": "@after-enter=''"
  },
  "after-leave": {
    "prefix": "afterLeaveEvent",
    "body": ["@after-leave=\"$1\"$0"],
    "description": "@after-leave=''"
  },
  "after-appear": {
    "prefix": "afterAppearEvent",
    "body": ["@after-appear=\"$1\"$0"],
    "description": "@after-appear=''"
  },
  "enter-cancelled": {
    "prefix": "enterCancelledEvent",
    "body": ["@enter-cancelled=\"$1\"$0"],
    "description": "@enter-cancelled=''"
  },
  "leave-cancelled": {
    "prefix": "leaveCancelledEvent",
    "body": ["@leave-cancelled=\"$1\"$0"],
    "description": "@leave-cancelled='' (v-show only)"
  },
  "appear-cancelled": {
    "prefix": "appearCancelledEvent",
    "body": ["@appear-cancelled=\"$1\"$0"],
    "description": "@appear-cancelled=''"
  },
  "routerLink": {
    "prefix": "routerLink",
    "body": ["<router-link $1>$2</router-link>$0"],
    "description": "router-link element"
  },
  "routerLinkTo": {
    "prefix": "routerLinkTo",
    "body": ["<router-link to=\"$1\">$2</router-link>$0"],
    "description": "<router-link to=''></router-link>. router-link element"
  },
  "to": {
    "prefix": "to",
    "body": ["to=\"$1\"$0"],
    "description": "to=''"
  },
  "tag": {
    "prefix": "tag",
    "body": ["tag=\"$1\"$0"],
    "description": "tag=''"
  },
  "routerView": {
    "prefix": "routerView",
    "body": ["<router-view>$1</router-view>$0"],
    "description": "router-view element"
  },
  "nuxt": {
    "prefix": "nuxt",
    "body": ["<nuxt/>"],
    "description": "This component is used only in layouts to display the page components."
  },
  "nuxtChild": {
    "prefix": "nuxtChild",
    "body": ["<nuxt-child $1/>$0"],
    "description": "This component is used for displaying the children components in a nested route."
  },
  "nuxtLink": {
    "prefix": "nuxtLink",
    "body": ["<nuxt-link ${1|to,:to|}=\"$2\">$0</nuxt-link>"],
    "description": "This component is used to provide navigations between page components."
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/frameworks/vue/vue.json`:

```````json
{
  "templateLang": {
    "prefix": "templateLang",
    "body": [
      "<template lang=\"$1\">",
      "\t<div$2>",
      "\t\t$0",
      "\t</div>",
      "</template>"
    ],
    "description": "template element"
  },
  "script": {
    "prefix": "script",
    "body": ["<script>", "export default {", "\t$0", "}", "</script>"],
    "description": "script element"
  },
  "styleLang": {
    "prefix": "styleLang",
    "body": ["<style lang=\"$1\">", "\t$0", "</style>"],
    "description": "style element with lang attribute"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/frameworks/vue/pug.json`:

```````json
{
  "v-text": {
    "prefix": "vText",
    "body": ["v-text='${1:msg}'"],
    "description": "Expects: string"
  },
  "v-html": {
    "prefix": "vHtml",
    "body": ["v-html='${1:html}'"],
    "description": "Expects: string"
  },
  "v-show": {
    "prefix": "vShow",
    "body": ["v-show='${1:condition}'"],
    "description": "Expects: any"
  },
  "v-if": {
    "prefix": "vIf",
    "body": ["v-if='${1:condition}'"],
    "description": "Expects: any"
  },
  "v-else": {
    "prefix": "vElse",
    "body": ["v-else"],
    "description": "Does not expect expression. previous sibling element must have v-if or v-else-if."
  },
  "v-else-if": {
    "prefix": "vElseIf",
    "body": ["v-else-if='${1:condition}'"],
    "description": "Expects: any. previous sibling element must have v-if or v-else-if."
  },
  "v-for-without-key": {
    "prefix": "vForWithoutKey",
    "body": ["v-for='${1:item} in ${2:items}'"],
    "description": "Expects: Array | Object | number | string"
  },
  "v-for": {
    "prefix": "vFor",
    "body": ["v-for='${1:item} in ${2:items}' :key='${3:item.id}'"],
    "description": "Expects: Array | Object | number | string"
  },
  "v-on": {
    "prefix": "vOn",
    "body": ["v-on:${1:event}='${2:handle}'"],
    "description": "Expects: Function | Inline Statement"
  },
  "v-bind": {
    "prefix": "vBind",
    "body": ["v-bind$1='${2}'"],
    "description": "Expects: any (with argument) | Object (without argument)"
  },
  "v-model": {
    "prefix": "vModel",
    "body": ["v-model='${1:something}'"],
    "description": "Expects: varies based on value of form inputs element or output of components"
  },
  "v-pre": {
    "prefix": "vPre",
    "body": ["v-pre"],
    "description": "Does not expect expression"
  },
  "v-cloak": {
    "prefix": "vCloak",
    "body": ["v-cloak"],
    "description": "Does not expect expression"
  },
  "v-once": {
    "prefix": "vOnce",
    "body": ["v-once"],
    "description": "Does not expect expression"
  },
  "key": {
    "prefix": "key",
    "body": [":key='${1:key}'"],
    "description": "Expects: string. Children of the same common parent must have unique keys. Duplicate keys will cause render errors."
  },
  "ref": {
    "prefix": "ref",
    "body": ["ref='${1:reference}'$0"],
    "description": "Expects: string. ref is used to register a reference to an element or a child component. The reference will be registered under the parent component’s $refs object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance."
  },
  "slotA": {
    "prefix": "slotA",
    "body": ["slot='$1'$0"],
    "description": "slot=''. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to."
  },
  "slotE": {
    "prefix": "slotE",
    "body": ["slot"],
    "description": "<slot></slot>. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to."
  },
  "slotScope": {
    "prefix": "slotScope",
    "body": ["slot-scope='$1'$0"],
    "description": "Used to denote an element or component as a scoped slot. The attribute’s value should be a valid JavaScript expression that can appear in the argument position of a function signature. This means in supported environments you can also use ES2015 destructuring in the expression. Serves as a replacement for scope in 2.5.0+."
  },
  "scope": {
    "prefix": "scope",
    "body": ["scope='${1:this api replaced by slot-scope in 2.5.0+}'$0"],
    "description": "Used to denote a <template> element as a scoped slot, which is replaced by `slot-scope` in 2.5.0+."
  },
  "component": {
    "prefix": "component",
    "body": ["component(:is='${1:componentId}') $0"],
    "description": "component element"
  },
  "keep-alive": {
    "prefix": "keepAlive",
    "body": ["keep-alive$0"],
    "description": "keep-alive element"
  },
  "transition": {
    "prefix": "transition",
    "body": ["transition$0"],
    "description": "transition element"
  },
  "transition-group": {
    "prefix": "transitionGroup",
    "body": ["transition-group$0"],
    "description": "transition-group element"
  },
  "enter-class": {
    "prefix": "enterClass",
    "body": ["enter-class='$1'$0"],
    "description": "enter-class=''. Expects: string."
  },
  "leave-class": {
    "prefix": "leaveClass",
    "body": ["leave-class='$1'$0"],
    "description": "leave-class=''. Expects: string."
  },
  "appear-class": {
    "prefix": "appearClass",
    "body": ["appear-class='$1'$0"],
    "description": "appear-class=''. Expects: string."
  },
  "enter-to-class": {
    "prefix": "enterToClass",
    "body": ["enter-to-class='$1'$0"],
    "description": "enter-to-class=''. Expects: string."
  },
  "leave-to-class": {
    "prefix": "leaveToClass",
    "body": ["leave-to-class='$1'$0"],
    "description": "leave-to-class=''. Expects: string."
  },
  "appear-to-class": {
    "prefix": "appearToClass",
    "body": ["appear-to-class='$1'$0"],
    "description": "appear-to-class=''. Expects: string."
  },
  "enter-active-class": {
    "prefix": "enterActiveClass",
    "body": ["enter-active-class='$1'$0"],
    "description": "enter-active-class=''. Expects: string."
  },
  "leave-active-class": {
    "prefix": "leaveActiveClass",
    "body": ["leave-active-class='$1'$0"],
    "description": "leave-active-class=''. Expects: string."
  },
  "appear-active-class": {
    "prefix": "appearActiveClass",
    "body": ["appear-active-class='$1'$0"],
    "description": "appear-active-class=''. Expects: string."
  },
  "before-enter": {
    "prefix": "beforeEnterEvent",
    "body": ["@before-enter='$1'$0"],
    "description": "@before-enter=''"
  },
  "before-leave": {
    "prefix": "beforeLeaveEvent",
    "body": ["@before-leave='$1'$0"],
    "description": "@before-leave=''"
  },
  "before-appear": {
    "prefix": "beforeAppearEvent",
    "body": ["@before-appear='$1'$0"],
    "description": "@before-appear=''"
  },
  "enter": {
    "prefix": "enterEvent",
    "body": ["@enter='$1'$0"],
    "description": "@enter=''"
  },
  "leave": {
    "prefix": "leaveEvent",
    "body": ["@leave='$1'$0"],
    "description": "@leave=''"
  },
  "appear": {
    "prefix": "appearEvent",
    "body": ["@appear='$1'$0"],
    "description": "@appear=''"
  },
  "after-enter": {
    "prefix": "afterEnterEvent",
    "body": ["@after-enter='$1'$0"],
    "description": "@after-enter=''"
  },
  "after-leave": {
    "prefix": "afterLeaveEvent",
    "body": ["@after-leave='$1'$0"],
    "description": "@after-leave=''"
  },
  "after-appear": {
    "prefix": "afterAppearEvent",
    "body": ["@after-appear='$1'$0"],
    "description": "@after-appear=''"
  },
  "enter-cancelled": {
    "prefix": "enterCancelledEvent",
    "body": ["@enter-cancelled='$1'$0"],
    "description": "@enter-cancelled=''"
  },
  "leave-cancelled": {
    "prefix": "leaveCancelledEvent",
    "body": ["@leave-cancelled='$1'$0"],
    "description": "@leave-cancelled='' (v-show only)"
  },
  "appear-cancelled": {
    "prefix": "appearCancelledEvent",
    "body": ["@appear-cancelled='$1'$0"],
    "description": "@appear-cancelled=''"
  },
  "routerLink": {
    "prefix": "routerLink",
    "body": ["router-link $0"],
    "description": "router-link element"
  },
  "routerLinkTo": {
    "prefix": "routerLinkTo",
    "body": ["router-link(to='$1') $0"],
    "description": "router-link(to='') . router-link element"
  },
  "to": {
    "prefix": "to",
    "body": ["to='$1'$0"],
    "description": "to=''"
  },
  "tag": {
    "prefix": "tag",
    "body": ["tag='$1'$0"],
    "description": "tag=''"
  },
  "routerView": {
    "prefix": "routerView",
    "body": ["router-view $0"],
    "description": "router-view element"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/frameworks/vue/javascript.json`:

```````json
{
  "import": {
    "prefix": "import",
    "body": ["import $1 from '$2'"],
    "description": "import ... from ..."
  },
  "vue": {
    "prefix": "newVue",
    "body": ["new Vue({", "\t$1", "})"],
    "description": "new Vue()"
  },
  "silent": {
    "prefix": "VueConfigSilent",
    "body": ["Vue.config.silent = ${1:true}"],
    "description": "Vue.config.silent"
  },
  "optionMergeStrategies": {
    "prefix": "VueConfigOptionMergeStrategies",
    "body": ["Vue.config.optionMergeStrategies$1"],
    "description": "Vue.config.optionMergeStrategies"
  },
  "devtools": {
    "prefix": "VueConfigDevtools",
    "body": ["Vue.config.devtools = ${1:true}"],
    "description": "Vue.config.devtools"
  },
  "errorHandler": {
    "prefix": "VueConfigErrorHandler",
    "body": [
      "Vue.config.errorHandler = function (err, vm, info) {",
      "\t${1:// handle error}",
      "}"
    ],
    "description": "Vue.config.errorHandler"
  },
  "warnHandler": {
    "prefix": "VueConfigWarnHandler",
    "body": [
      "Vue.config.warnHandler = function (msg, vm, trace) {",
      "\t${1:// handle warn}",
      "}"
    ],
    "description": "Vue.config.warnHandler"
  },
  "ignoredElements": {
    "prefix": "VueConfigIgnoredElements",
    "body": ["Vue.config.ignoredElements = [", "\t'${1}'", "]$0"],
    "description": "Vue.config.ignoredElements"
  },
  "keyCodes": {
    "prefix": "VueConfigKeyCodes",
    "body": ["Vue.config.keyCodes = {", "\t${1:// camelCase won`t work}", "}"],
    "description": "Vue.config.keyCodes"
  },
  "performance": {
    "prefix": "VueConfigPerformance",
    "body": ["Vue.config.performance = ${1:true}"],
    "description": "Vue.config.performance"
  },
  "productionTip": {
    "prefix": "VueConfigProductionTip",
    "body": ["Vue.config.productionTip = ${1:false}"],
    "description": "Vue.config.productionTip"
  },
  "extend": {
    "prefix": "vueExtend",
    "body": ["Vue.extend({", "\ttemplate:${1:template}", "})"],
    "description": "Vue.extend( options )"
  },
  "nextTick": {
    "prefix": "VueNextTick",
    "body": ["Vue.nextTick({", "\t$1", "})"],
    "description": "Vue.nextTick( callback, [context] )"
  },
  "nextTickThen": {
    "prefix": "VueNextTickThen",
    "body": ["Vue.nextTick({", "\t$1", "}).then(function ($2) {", "\t$3", "})"],
    "description": "Vue.nextTick( callback, [context] ).then(function(){ })"
  },
  "set": {
    "prefix": "VueSet",
    "body": ["Vue.set(${1:target}, ${2:key}, ${3:value})"],
    "description": "Vue.set( target, key, value )"
  },
  "delete": {
    "prefix": "VueDelete",
    "body": ["Vue.delete(${1:target}, ${2:key})"],
    "description": "Vue.delete( target, key )"
  },
  "directive": {
    "prefix": "VueDirective",
    "body": ["Vue.directive(${1:id}${2:, [definition]})"],
    "description": "Vue.directive( id, [definition] )"
  },
  "filter": {
    "prefix": "VueFilter",
    "body": ["Vue.filter(${1:id}${2:, [definition]})"],
    "description": "Vue.filter( id, [definition] )"
  },
  "component": {
    "prefix": "VueComponent",
    "body": ["Vue.component(${1:id}${2:, [definition]})$0"],
    "description": "Vue.component( id, [definition] )"
  },
  "use": {
    "prefix": "VueUse",
    "body": ["Vue.use(${1:plugin})$0"],
    "description": "Vue.use( plugin )"
  },
  "mixin": {
    "prefix": "VueMixin",
    "body": ["Vue.mixin({${1:mixin}})"],
    "description": "Vue.mixin( mixin )"
  },
  "compile": {
    "prefix": "VueCompile",
    "body": ["Vue.compile(${1:template})"],
    "description": "Vue.compile( template )"
  },
  "observable": {
    "prefix": "VueObservable",
    "body": ["Vue.observable({${1:object}})"],
    "description": "Vue.observable( object )"
  },
  "version": {
    "prefix": "VueVersion",
    "body": ["Vue.version$0"],
    "description": "Vue.version.split('.')[]"
  },
  "data": {
    "prefix": "data",
    "body": ["data() {", "\treturn {", "\t\t$1", "\t}", "},$0"],
    "description": "The data object for the Vue instance."
  },
  "props": {
    "prefix": "props",
    "body": ["props"],
    "description": "A list/hash of attributes that are exposed to accept data from the parent component. "
  },
  "propsData": {
    "prefix": "propsData",
    "body": ["propsData"],
    "description": "Restriction: only respected in instance creation via `new`. Pass props to an instance during its creation. This is primarily intended to make unit testing easier."
  },
  "scopedSlots": {
    "prefix": "scopedSlots",
    "body": ["scopedSlots"],
    "description": "just a word"
  },
  "computed": {
    "prefix": "computed",
    "body": ["computed: {", "\t$1", "},$0"],
    "description": "Computed properties to be mixed into the Vue instance. "
  },
  "methods": {
    "prefix": "methods",
    "body": ["methods: {", "\t$1", "},$0"],
    "description": "Methods to be mixed into the Vue instance."
  },
  "watch": {
    "prefix": "watch",
    "body": ["watch: {", "\t$1", "},$0"],
    "description": "An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. Note that you should not use an arrow function to define a watcher."
  },
  "watchWithOptions": {
    "prefix": "watchWithOptions",
    "body": [
      "${1:key}: {",
      "\tdeep: ${2:true},",
      "\timmediate: ${3:true},",
      "\thandler: function (${4:val}, ${5:oldVal}) {",
      "\t\t$6",
      "\t}",
      "},$0"
    ],
    "description": "Vue Watcher with options."
  },
  "el": {
    "prefix": "el",
    "body": ["el"],
    "description": "just a word"
  },
  "template": {
    "prefix": "template",
    "body": ["template"],
    "description": "just a word"
  },
  "render": {
    "prefix": "render",
    "body": ["render(h) {", "\t$1", "},"],
    "description": "An alternative to string templates allowing you to leverage the full programmatic power of JavaScript."
  },
  "renderError": {
    "prefix": "renderError",
    "body": ["renderError(h, err) {", "\t$1", "},"],
    "description": "Provide an alternative render output when the default render function encounters an error."
  },
  "beforeCreate": {
    "prefix": "beforeCreate",
    "body": ["beforeCreate() {", "\t$1", "},"],
    "description": "Type: Function."
  },
  "created": {
    "prefix": "created",
    "body": ["created() {", "\t$1", "},"],
    "description": "Type: Function."
  },
  "beforeMount": {
    "prefix": "beforeMount",
    "body": ["beforeMount() {", "\t$1", "},"],
    "description": "Type: Function."
  },
  "mounted": {
    "prefix": "mounted",
    "body": ["mounted() {", "\t$1", "},"],
    "description": "Type: Function."
  },
  "beforeUpdate": {
    "prefix": "beforeUpdate",
    "body": ["beforeUpdate() {", "\t$1", "},"],
    "description": "Type: Function."
  },
  "updated": {
    "prefix": "updated",
    "body": ["updated() {", "\t$1", "},"],
    "description": "Type: Function."
  },
  "activated": {
    "prefix": "activated",
    "body": ["activated() {", "\t$1", "},"],
    "description": "Type: Function."
  },
  "deactivated": {
    "prefix": "deactivated",
    "body": ["deactivated() {", "\t$1", "},"],
    "description": "Type: Function."
  },
  "beforeDestroy": {
    "prefix": "beforeDestroy",
    "body": ["beforeDestroy() {", "\t$1", "},"],
    "description": "Type: Function."
  },
  "destroyed": {
    "prefix": "destroyed",
    "body": ["destroyed() {", "\t$1", "},"],
    "description": "Type: Function."
  },
  "errorCaptured": {
    "prefix": "errorCaptured",
    "body": ["errorCaptured: (err, vm, info) => {", "\t$1", "},"],
    "description": "Type: (err: Error, vm: Component, info: string) => ?boolean"
  },
  "directives": {
    "prefix": "directives",
    "body": ["directives"],
    "description": "just a word"
  },
  "filters": {
    "prefix": "filters",
    "body": ["filters"],
    "description": "just a word"
  },
  "componentWord": {
    "prefix": "component",
    "body": ["component"],
    "description": "just a word"
  },
  "components": {
    "prefix": "components",
    "body": ["components"],
    "description": "just a word"
  },
  "parent": {
    "prefix": "parent",
    "body": ["parent"],
    "description": "just a word"
  },
  "mixins": {
    "prefix": "mixins",
    "body": ["mixins"],
    "description": "just a word"
  },
  "extends": {
    "prefix": "extends",
    "body": ["extends"],
    "description": "just a word"
  },
  "provide": {
    "prefix": "provide",
    "body": ["provide"],
    "description": "just a word"
  },
  "inject": {
    "prefix": "inject",
    "body": ["inject"],
    "description": "just a word"
  },
  "name": {
    "prefix": "name",
    "body": ["name"],
    "description": "just a word"
  },
  "delimiters": {
    "prefix": "delimiters",
    "body": ["delimiters"],
    "description": "just a word"
  },
  "functional": {
    "prefix": "functional",
    "body": ["functional"],
    "description": "just a word"
  },
  "model": {
    "prefix": "model",
    "body": ["model"],
    "description": "just a word"
  },
  "inheritAttrs": {
    "prefix": "inheritAttrs",
    "body": ["inheritAttrs"],
    "description": "just a word"
  },
  "comments": {
    "prefix": "comments",
    "body": ["comments"],
    "description": "just a word"
  },
  "deep": {
    "prefix": "deep",
    "body": ["deep"],
    "description": "just a word"
  },
  "immediate": {
    "prefix": "immediate",
    "body": ["immediate"],
    "description": "just a word"
  },
  "vm.$data": {
    "prefix": "vmData",
    "body": ["${1|this,vm|}.\\$data$2"],
    "description": "Type: Object. Read only."
  },
  "vm.$props": {
    "prefix": "vmProps",
    "body": ["${1|this,vm|}.\\$props$2"],
    "description": "Type: Object. Read only."
  },
  "vm.$el": {
    "prefix": "vmEl",
    "body": ["${1|this,vm|}.\\$el$2"],
    "description": "Type: HTMLElement. Read only."
  },
  "vm.$options": {
    "prefix": "vmOptions",
    "body": ["${1|this,vm|}.\\$options$2"],
    "description": "Type: Object. Read only."
  },
  "vm.$parent": {
    "prefix": "vmParent",
    "body": ["${1|this,vm|}.\\$parent$2"],
    "description": "Type: Vue instance. Read only."
  },
  "vm.$root": {
    "prefix": "vmRoot",
    "body": ["${1|this,vm|}.\\$root$2"],
    "description": "Type: Vue instance. Read only."
  },
  "vm.$children": {
    "prefix": "vmChildren",
    "body": ["${1|this,vm|}.\\$children$2"],
    "description": "Type: Array<Vue instance>. Read only."
  },
  "vm.$slots": {
    "prefix": "vmSlots",
    "body": ["${1|this,vm|}.\\$slots$2"],
    "description": "Type: Object. Read only."
  },
  "vm.$scopedSlots": {
    "prefix": "vmScopedSlots",
    "body": ["${1|this,vm|}.\\$scopedSlots.default({", "\t$2", "})"],
    "description": "Type: { [name: string]: props => VNode | Array<VNode> }. Read only."
  },
  "vm.$refs": {
    "prefix": "vmRefs",
    "body": ["${1|this,vm|}.\\$refs$2"],
    "description": "Type: Object. Read only."
  },
  "vm.$isServer": {
    "prefix": "vmIsServer",
    "body": ["${1|this,vm|}.\\$isServer$2"],
    "description": "Type: boolean. Read only."
  },
  "vm.$attrs": {
    "prefix": "vmAttrs",
    "body": ["${1|this,vm|}.\\$attrs$2"],
    "description": "Type: { [key: string]: string }. Read only."
  },
  "vm.$listeners": {
    "prefix": "vmListeners",
    "body": ["${1|this,vm|}.\\$listeners$2"],
    "description": "Type: { [key: string]: Function | Array<Function> }. Read only."
  },
  "vm.$watch": {
    "prefix": "vmWatch",
    "body": [
      "${1|this,vm|}.\\$watch(${2:expOrFn}, ${3:callback}${4:, [options]})"
    ],
    "description": "vm.$watch( expOrFn, callback, [options] )\n Arguments:\n {string | Function} expOrFn\n {Function | Object} callback\n {Object} [options]\n {boolean} [options.deep]\n\t {boolean} [options.immediate]"
  },
  "vm.$set": {
    "prefix": "vmSet",
    "body": ["${1|this,vm|}.\\$set(${2:target}, ${3:key}, ${4:value})"],
    "description": "vm.$set( target, key, value ). This is the alias of the global Vue.set."
  },
  "vm.$delete": {
    "prefix": "vmDelete",
    "body": [
      "${1|this,vm|}.\\$delete(${2:target}, ${3:key}). This is the alias of the global Vue.delete."
    ],
    "description": "vm.$delete( target, key )"
  },
  "vm.$on": {
    "prefix": "vmOn",
    "body": ["${1|this,vm|}.\\$on('${2:event}', ${3:callback})$4"],
    "description": "vm.$on( event, callback )"
  },
  "vm.$once": {
    "prefix": "vmOnce",
    "body": ["${1|this,vm|}.\\$once('${2:event}', ${3:callback})$4"],
    "description": "vm.$once( event, callback )"
  },
  "vm.$off": {
    "prefix": "vmOff",
    "body": ["${1|this,vm|}.\\$off('${2:event}', ${3:callback})$4"],
    "description": "vm.$off( [event, callback] )"
  },
  "vm.$emit": {
    "prefix": "vmEmit",
    "body": ["${1|this,vm|}.\\$emit('${2:event}'${3:, […args]})$4"],
    "description": "vm.$emit( event, […args] )"
  },
  "vm.$mount": {
    "prefix": "vmMount",
    "body": ["${1|this,vm|}.\\$mount('$2')"],
    "description": "vm.$mount( [elementOrSelector] )"
  },
  "vm.$forceUpdate": {
    "prefix": "vmForceUpdate",
    "body": ["${1|this,vm|}.\\$forceUpdate()"],
    "description": "vm.$forceUpdate()"
  },
  "vm.$nextTick": {
    "prefix": "vmNextTick",
    "body": ["${1|this,vm|}.\\$nextTick(${2:callback})"],
    "description": "vm.$nextTick( callback )"
  },
  "vm.$destroy": {
    "prefix": "vmDestroy",
    "body": ["${1|this,vm|}.\\$destroy()$2"],
    "description": "vm.$destroy()"
  },
  "renderer": {
    "prefix": "renderer",
    "body": [
      "const ${1:renderer} = require('vue-server-renderer').createRenderer()$0"
    ],
    "description": "require('vue-server-renderer').createRenderer()"
  },
  "createRenderer": {
    "prefix": "createRenderer",
    "body": ["createRenderer({", "\t$1", "})"],
    "description": "createRenderer({ })"
  },
  "renderToString": {
    "prefix": "renderToString",
    "body": ["renderToString"],
    "description": "just a word"
  },
  "renderToStream": {
    "prefix": "renderToStream",
    "body": ["renderToStream"],
    "description": "just a word"
  },
  "createBundleRenderer": {
    "prefix": "createBundleRenderer",
    "body": ["createBundleRenderer"],
    "description": "just a word"
  },
  "bundleRenderer.renderToString": {
    "prefix": "bundleRendererRenderToString",
    "body": ["bundleRenderer.renderToString"],
    "description": "just a word"
  },
  "bundleRenderer.renderToStream": {
    "prefix": "bundleRendererRenderToStream",
    "body": ["bundleRenderer.renderToStream"],
    "description": "just a word"
  },
  "preventDefault": {
    "prefix": "preventDefault",
    "body": ["preventDefault();", "$1"],
    "description": "preventDefault()"
  },
  "stopPropagation": {
    "prefix": "stopPropagation",
    "body": ["stopPropagation();", "$1"],
    "description": "stopPropagation()"
  },
  "importVueRouter": {
    "prefix": "importVueRouter",
    "body": ["import VueRouter from 'vue-router'"],
    "description": "import VueRouter from 'vue-router'"
  },
  "newVueRouter": {
    "prefix": "newVueRouter",
    "body": ["const ${1:router} = new VueRouter({", "\t$2", "})$0"],
    "description": "const router = newVueRouter({ })"
  },
  "routerBeforeEach": {
    "prefix": "routerBeforeEach",
    "body": [
      "${1:router}.beforeEach((to, from, next) => {",
      "\t${2:// to and from are both route objects. must call `next`.}",
      "})$0"
    ],
    "description": "router.beforeEach"
  },
  "routerBeforeResolve": {
    "prefix": "routerBeforeResolve",
    "body": [
      "${1:router}.beforeResolve((to, from, next) => {",
      "\t${2:// to and from are both route objects. must call `next`.}",
      "})$0"
    ],
    "description": "router.beforeResolve"
  },
  "routerAfterEach": {
    "prefix": "routerAfterEach",
    "body": [
      "${1:router}.afterEach((to, from) => {",
      "\t${2:// to and from are both route objects.}",
      "})$0"
    ],
    "description": "router.afterEach"
  },
  "routerPush": {
    "prefix": "routerPush",
    "body": ["${1:router}.push($2)$0"],
    "description": "router.push()"
  },
  "routerReplace": {
    "prefix": "routerReplace",
    "body": ["${1:router}.replace($2)$0"],
    "description": "router.replace()"
  },
  "routerGo": {
    "prefix": "routerGo",
    "body": ["${1:router}.go($2)$0"],
    "description": "router.go()"
  },
  "routerBack": {
    "prefix": "routerBack",
    "body": ["${1:router}.back($2)$0"],
    "description": "router.back()"
  },
  "routerForward": {
    "prefix": "routerForward",
    "body": ["${1:router}.forward($2)$0"],
    "description": "router.forward()"
  },
  "routerGetMatchedComponents": {
    "prefix": "routerGetMatchedComponents",
    "body": ["${1:router}.getMatchedComponents($2)$0"],
    "description": "router.getMatchedComponents()"
  },
  "routerResolve": {
    "prefix": "routerResolve",
    "body": ["${1:router}.resolve($2)$0"],
    "description": "router.resolve()"
  },
  "routerAddRoutes": {
    "prefix": "routerAddRoutes",
    "body": ["${1:router}.addRoutes($2)$0"],
    "description": "router.addRoutes()"
  },
  "routerOnReady": {
    "prefix": "routerOnReady",
    "body": ["${1:router}.onReady($2)$0"],
    "description": "router.onReady()"
  },
  "routerOnError": {
    "prefix": "routerOnError",
    "body": ["${1:router}.onError($2)$0"],
    "description": "router.onError()"
  },
  "routes": {
    "prefix": "routes",
    "body": ["routes: [$1]$0"],
    "description": "routes: []"
  },
  "beforeEnter": {
    "prefix": "beforeEnter",
    "body": ["beforeEnter: (to, from, next) => {", "\t${1:// ...}", "}"],
    "description": "beforeEnter: (to, from, next) => { }"
  },
  "beforeRouteEnter": {
    "prefix": "beforeRouteEnter",
    "body": ["beforeRouteEnter (to, from, next) {", "\t${1:// ...}", "}"],
    "description": "beforeRouteEnter (to, from, next) { }"
  },
  "beforeRouteLeave": {
    "prefix": "beforeRouteLeave",
    "body": ["beforeRouteLeave (to, from, next) {", "\t${1:// ...}", "}"],
    "description": "beforeRouteLeave (to, from, next) { }"
  },
  "scrollBehavior": {
    "prefix": "scrollBehavior",
    "body": [
      "scrollBehavior (to, from, savedPosition) {",
      "\t${1:// ...}",
      "}"
    ],
    "description": "scrollBehavior (to, from, savedPosition) { }"
  },
  "path": {
    "prefix": "path",
    "body": ["path"],
    "description": "just a word"
  },
  "alias": {
    "prefix": "alias",
    "body": ["alias"],
    "description": "just a word"
  },
  "mode": {
    "prefix": "mode",
    "body": ["mode"],
    "description": "just a word"
  },
  "children": {
    "prefix": "children",
    "body": ["children"],
    "description": "just a word"
  },
  "meta": {
    "prefix": "meta",
    "body": ["meta"],
    "description": "just a word"
  },
  "newVuexStore": {
    "prefix": "newVuexStore",
    "body": ["const ${1:store} = new Vuex.Store({", "\t${2:// ...}", "})"],
    "description": "const store = new Vuex.Store({ })"
  },
  "state": {
    "prefix": "state",
    "body": ["state"],
    "description": "just a word"
  },
  "getters": {
    "prefix": "getters",
    "body": ["getters"],
    "description": "just a word"
  },
  "mutations": {
    "prefix": "mutations",
    "body": ["mutations"],
    "description": "just a word"
  },
  "actions": {
    "prefix": "actions",
    "body": ["actions"],
    "description": "just a word"
  },
  "modules": {
    "prefix": "modules",
    "body": ["modules"],
    "description": "just a word"
  },
  "plugins": {
    "prefix": "plugins",
    "body": ["plugins"],
    "description": "just a word"
  },
  "commit": {
    "prefix": "commit",
    "body": ["commit"],
    "description": "just a word"
  },
  "dispatch": {
    "prefix": "dispatch",
    "body": ["dispatch"],
    "description": "just a word"
  },
  "replaceState": {
    "prefix": "replaceState",
    "body": ["replaceState"],
    "description": "just a word"
  },
  "subscribe": {
    "prefix": "subscribe",
    "body": ["subscribe"],
    "description": "just a word"
  },
  "registerModule": {
    "prefix": "registerModule",
    "body": ["registerModule"],
    "description": "just a word"
  },
  "unregisterModule": {
    "prefix": "unregisterModule",
    "body": ["unregisterModule"],
    "description": "just a word"
  },
  "hotUpdate": {
    "prefix": "hotUpdate",
    "body": ["hotUpdate"],
    "description": "just a word"
  },
  "mapState": {
    "prefix": "mapState",
    "body": ["mapState"],
    "description": "just a word"
  },
  "mapGetters": {
    "prefix": "mapGetters",
    "body": ["mapGetters"],
    "description": "just a word"
  },
  "mapActions": {
    "prefix": "mapActions",
    "body": ["mapActions"],
    "description": "just a word"
  },
  "mapMutations": {
    "prefix": "mapMutations",
    "body": ["mapMutations"],
    "description": "just a word"
  },
  "asyncData": {
    "prefix": "asyncData",
    "body": [
      "asyncData({${1:isDev}${2:, route}${3:, store}${4:, env}${5:, params}${6:, query}${7:, req}${8:, res}${9:, redirect}${10:, error}}) {",
      "\t$11",
      "},"
    ],
    "description": "Type: Function."
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/frameworks/ejs.json`:

```````json
{
  "EJS No Output": {
    "prefix": "ejs",
    "body": ["<% $1 %> $2"],
    "description": "EJS No Output"
  },
  "EJS Output Value": {
    "prefix": "ejsout",
    "body": ["<%= $1 %> $2"],
    "description": "EJS outputs no value"
  },
  "EJS Output Escaped": {
    "prefix": "ejsesc",
    "body": ["<%- $1 %> $2"],
    "description": "EJS outputs value"
  },
  "EJS Comment": {
    "prefix": "ejscom",
    "body": ["<%# $1 %> $2"],
    "description": "EJS comment tag with no output"
  },
  "EJS Literal": {
    "prefix": "ejslit",
    "body": ["<%% $1 %> $2"],
    "description": "EJS outputs a literal '<%'"
  },
  "EJS Include": {
    "prefix": "ejsinc",
    "body": ["<% include $1 %> $2"],
    "description": "EJS include statement"
  },
  "EJS For Loop": {
    "prefix": "ejsfor",
    "body": [
      "<% for( let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++ ) { %>",
      "$3",
      "<% } %>"
    ],
    "description": "EJS For Loop"
  },
  "EJS ForEach": {
    "prefix": "ejseach",
    "body": ["<% ${1:array}.forEach(${2:element} => { %>", " $3", "<% }) %>"],
    "description": "EJS ForEach Loop"
  },
  "EJS If Statement": {
    "prefix": "ejsif",
    "body": ["<% if (${1:condition}) { %>", " $2", "<% } %>"],
    "description": "EJS if statement"
  },
  "EJS Else Statement": {
    "prefix": "ejselse",
    "body": ["<% } else { %>", " $1"],
    "description": "EJS if statement"
  },
  "EJS Else If Statement": {
    "prefix": "ejselif",
    "body": ["<% } else if ({$1:condition}) { %>", " $2"],
    "description": "EJS if statement"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/frameworks/jekyll.json`:

```````json
{
  "Show": {
    "prefix": "show",
    "description": "Output markup: {{ }}",
    "body": "{{ $1 }}"
  },

  "Execute": {
    "prefix": "execute",
    "description": "Tag markup: {%- -%}",
    "body": "{%- $1 -%}"
  },

  "Tag assign": {
    "prefix": "assign",
    "description": "Variable tag: assign",
    "body": ["{%- assign ${variable} = ${value} -%}"]
  },

  "Tag break": {
    "prefix": "break",
    "description": "Iteration tag: break",
    "body": ["{%- break -%}"]
  },

  "Tag capture": {
    "prefix": "capture",
    "description": "Variable tag: capture",
    "body": ["{%- capture ${variable} -%}${code:}{%- endcapture -%}"]
  },

  "Tag case": {
    "prefix": "case",
    "description": "Control flow tag: case",
    "body": [
      "{%- case ${variable} -%}",
      "\t{%- when ${condition} -%}",
      "\t\t${code1:}",
      "\t{%- else -%}",
      "\t\t${code2:}",
      "{%- endcase -%}"
    ]
  },

  "Tag comment": {
    "prefix": "comment",
    "description": "Control flow tag: case",
    "body": ["{%- comment -%}${description:}{%- endcomment -%}"]
  },

  "Tag context variable": {
    "prefix": "convar",
    "description": "Context Variable",
    "body": ["{{ ${variable:} }}"]
  },

  "Tag continue": {
    "prefix": "continue",
    "description": "Iteration tag: continue",
    "body": ["{%- continue -%}"]
  },

  "Tag cycle": {
    "prefix": "cycle",
    "description": "Iteration tag: cycle",
    "body": ["{%- cycle '${0:odd}', '${1:even}' -%}"]
  },

  "Tag collection directory": {
    "prefix": "cdirp",
    "description": "The full path to the collection's source direcotry",
    "body": ["{{ site.${my_collection}.directory }}"]
  },

  "Tag collection relative path": {
    "prefix": "crelp",
    "description": "The path to the document's source file realtive to the site source",
    "body": ["{{ site.collections.${my_collection}.relative_path }}"]
  },

  "Tag decrement": {
    "prefix": "decrement",
    "description": "Variable tag: decrement",
    "body": ["{%- decrement ${variable} -%}"]
  },

  "Tag for": {
    "prefix": "for",
    "description": "Iteration tag: for",
    "body": [
      "{%- for ${item} in ${collection} -%}",
      "\t${code:}",
      "{%- endfor -%}"
    ]
  },

  "Tag increment": {
    "prefix": "increment",
    "description": "Variable tag: increment",
    "body": ["{%- increment ${variable} -%}"]
  },

  "Tag if": {
    "prefix": "if",
    "description": "Control flow tag: if",
    "body": ["{%- if ${condition} -%}", "\t${code:}", "{%- endif -%}"]
  },

  "Tag else": {
    "prefix": "else",
    "description": "Control flow tag: else",
    "body": ["{%- else -%}"]
  },

  "Tag elsif": {
    "prefix": "elsif",
    "description": "Control flow tag: elsif",
    "body": ["{%- elsif ${condition} -%}"]
  },

  "Tag if else": {
    "prefix": "ifelse",
    "description": "Control flow tag: if else",
    "body": [
      "{%- if ${condition} -%}",
      "\t${code1:}",
      "{%- else -%}",
      "\t${code2:}",
      "{%- endif -%}"
    ]
  },

  "Tag gist": {
    "prefix": "gist",
    "description": "Add a gist code block",
    "body": ["{%- gist ${gist:user/gist-id} -%}"]
  },

  "Tag highlight": {
    "prefix": "highlight",
    "description": "Syntax tag: highlight",
    "body": [
      "{%- highlight ${lang:javascript} -%}",
      "\t\t${code:}",
      "{%- endhighlight -%}"
    ]
  },

  "Tag include": {
    "prefix": "include",
    "description": "Tag: include",
    "body": ["{%- include ${snippet} -%}"]
  },

  "Site Vairable Date": {
    "prefix": "date",
    "description": "Tag: site.date",
    "body": ["{{ site.date | date: '${format: %b %d, %Y}' }}"]
  },

  "Tag include relative": {
    "prefix": "increl",
    "description": "Tag: include relative",
    "body": ["{%- include_relative '${file:}' -%}"]
  },

  "Tag Post URL": {
    "prefix": "posturl",
    "description": "Tag: post_url",
    "body": ["{%- post_url ${url:} -%}"]
  },

  "Tag unless": {
    "prefix": "unless",
    "description": "Control flow tag: unless",
    "body": ["{%- unless ${condition} -%}", "\t${code:}", "{%- endunless -%}"]
  },

  "Tag when": {
    "prefix": "when",
    "description": "Control flow tag: when",
    "body": ["{%- when ${condition} -%}", "${code:}"]
  },

  "Tag Option limit": {
    "prefix": "limit",
    "description": "For loops option",
    "body": ["limit: ${limit:5}"]
  },

  "Tag Option offset": {
    "prefix": "offset",
    "description": "For loops option",
    "body": ["offset: ${offset:0}"]
  },

  "Tag Option reversed": {
    "prefix": "reversed",
    "description": "For loops option",
    "body": ["reversed"]
  },

  "Tag raw": {
    "prefix": "raw",
    "description": "Tag: raw",
    "body": ["{%- raw -%}${code:}{%- endraw -%}"]
  },

  "Tag paginate next or previous page": {
    "prefix": "paginate",
    "description": "Tag: paginate next or previous page",
    "body": ["{{ paginator.${next:previous}_page }}"]
  },

  "Filter jsonify": {
    "prefix": "json",
    "description": "Array filter: jsonify",
    "body": "| jsonify }}'"
  },

  "Filter join": {
    "prefix": "join",
    "description": "Array filter: join",
    "body": "| join: '${seperator:, }}'"
  },

  "Filter first": {
    "prefix": "first",
    "description": "Array filter: first",
    "body": "| first"
  },

  "Filter last": {
    "prefix": "last",
    "description": "Array filter: last",
    "body": "| last"
  },

  "Filter map": {
    "prefix": "map",
    "description": "Array filter: map",
    "body": "| map: '${key}'"
  },

  "Filter size": {
    "prefix": "size",
    "description": "Array filter: size",
    "body": "| size"
  },

  "Filter sort": {
    "prefix": "sort",
    "description": "Array filter: sort",
    "body": "| sort"
  },

  "Filter uniq": {
    "prefix": "uniq",
    "description": "Array filter: uniq",
    "body": "| uniq"
  },

  "Filter ceil": {
    "prefix": "ceil",
    "description": "Math filter: ceil",
    "body": "| ceil"
  },

  "Filter divided by": {
    "prefix": "divided_by",
    "description": "Math filter: divided by",
    "body": "| divided_by: ${divided_by:2}"
  },

  "Filter floor": {
    "prefix": "floor",
    "description": "Math filter: floor",
    "body": "| floor"
  },

  "Filter minus": {
    "prefix": "minus",
    "description": "Math filter: minus",
    "body": "| minus: ${minus:1}"
  },

  "Filter modulo": {
    "prefix": "modulo",
    "description": "Math filter: modulo",
    "body": "| modulo: ${modulo:2}"
  },

  "Filter plus": {
    "prefix": "plus",
    "description": "Math filter: plus",
    "body": "| plus: ${plus:1}"
  },

  "Filter round": {
    "prefix": "round",
    "description": "Math filter: round",
    "body": "| round: ${round:0}"
  },

  "Filter times": {
    "prefix": "times",
    "description": "Math filter: times",
    "body": "| times: ${times:1}"
  },

  "Filter append": {
    "prefix": "append",
    "description": "String filter: append",
    "body": "| append: '${string}' }}"
  },

  "Filter capitalize": {
    "prefix": "capitalize",
    "description": "String filter: capitalize",
    "body": "| capitalize }}"
  },

  "Filter downcase": {
    "prefix": "downcase",
    "description": "String filter: downcase",
    "body": "| downcase }}"
  },

  "Filter escape": {
    "prefix": "escape",
    "description": "String filter: escape",
    "body": "| escape }}"
  },

  "Filter markdownify": {
    "prefix": "markdown",
    "description": "String filter: markdownify",
    "body": "| markdownify }}"
  },

  "Filter prepend": {
    "prefix": "prepend",
    "description": "String filter: prepend",
    "body": "| prepend: '${string}' }}"
  },

  "Filter remove": {
    "prefix": "remove",
    "description": "String filter: remove",
    "body": "| remove: '${string}' }}"
  },

  "Filter remove first": {
    "prefix": "remove_first",
    "description": "String filter: remove first",
    "body": "| remove_first: '${string}' }}"
  },

  "Filter replace": {
    "prefix": "replace",
    "description": "String filter: replace",
    "body": "| replace: '${target}', '${replace}' }}"
  },

  "Filter replace first": {
    "prefix": "replace_first",
    "description": "String filter: replace first",
    "body": "| replace_first: '${target}', '${replace}' }}"
  },

  "Filter slice": {
    "prefix": "slice",
    "description": "String filter: slice",
    "body": "| slice: ${from:0}, ${to:5} }}"
  },

  "Filter slice single character": {
    "prefix": "slice_single",
    "description": "String filter: slice with single parameter",
    "body": "| slice: ${at} }}"
  },

  "Filter split": {
    "prefix": "split",
    "description": "String filter: split",
    "body": "| split: '${splitter:,}' }}"
  },

  "Filter strip": {
    "prefix": "strip",
    "description": "String filter: strip",
    "body": "| strip }}"
  },

  "Filter lstrip": {
    "prefix": "lstrip",
    "description": "String filter: lstrip",
    "body": "| lstrip }}"
  },

  "Filter rstrip": {
    "prefix": "rstrip",
    "description": "String filter: rstrip",
    "body": "| rstrip }}"
  },

  "Filter strip html": {
    "prefix": "strip_html",
    "description": "String filter: strip html",
    "body": "| strip_html }}"
  },

  "Filter strip newlines": {
    "prefix": "strip_newlines",
    "description": "String filter: strip newlines",
    "body": "| strip_newlines }}"
  },

  "Filter truncate": {
    "prefix": "truncate",
    "description": "String filter: truncate",
    "body": "| truncate: ${length:20}, '${ellipsis:...}' }}"
  },

  "Filter truncatewords": {
    "prefix": "truncatewords",
    "description": "String filter: truncatewords",
    "body": "| truncatewords: ${length:5}, '${ellipsis:...}' }}"
  },

  "Filter upcase": {
    "prefix": "upcase",
    "description": "String filter: upcase }}",
    "body": "| upcase }}"
  },

  "Filter url encode": {
    "prefix": "url_encode",
    "description": "String filter: url encode",
    "body": "| url_encode }}"
  },

  "Filter uri escape": {
    "prefix": "uri_escape",
    "description": "String filter: uri escape",
    "body": "| uri_escape }}"
  },

  "Filter xml escape": {
    "prefix": "xml_escape",
    "description": "String filter: xml escape",
    "body": "| xml_escape }}"
  },

  "Front Matter": {
    "prefix": "fm",
    "description": "Add front matter",
    "body": [
      "---",
      "layout: ${layout:default}",
      "title: ${title}",
      "categories: ${category}",
      "permalink: ${path}",
      "tags: ${tag}",
      "excerpt: ${description}",
      "---"
    ]
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/java.json`:

```````json
{
  "main": {
    "prefix": "main",
    "body": ["public static void main(String[] args) {", "\t$0", "}"],
    "description": "Public static main method"
  },
  "class": {
    "prefix": "class",
    "body": ["public class ${TM_FILENAME_BASE} {", "\t$0", "}"],
    "description": "Public class"
  },
  "sysout": {
    "prefix": "sysout",
    "body": ["System.out.println($0);"],
    "description": "Print to standard out"
  },
  "syserr": {
    "prefix": "syserr",
    "body": ["System.err.println($0);"],
    "description": "Print to standard err"
  },
  "fori": {
    "prefix": "fori",
    "body": [
      "for (${1:int} ${2:i} = ${3:0}; $2 < ${4:max}; $2++) {",
      "\t$0",
      "}"
    ],
    "description": "Indexed for loop"
  },
  "foreach": {
    "prefix": "foreach",
    "body": ["for (${1:type} ${2:var} : ${3:iterable}) {", "\t$0", "}"],
    "description": "Enhanced for loop"
  },
  "Public constructor": {
    "prefix": "ctor",
    "body": ["public ${1:${TM_FILENAME_BASE}}($2) {", "\t${0:super();}", "}"],
    "description": "Public constructor"
  },
  "if": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "if statement"
  },
  "ifelse": {
    "prefix": "ifelse",
    "body": ["if (${1:condition}) {", "\t$2", "} else {", "\t$0", "}"],
    "description": "if/else statement"
  },
  "ifnull": {
    "prefix": "ifnull",
    "body": ["if (${1:condition} == null) {", "\t$0", "}"],
    "description": "if statement checking for null"
  },
  "ifnotnull": {
    "prefix": "ifnotnull",
    "body": ["if (${1:condition} != null) {", "\t$0", "}"],
    "description": "if statement checking for not null"
  },
  "trycatch": {
    "prefix": "try_catch",
    "body": [
      "try {",
      "\t$1",
      "} catch (${2:Exception} ${3:e}) {",
      "\t$4//${0:TODO}: handle exception",
      "}"
    ],
    "description": "try/catch block"
  },
  "tryresources": {
    "prefix": "try_resources",
    "body": [
      "try ($1) {",
      "\t$2",
      "} catch (${3:Exception} ${4:e}) {",
      "\t$5//${0:TODO}: handle exception",
      "}"
    ]
  },
  "private_method": {
    "prefix": "private_method",
    "body": ["private ${1:void} ${2:name}($3) {", "\t$0", "}"],
    "description": "private method"
  },
  "Public method": {
    "prefix": "public_method",
    "body": ["public ${1:void} ${2:name}(${3}) {", "\t$0", "}"],
    "description": "public method"
  },
  "Private static method": {
    "prefix": "private_static_method",
    "body": ["private static ${1:Type} ${2:name}(${3}) {", "\t$0", "}"],
    "description": "private static method"
  },
  "Public static method": {
    "prefix": "public_static_method",
    "body": ["public static ${1:void} ${2:name}(${3}) {", "\t$0", "}"],
    "description": "public static method"
  },
  "Protected Method": {
    "prefix": "protected_method",
    "body": ["protected ${1:void} ${2:name}(${3}) {", "\t$0", "}"],
    "description": "Protected method"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "While Statement"
  },
  "Do-While Statement": {
    "prefix": "dowhile",
    "body": ["do {", "\t$0", "} while (${1:condition});"],
    "description": "Do-While Statement"
  },
  "newObject": {
    "prefix": "new",
    "body": ["${0:Object} ${1:foo} = new ${0:Object}();"],
    "description": "Create new Object"
  },
  "Public field": {
    "prefix": "public_field",
    "body": ["public ${1:String} ${2:name};"],
    "description": "Public field"
  },
  "Private field": {
    "prefix": "private_field",
    "body": ["private ${1:String} ${2:name};"],
    "description": "Private field"
  },
  "Protected field": {
    "prefix": "protected_field",
    "body": ["protected ${1:String} ${2:name};"],
    "description": "Protected field"
  },
  "package": {
    "prefix": "package",
    "body": ["package ${1:PackageName}"],
    "description": "Package statement"
  },
  "import": {
    "prefix": "import",
    "body": ["import ${1:PackageName}"],
    "description": "Import statement"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/haskell.json`:

```````json
{
  "case": {
    "prefix": ["case"],
    "body": [
      "case ${1:expression} of",
      "\t${2:case1} -> ${3:result}",
      "\t${4:case2} -> ${5:result}$0"
    ],
    "description": "Case statement"
  },
  "block_comment": {
    "prefix": ["--", "comment", "block_comment"],
    "body": ["{- $0 -}"],
    "description": "Block Comment"
  },
  "data_inline": {
    "prefix": ["data inline"],
    "body": ["data ${1:type} = ${2:data}$0 ${3:deriving (${4:Show, Eq})}"],
    "description": "Inline data"
  },
  "data_record": {
    "prefix": ["data record"],
    "body": [
      "data ${1:Type} = $1",
      "\t{ ${2:field} :: ${3:Type}",
      "\t, ${4:field} :: ${5:Type}$0",
      "\t} ${6:deriving (${7:Show, Eq})}"
    ],
    "description": "Data record"
  },
  "fn": {
    "prefix": ["fns", "simple function"],
    "body": [
      "${1:f} :: ${2:a} ${3:-> ${4:b}}",
      "$1 ${5:x} = ${6:undefined}$0 "
    ],
    "description": "Simple function"
  },
  "fn_clause": {
    "prefix": ["fnc", "clause function"],
    "body": [
      "${1:f} :: ${2:a} ${3:-> ${4:b}}",
      "$1 ${5:pattern} = ${7:undefined}",
      "$1 ${6:pattern} = ${8:undefined}$0"
    ],
    "description": "Clause function"
  },
  "fn_guarded": {
    "prefix": ["fng", "guarded function"],
    "body": [
      "${1:f} :: ${2:a} ${3:-> ${4:b}}",
      "$1 ${5:x}",
      "\t| ${6:condition} = ${8:undefined}",
      "\t| ${7:condition} = ${9:undefined}$0"
    ],
    "description": "Guarded function"
  },
  "fn_where": {
    "prefix": ["fnw", "where function"],
    "body": [
      "${1:f} :: ${2:a} ${3:-> ${4:b}}",
      "$1 ${5:x} = ${6:undefined}$0",
      "\twhere",
      "\t\t${7:exprs}"
    ],
    "description": "Function with where"
  },
  "get": {
    "prefix": ["get"],
    "body": ["${1:x} <- ${2:undefined}$0"],
    "description": "Monadic get"
  },
  "if_inline": {
    "prefix": ["if inline"],
    "body": ["if ${1:condition} then ${2:undefined} else ${3:undefined}$0,"],
    "description": "If inline"
  },
  "if": {
    "prefix": ["if simple"],
    "body": [
      "if ${1:condition}",
      "\tthen ${2:undefined}",
      "\telse ${3:undefined}$0"
    ],
    "description": "If block"
  },
  "import": {
    "prefix": ["import simple"],
    "body": ["import ${1:module} ${2:(${3:f})}$0"],
    "description": "Simple import"
  },
  "import_qualified": {
    "prefix": ["import qual"],
    "body": ["import qualified ${1:module} as ${2:name}"],
    "description": "Qualified import"
  },
  "instance": {
    "prefix": ["inst"],
    "body": [
      "instance ${1:Class} ${2:Data} where",
      "\t${3:f} = ${4:undefined}$0"
    ],
    "description": "typeclass instance"
  },
  "lambda": {
    "prefix": ["\\", "lambda"],
    "body": ["\\${1:x} -> ${2:undefined}$0"],
    "description": "lambda function"
  },
  "pragma": {
    "prefix": ["lang"],
    "body": ["{-# LANGUAGE ${1:extension} #-}$0"],
    "description": "Language extension pragma"
  },
  "let": {
    "prefix": ["let"],
    "body": ["let ${1:x} = ${2:undefined}$0"],
    "description": "let statement"
  },
  "main": {
    "prefix": ["main"],
    "body": [
      "module Main where",
      "",
      "",
      "main :: IO ()",
      "main = do",
      "\t${1:undefined}$0",
      "return ()"
    ],
    "description": "main module"
  },
  "module": {
    "prefix": ["mods", "mod simple"],
    "body": ["module ${1:mod} where$0"],
    "description": "simple module"
  },
  "module exports": {
    "prefix": ["modu", "mod exports"],
    "body": [
      "module ${1:mod} (",
      "\t\t${2:export}",
      "\t${3:, ${4:export}}",
      ") where$0"
    ],
    "description": "simple module with exports"
  },
  "newtype": {
    "prefix": ["new"],
    "body": [
      "newtype ${1:Type} ${2:a} = $1 { un$1 :: ${3:a} } ${4:deriving (${5:Show, Eq})}$0"
    ],
    "description": "Newtype definition"
  },
  "opt pragma": {
    "prefix": ["opt"],
    "body": ["{-# OPTIONS_GHC ${1:opt} #-}$0"],
    "description": "GHC options pragma"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/latex.json`:

```````json
{
  "item": {
    "prefix": "item",
    "body": "\n\\item ",
    "description": "\\item on a newline"
  },
  "subscript": {
    "prefix": "__",
    "body": "_{${1:${TM_SELECTED_TEXT}}}",
    "description": "subscript"
  },
  "superscript": {
    "prefix": "**",
    "body": "^{${1:${TM_SELECTED_TEXT}}}",
    "description": "superscript"
  },
  "etc": {
    "prefix": "...",
    "body": "\\dots",
    "description": "\\dots"
  },
  "cdot": {
    "prefix": "@.",
    "body": "\\cdot",
    "description": "\\cdot"
  },
  "infinity": {
    "prefix": "@8",
    "body": "\\infty",
    "description": "infinity symbol"
  },
  "partial": {
    "prefix": "@6",
    "body": "\\partial",
    "description": "partial derivative symbol"
  },
  "fraction": {
    "prefix": "@/",
    "body": "\\frac{$1}{$2}$0",
    "description": "fraction"
  },
  "fraction2": {
    "prefix": "@%",
    "body": "\\frac{$1}{$2}$0",
    "description": "fraction"
  },
  "hat": {
    "prefix": "@^",
    "body": "\\hat{${1:${TM_SELECTED_TEXT}}}$0",
    "description": "hat"
  },
  "bar": {
    "prefix": "@_",
    "body": "\\bar{${1:${TM_SELECTED_TEXT}}}$0",
    "description": "bar"
  },
  "circ": {
    "prefix": "@@",
    "body": "\\circ",
    "description": "circ"
  },
  "supcirc": {
    "prefix": "@0",
    "body": "^\\circ",
    "description": "superscript circ"
  },
  "dot": {
    "prefix": "@;",
    "body": "\\dot{${1:${TM_SELECTED_TEXT}}}$0",
    "description": "dot"
  },
  "ddot": {
    "prefix": "@:",
    "body": "\\ddot{${1:${TM_SELECTED_TEXT}}}$0",
    "description": "ddot"
  },

  "equiv": {
    "prefix": "@=",
    "body": "\\equiv",
    "description": "equiv symbol"
  },
  "times": {
    "prefix": "@*",
    "body": "\\times",
    "description": "times symbol"
  },
  "leq": {
    "prefix": "@<",
    "body": "\\leq",
    "description": "leq symbol"
  },
  "geq": {
    "prefix": "@>",
    "body": "\\geq",
    "description": "geq symbol"
  },
  "sqrt": {
    "prefix": "@2",
    "body": "\\sqrt{${1:${TM_SELECTED_TEXT}}}$0",
    "description": "sqrt command"
  },
  "int": {
    "prefix": "@I",
    "body": "\\int_{$1}^{$2}$0",
    "description": "integral"
  },
  "Big|": {
    "prefix": "@|",
    "body": "\\Big|",
    "description": "Big |"
  },
  "bigcup": {
    "prefix": "@+",
    "body": "\\bigcup",
    "description": "bigcup"
  },
  "bigcap": {
    "prefix": "@-",
    "body": "\\bigcap",
    "description": "bigcap"
  },
  "nonumber": {
    "prefix": "@,",
    "body": "\\nonumber",
    "description": "nonumber"
  },
  "equation": {
    "prefix": "BEQ",
    "body": "\\begin{equation}\n\t${0:${TM_SELECTED_TEXT}}\n\\end{equation}",
    "description": "equation environment"
  },
  "equation*": {
    "prefix": "BSEQ",
    "body": "\\begin{equation*}\n\t${0:${TM_SELECTED_TEXT}}\n\\end{equation*}",
    "description": "equation* environment"
  },
  "align": {
    "prefix": "BAL",
    "body": "\\begin{align}\n\t${0:${TM_SELECTED_TEXT}}\n\\end{align}",
    "description": "align environment"
  },
  "align*": {
    "prefix": "BSAL",
    "body": "\\begin{align*}\n\t${0:${TM_SELECTED_TEXT}}\n\\end{align*}",
    "description": "align* environment"
  },
  "gather": {
    "prefix": "BGA",
    "body": "\\begin{gather}\n\t${0:${TM_SELECTED_TEXT}}\n\\end{gather}",
    "description": "gather environment"
  },
  "gather*": {
    "prefix": "BSGA",
    "body": "\\begin{gather*}\n\t${0:${TM_SELECTED_TEXT}}\n\\end{gather*}",
    "description": "gather* environment"
  },
  "multline": {
    "prefix": "BMU",
    "body": "\\begin{multline}\n\t${0:${TM_SELECTED_TEXT}}\n\\end{multline}",
    "description": "multline environment"
  },
  "multline*": {
    "prefix": "BSMU",
    "body": "\\begin{multline*}\n\t${0:${TM_SELECTED_TEXT}}\n\\end{multline*}",
    "description": "multline* environment"
  },
  "itemize": {
    "prefix": "BIT",
    "body": "\\begin{itemize}\n\t\\item ${0:${TM_SELECTED_TEXT}}\n\\end{itemize}",
    "description": "itemize environment"
  },
  "enumerate": {
    "prefix": "BEN",
    "body": "\\begin{enumerate}\n\t\\item ${0:${TM_SELECTED_TEXT}}\n\\end{enumerate}",
    "description": "enumerate environment"
  },
  "split": {
    "prefix": "BSPL",
    "body": "\\begin{split}\n\t${0:${TM_SELECTED_TEXT}}\n\\end{split}",
    "description": "split environment"
  },
  "cases": {
    "prefix": "BCAS",
    "body": "\\begin{cases}\n\t${0:${TM_SELECTED_TEXT}}\n\\end{cases}",
    "description": "cases environment"
  },
  "frame": {
    "prefix": "BFR",
    "body": "\\begin{frame}\n\t\\frametitle{${1:<title>}}\n\n\t${0:${TM_SELECTED_TEXT}}\n\n\\end{frame}",
    "description": "frame"
  },
  "figure": {
    "prefix": "BFI",
    "body": "\\begin{figure}[${1:htbp}]\n\t\\centering\n\t${0:${TM_SELECTED_TEXT}}\n\t\\caption{${2:<caption>}}\n\t\\label{${3:<label>}}\n\\end{figure}",
    "description": "figure"
  },
  "table": {
    "prefix": "BTA",
    "body": "\\begin{table}[${1:htbp}]\n\t\\centering\\begin{tabular}{${4:<columns>}}\n\t\t${0:${TM_SELECTED_TEXT}}\n\t\\end{tabular}\n\t\\caption{${2:<caption>}}\n\t\\label{${3:<label>}}\n\\end{table}",
    "description": "table"
  },
  "tikzpicture": {
    "prefix": "BTP",
    "body": "\\begin{tikzpicture}\n\t${0:${TM_SELECTED_TEXT}}\n\\end{tikzpicture}",
    "description": "tikzpicture"
  },
  "set font size": {
    "prefix": "fontsize",
    "body": "${1|\\Huge,\\huge,\\LARGE,\\Large,\\large,\\normalsize,\\small,\\footnotesize,\\scriptsize,\\tiny|}",
    "description": "Select a font size"
  },
  "textnormal": {
    "prefix": "FNO",
    "body": "\\textnormal{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "normal font"
  },
  "textrm": {
    "prefix": "FRM",
    "body": "\\textrm{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "roman font"
  },
  "emph": {
    "prefix": "FEM",
    "body": "\\emph{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "emphasis font"
  },
  "textsf": {
    "prefix": "FSF",
    "body": "\\textsf{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "sans serif font"
  },
  "texttt": {
    "prefix": "FTT",
    "body": "\\texttt{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "typewriter font"
  },
  "textit": {
    "prefix": "FIT",
    "body": "\\textit{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "italic font"
  },
  "textsl": {
    "prefix": "FSL",
    "body": "\\textsl{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "slanted font"
  },
  "textsc": {
    "prefix": "FSC",
    "body": "\\textsc{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "smallcaps font"
  },
  "underline": {
    "prefix": "FUL",
    "body": "\\underline{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "Underline text"
  },
  "uppercase": {
    "prefix": "FUC",
    "body": "\\uppercase{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "Make text uppercase (all caps)"
  },
  "lowercase": {
    "prefix": "FLC",
    "body": "\\lowercase{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "Make text lowercase (no caps)"
  },
  "textbf": {
    "prefix": "FBF",
    "body": "\\textbf{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "bold font"
  },
  "textsuperscript": {
    "prefix": "FSS",
    "body": "\\textsuperscript{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "Make text a superscript"
  },
  "textsubscript": {
    "prefix": "FBS",
    "body": "\\textsubscript{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "Make text a superscript"
  },
  "mathrm": {
    "prefix": "MRM",
    "body": "\\mathrm{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "math roman font"
  },
  "mathbf": {
    "prefix": "MBF",
    "body": "\\mathbf{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "math bold font"
  },
  "mathbb": {
    "prefix": "MBB",
    "body": "\\mathbb{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "math blackboard bold font"
  },
  "mathcal": {
    "prefix": "MCA",
    "body": "\\mathcal{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "math caligraphic font"
  },
  "mathit": {
    "prefix": "MIT",
    "body": "\\mathit{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "math italic font"
  },
  "mathtt": {
    "prefix": "MTT",
    "body": "\\mathtt{${1:${TM_SELECTED_TEXT:text}}}",
    "description": "math typewriter font"
  },
  "alpha": {
    "prefix": "@a",
    "body": "\\alpha",
    "description": "alpha"
  },
  "beta": {
    "prefix": "@b",
    "body": "\\beta",
    "description": "beta"
  },
  "chi": {
    "prefix": "@c",
    "body": "\\chi",
    "description": "chi"
  },
  "delta": {
    "prefix": "@d",
    "body": "\\delta",
    "description": "delta"
  },
  "epsilon": {
    "prefix": "@e",
    "body": "\\epsilon",
    "description": "epsilon"
  },
  "varepsilon": {
    "prefix": "@ve",
    "body": "\\varepsilon",
    "description": "varepsilon"
  },
  "phi": {
    "prefix": "@f",
    "body": "\\phi",
    "description": "phi"
  },
  "varphi": {
    "prefix": "@vf",
    "body": "\\varphi",
    "description": "varphi"
  },
  "gamma": {
    "prefix": "@g",
    "body": "\\gamma",
    "description": "gamma"
  },
  "eta": {
    "prefix": "@h",
    "body": "\\eta",
    "description": "eta"
  },
  "iota": {
    "prefix": "@i",
    "body": "\\iota",
    "description": "iota"
  },
  "kappa": {
    "prefix": "@k",
    "body": "\\kappa",
    "description": "kappa"
  },
  "lambda": {
    "prefix": "@l",
    "body": "\\lambda",
    "description": "lambda"
  },
  "mu": {
    "prefix": "@m",
    "body": "\\mu",
    "description": "mu"
  },
  "nu": {
    "prefix": "@n",
    "body": "\\nu",
    "description": "nu"
  },
  "pi": {
    "prefix": "@p",
    "body": "\\pi",
    "description": "pi"
  },
  "theta": {
    "prefix": "@q",
    "body": "\\theta",
    "description": "theta"
  },
  "vartheta": {
    "prefix": "@vq",
    "body": "\\vartheta",
    "description": "vartheta"
  },
  "rho": {
    "prefix": "@r",
    "body": "\\rho",
    "description": "rho"
  },
  "sigma": {
    "prefix": "@s",
    "body": "\\sigma",
    "description": "sigma"
  },
  "varsigma": {
    "prefix": "@vs",
    "body": "\\varsigma",
    "description": "varsigma"
  },
  "tau": {
    "prefix": "@t",
    "body": "\\tau",
    "description": "tau"
  },
  "upsilon": {
    "prefix": "@u",
    "body": "\\upsilon",
    "description": "upsilon"
  },
  "omega": {
    "prefix": "@o",
    "body": "\\omega",
    "description": "omega"
  },
  "wedge": {
    "prefix": "@&",
    "body": "\\wedge",
    "description": "wedge"
  },
  "xi": {
    "prefix": "@x",
    "body": "\\xi",
    "description": "xi"
  },
  "psi": {
    "prefix": "@y",
    "body": "\\psi",
    "description": "psi"
  },
  "zeta": {
    "prefix": "@z",
    "body": "\\zeta",
    "description": "zeta"
  },
  "Delta": {
    "prefix": "@D",
    "body": "\\Delta",
    "description": "Delta"
  },
  "Phi": {
    "prefix": "@F",
    "body": "\\Phi",
    "description": "Phi"
  },
  "Gamma": {
    "prefix": "@G",
    "body": "\\Gamma",
    "description": "Gamma"
  },
  "Theta": {
    "prefix": "@Q",
    "body": "\\Theta",
    "description": "Theta"
  },
  "Lambda": {
    "prefix": "@L",
    "body": "\\Lambda",
    "description": "Lambda"
  },
  "Xi": {
    "prefix": "@X",
    "body": "\\Xi",
    "description": "Xi"
  },
  "Psi": {
    "prefix": "@Y",
    "body": "\\Psi",
    "description": "Psi"
  },
  "Sigma": {
    "prefix": "@S",
    "body": "\\Sigma",
    "description": "Sigma"
  },
  "Upsilon": {
    "prefix": "@U",
    "body": "\\Upsilon",
    "description": "Upsilon"
  },
  "Omega": {
    "prefix": "@W",
    "body": "\\Omega",
    "description": "Omega"
  },
  "(": {
    "prefix": "@(",
    "body": "\\left( ${1:${TM_SELECTED_TEXT}} \\right)",
    "description": "left( ... right)"
  },
  "{": {
    "prefix": "@{",
    "body": "\\left\\{ ${1:${TM_SELECTED_TEXT}} \\right\\\\\\\\}",
    "description": "left{ ... right}"
  },
  "[": {
    "prefix": "@[",
    "body": "\\left[ ${1:${TM_SELECTED_TEXT}} \\right]",
    "description": "left[ ... right]"
  },
  "wrapEnv": {
    "body": "\n\\begin{$1}\n\t${0:${TM_SELECTED_TEXT}}\n\\end{$1}",
    "description": "Wrap selection into an environment"
  },
  "part": {
    "prefix": "SPA",
    "body": "\\part{${1:${TM_SELECTED_TEXT}}}",
    "description": "part"
  },
  "chapter": {
    "prefix": "SCH",
    "body": "\\chapter{${1:${TM_SELECTED_TEXT}}}",
    "description": "chapter"
  },
  "section": {
    "prefix": "SSE",
    "body": "\\section{${1:${TM_SELECTED_TEXT}}}",
    "description": "section"
  },
  "subsection": {
    "prefix": "SSS",
    "body": "\\subsection{${1:${TM_SELECTED_TEXT}}}",
    "description": "subsection"
  },
  "subsubsection": {
    "prefix": "SS2",
    "body": "\\subsubsection{${1:${TM_SELECTED_TEXT}}}",
    "description": "subsubsection"
  },
  "paragraph": {
    "prefix": "SPG",
    "body": "\\paragraph{${1:${TM_SELECTED_TEXT}}}",
    "description": "paragraph"
  },
  "subparagraph": {
    "prefix": "SSP",
    "body": "\\subparagraph{${1:${TM_SELECTED_TEXT}}}",
    "description": "subparagraph"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/sql.json`:

```````json
{
  "createt": {
    "prefix": "createt",
    "body": ["CREATE TABLE ${1:tableName} (", "\t${2:attribute(s)}", ");"],
    "description": "Create regular table"
  },
  "createti": {
    "prefix": "createti",
    "body": [
      "CREATE TABLE IF NOT EXISTS ${1:tableName} (",
      "\t${2:attribute(s)}",
      ");"
    ],
    "description": "Create table with conditional"
  },
  "created": {
    "prefix": "created",
    "body": ["CREATE DATABASE ${1:name};"],
    "description": "Create regular table"
  },
  "createdi": {
    "prefix": "createdi",
    "body": ["CREATE DATABASE IF NOT EXISTS ${1:name};"],
    "description": "Create table with conditional"
  },
  "insert": {
    "prefix": "insert",
    "body": [
      "INSERT INTO ${1:tableName} (",
      "\t${2:attribute(s)}",
      ") VALUES ( ${3:values} )"
    ],
    "description": "Insert value(s)"
  },
  "dropt": {
    "prefix": "dropt",
    "body": ["DROP TABLE ${1:tableName};"],
    "description": "Drop table"
  },
  "dropd": {
    "prefix": "dropd",
    "body": ["DROP DATABASE ${1:dbName};"],
    "description": "Drop database"
  },
  "dropti": {
    "prefix": "dropti",
    "body": ["DROP TABLE IF EXISTS ${1:tableName};"],
    "description": "Drop table with conditional"
  },
  "dropdi": {
    "prefix": "dropdi",
    "body": ["DROP DATABASE IF EXISTS ${1:dbName};"],
    "description": "Drop database with conditional"
  },
  "showt": {
    "prefix": "showt",
    "body": ["SHOW TABLES;"],
    "description": "Show tables"
  },
  "showd": {
    "prefix": "showd",
    "body": ["SHOW DATABASES;"],
    "description": "Show databases"
  },
  "select": {
    "prefix": "select",
    "body": ["SELECT ${1:attribute(s)} FROM ${2:tableName};"],
    "description": "Regular select"
  },
  "selectd": {
    "prefix": "selectd",
    "body": ["SELECT DISTINCT ${1:attribute(s)}", "\tFROM ${2:tableName};"],
    "description": "Select Distinct"
  },
  "selectw": {
    "prefix": "selectw",
    "body": [
      "SELECT ${1:attribute(s)}",
      "\tFROM ${2:tableName}",
      "\tWHERE ${3:condition};"
    ],
    "description": "Select with condition"
  },
  "selector": {
    "prefix": "selector",
    "body": [
      "SELECT ${1:attribute(s)}",
      "\tFROM ${2:tableName}",
      "\tORDER BY ${3:attribute(s)} ${4:ASC|DESC};"
    ],
    "description": "Select with order"
  },
  "updatet": {
    "prefix": "updatet",
    "body": [
      "UPDATE ${1:tableName}",
      "\tSET ${2:attribute(s)}",
      "\tWHERE ${3:condition};"
    ],
    "description": "Update table"
  },
  "delete": {
    "prefix": "delete",
    "body": ["DELETE FROM ${1:tableName}", "\tWHERE ${3:condition};"],
    "description": "Delete records"
  },
  "altert": {
    "prefix": "altert",
    "body": ["ALTER TABLE ${1:tableName}", "\t ${2:intructions};"],
    "description": "Alter table"
  },
  "alterad": {
    "prefix": "alterad",
    "body": ["ALTER TABLE ${1:tableName}", "\tADD COLUMN ${2:col_name};"],
    "description": "Alter table - Add column"
  },
  "alteraf": {
    "prefix": "alteraf",
    "body": [
      "ALTER TABLE ${1:tableName}",
      "\tADD COLUMN ${2:col_name}",
      "\tAFTER ${5:col_name};"
    ],
    "description": "Alter table - Add column after"
  },
  "alterdb": {
    "prefix": "alterdb",
    "body": [
      "ALTER DATABASE ${1:dbName}",
      "\tCHARACTER SET ${2:charset}",
      "\tCOLLATE ${3:utf8_unicode_ci};"
    ],
    "description": "Alter database"
  },
  "ijoin": {
    "prefix": "ijoin",
    "body": [
      "SELECT ${1:attribute(s)}",
      "\tFROM ${2:tableName}",
      "\tINNER JOIN ${3:tableName2}",
      "\tON ${4:match};"
    ],
    "description": "Inner Join"
  },
  "rjoin": {
    "prefix": "rjoin",
    "body": [
      "SELECT ${1:attribute(s)}",
      "\tFROM ${2:tableName}",
      "\tRIGHT JOIN ${3:tableName2}",
      "\tON ${4:match};"
    ],
    "description": "Right Join"
  },
  "ljoin": {
    "prefix": "ljoin",
    "body": [
      "SELECT ${1:attribute(s)}",
      "\tFROM ${2:tableName}",
      "\tLEFT JOIN ${3:tableName2}",
      "\tON ${4:match};"
    ],
    "description": "Left Join"
  },
  "fjoin": {
    "prefix": "fjoin",
    "body": [
      "SELECT ${1:attribute(s)}",
      "\tFROM ${2:tableName}",
      "\tFULL JOIN OUTER ${3:tableName2}",
      "\tON ${4:match}",
      "\tWHERE ${5:condition};"
    ],
    "description": "Full Join"
  },
  "union": {
    "prefix": "union",
    "body": [
      "SELECT ${1:attribute(s)} FROM ${2:tableName}",
      "UNION",
      "SELECT ${3:attribute(s)} FROM ${4:tableName2};"
    ],
    "description": "Regular union"
  },
  "uniona": {
    "prefix": "uniona",
    "body": [
      "SELECT ${1:attribute(s)} FROM ${2:tableName}",
      "UNION ALL",
      "SELECT ${3:attribute(s)} FROM ${4:tableName2};"
    ],
    "description": "All union"
  },
  "groupb": {
    "prefix": "groupb",
    "body": [
      "SELECT ${1:attribute(s)}",
      "\tFROM ${2:tableName}",
      "\tORDER BY ${3:attribute(s)};"
    ],
    "description": "Group by"
  },
  "bakupd": {
    "prefix": "bakupd",
    "body": ["BACKUP DATABASE ${1:dbName}", "\tTO DISK ${2:filepath};"],
    "description": "Backup database"
  },
  "bakupdw": {
    "prefix": "bakupdw",
    "body": [
      "BACKUP DATABASE ${1:dbName}",
      "\tTO DISK ${2:filepath}",
      "\tWITH ${3:DIFERENTIAL};"
    ],
    "description": "Diferencial backup database"
  },
  "primaryk": {
    "prefix": "primaryk",
    "body": ["PRIMARY KEY(${1:attribute})"],
    "description": "Primary Key"
  },
  "primarykc": {
    "prefix": "primarykc",
    "body": ["CONSTRAINT ${1:attribute} PRIMARY KEY(${2:attribute(s)})"],
    "description": "Constraint rimary Key"
  },
  "foreingk": {
    "prefix": "foreingk",
    "body": [
      "FOREIGN KEY(${1:attribute}) REFERENCES ${2:tableName}(${3:attribute})"
    ],
    "description": "Foreing Key"
  },
  "foreingkc": {
    "prefix": "foreingkc",
    "body": [
      "CONSTRAINT ${1:attribute} FOREING KEY (${2:attribute(s)})",
      "\tREFERENCES ${3:tableName}(${4:attribute})"
    ],
    "description": "Constraint foreing Key"
  },
  "check": {
    "prefix": "check",
    "body": ["CHECK ( ${1:condition} )"],
    "description": "Check"
  },
  "creteuser": {
    "prefix": "createuser",
    "body": "CREATE USER '${1:username}'@'${2:localhost}' IDENTIFIED BY '${3:password}';",
    "description": "Create User"
  },
  "deleteuser": {
    "prefix": "deleteuser",
    "body": "DELETE FROM mysql.user WHERE user = '${1:userName}';",
    "description": "Delete user"
  },
  "grantuser": {
    "prefix": "grantuser",
    "body": "GRANT ALL PRIVILEGES ON ${1:db}.${2:tb} TO '${3:user_name}'@'${4:localhost}';",
    "description": "Grant privileges"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/shell.json`:

```````json
{
  "bash": {
    "prefix": ["bash", "#!", "shebang"],
    "body": "${1|#!/bin/bash,#!/usr/bin/env bash,#!/bin/sh,#!/usr/bin/env sh|}\n",
    "description": [
      "Option 1:\n",
      "#!/bin/bash\n",
      "Description: Shebang Bash executor.\n",
      "Option 2:\n",
      "#!/usr/bin/env bash\n",
      "Description: Shell searchs for the first match of bash in the $PATH environment variable.\n",
      "It can be useful if you aren't aware of the absolute path or don't want to search for it.\n"
    ]
  },
  "echo": {
    "prefix": "echo",
    "body": "echo \"${0:message}\"",
    "description": "Echo a message."
  },
  "read": {
    "prefix": "read",
    "body": "read -r ${0:VAR}",
    "description": "Read input of ${VAR}."
  },
  "if": {
    "prefix": "if",
    "body": "if [[ ${0:condition} ]]; then\n\t${1}\nfi",
    "description": "An IF statement."
  },
  "elseif": {
    "prefix": "elseif",
    "body": "elif [[ ${0:condition} ]]; then\n\t${1}",
    "description": "Add an elseif to an if statement."
  },
  "else": {
    "prefix": "else",
    "body": "else\n\t${0:command}",
    "description": "else"
  },
  "for_in": {
    "prefix": "for_in",
    "body": "for ${0:VAR} in $${1:LIST}\ndo\n\techo \"$${0:VAR}\"\ndone\n",
    "description": "for loop in list"
  },
  "for_i": {
    "prefix": "for_i",
    "body": "for ((${0:i} = 0; ${0:i} < ${1:10}; ${0:i}++)); do\n\techo \"$${0:i}\"\ndone\n",
    "description": "An index-based iteration for loop."
  },
  "while": {
    "prefix": "while",
    "body": "while [[ ${1:condition} ]]; do\n\t${0}\ndone\n",
    "description": "A while loop by condition."
  },
  "until": {
    "prefix": "until",
    "body": "until [[ ${1:condition} ]]; do\n\t${0}\ndone\n",
    "description": "until loop by condition"
  },
  "function": {
    "prefix": "function",
    "body": "${1:name} ()\n{\n\t${0}\n}",
    "description": [
      "This defines a function named name.\n",
      "The reserved word function is optional.\n",
      "If the function reserved word is supplied, the parentheses are optional.\n",
      "1. Recommended way:\n",
      "name() {}\n",
      "2. C-like-way:\nfunction name [()] {}"
    ]
  },
  "case": {
    "prefix": "case",
    "body": "case \"$${0:VAR}\" in\n\t${1:1}) echo 1\n\t;;\n\t${2:2|3}) echo 2 or 3\n\t;;\n\t*) echo default\n\t;;\nesac\n",
    "description": [
      "case word in [ [(] pattern [ | pattern ] ... ) list ;; ] ... esac\n",
      "A case command first expands word, and tries to match it against each pattern in turn."
    ]
  },
  "break": {
    "prefix": "break",
    "body": "break ${0}",
    "description": [
      "The break command tells Bash to leave the loop straight away.\n",
      "Enter the break or break (n) where n=number of loops."
    ]
  },
  "expr": {
    "prefix": "expr",
    "body": "expr ${0:1 + 1}",
    "description": "Calculate numbers with Bash."
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/package-lock.json`:

```````json
{
  "name": "snips",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "snips",
      "engines": {
        "vscode": "^1.11.0"
      }
    }
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/latex/latex-snippets.json`:

```````json
{
  "Align(ed)": {
    "prefix": "ali",
    "body": ["\\begin{align}", "\t$0", "\\end{align}"],
    "description": "Align(ed)"
  },
  "Cases": {
    "prefix": "cas",
    "body": [
      "\\begin{cases}",
      "\t${1:equation}, &\\text{ if }${2:case}\\\\\\\\",
      "\t$0",
      "\\end{cases}"
    ],
    "description": "Cases"
  },
  "Chapter": {
    "prefix": "cha",
    "body": [
      "\\chapter{${1:chapter name}} % (fold)",
      "\\label{cha:${2:${1/(\\w+)(\\W+$)?|\\W+/${1:?${1:/asciify/downcase}:_}/g}}}",
      "${0:$TM_SELECTED_TEXT}",
      "% chapter $2 (end)"
    ],
    "description": "Chapter"
  },
  "Description": {
    "prefix": "desc",
    "body": [
      "\\\\begin{description}",
      "\t\\item[$1] $0",
      "\\\\end{description}"
    ],
    "description": "Description"
  },
  "Math": {
    "prefix": "math",
    "body": ["\\begin{math}", "\t$1", "\\end{math}", "$0"],
    "description": "Add a Math"
  },
  "DisplayMath": {
    "prefix": "displaymath",
    "body": ["\\begin{displaymath}", "\t$1", "\\end{displaymath}", "$0"],
    "description": "Display Math"
  },
  "Equation": {
    "prefix": "equation",
    "body": [
      "\\begin{equation}",
      "\t$0",
      "\t\\label{eq:$1}",
      "\\end{equation}"
    ],
    "description": "Add a Equation"
  },
  "Display Math — \\[ … \\]": {
    "prefix": "$$",
    "body": ["\\[", "\t$TM_SELECTED_TEXT$1", "\\]"],
    "description": "Display Math"
  },
  "Theorem": {
    "prefix": "theorem",
    "body": [
      "\\begin{theorem}",
      "\t$1",
      "\t\\begin{displaymath}",
      "\t\t$2",
      "\t\\end{displaymath}",
      "\t$3",
      "\\end{theorem}",
      "$0"
    ],
    "description": "Add a theorem"
  },
  "Definition": {
    "prefix": "definition",
    "body": [
      "\\begin{definition}",
      "\t$1",
      "\t\\begin{displaymath}",
      "\t\t$2",
      "\t\\end{displaymath}",
      "\t$3",
      "\\end{definition}",
      "$0"
    ],
    "description": "Add a definition"
  },
  "Proof": {
    "prefix": "proof",
    "body": [
      "\\begin{proof}",
      "\t$1",
      "\t\\begin{displaymath}",
      "\t\t$2",
      "\t\\end{displaymath}",
      "\t$3",
      "\\end{proof}",
      "$0"
    ],
    "description": "Add a proof"
  },
  "Algorithm": {
    "prefix": "algo",
    "body": [
      "% \\usepackage{algorithm,algorithmicx,algpseudocode}",
      "\\begin{algorithm}",
      "\t\\floatname{algorithm}{${1:Algorithm}}",
      "\t\\algrenewcommand\\algorithmicrequire{\\textbf{${2:Input: }}}",
      "\t\\algrenewcommand\\algorithmicensure{\\textbf{${3:Output: }}}",
      "\t\\caption{$4}",
      "\t\\label{alg:$5}",
      "\t\\begin{algorithmic}[1]",
      "\t\t\\Require \\$input\\$",
      "\t\t\\Ensure \\$output\\$",
      "\t\t$6",
      "\t\t\\State \\textbf{return} \\$state\\$",
      "\t\\end{algorithmic}",
      "\\end{algorithm}",
      "$0"
    ],
    "description": "Add an algorithm"
  },
  "Algorithm:State": {
    "prefix": "state",
    "body": ["\\State $1"],
    "desciption": "Add an statement of algorithm"
  },
  "Algorithm:If": {
    "prefix": "if",
    "body": ["\\If{$1}", "\\ElsIf{$2}", "\\Else", "\\EndIf"],
    "desciption": "Add an if statement of algorithm"
  },
  "Algorithm:For": {
    "prefix": "for",
    "body": ["\\For{i=0:$1}", "\t\\State $0", "\\EndFor"],
    "desciption": "Add an for statement of algorithm"
  },
  "Algorithm:While": {
    "prefix": "while",
    "body": ["\\While{$1}", "\t\\State $0", "\\EndWhile"],
    "desciption": "Add an for statement of algorithm"
  },
  "Algorithm:Ref": {
    "prefix": "algo:ref",
    "body": ["${1:Algorithm}~\\ref{algo:$2}$0"],
    "desciption": "Ref for Algorithm"
  },
  "Figure:Ref": {
    "prefix": "figure:ref",
    "body": ["${1:Figure}~\\ref{fig:$2}$0"],
    "description": "Ref for Figure"
  },
  "Gather(ed)": {
    "prefix": "gat",
    "body": ["\\begin{gather}", "\t$0", "\\end{gather}"],
    "description": "Gather(ed)"
  },
  "Itemize": {
    "prefix": "item",
    "body": ["\\\\begin{itemize}", "\t\\item $0", "\\\\end{itemize}"],
    "description": "Itemize"
  },
  "Listing:Ref": {
    "prefix": "listing:ref",
    "body": ["${1:Listing}~\\ref{lst:$2}$0"],
    "description": "Listing"
  },
  "Matrix": {
    "prefix": "mat",
    "body": [
      "\\begin{${1:p/b/v/V/B/small}matrix}",
      "\t$0",
      "\\end{${1:p/b/v/V/B/small}matrix}"
    ],
    "description": "Matrix"
  },
  "Page": {
    "prefix": "page",
    "body": ["${1:page}~\\pageref{$2}$0"],
    "description": "Page"
  },
  "Paragraph": {
    "prefix": "par",
    "body": [
      "\\paragraph{${1:paragraph name}} % (fold)",
      "\\label{par:${2:${1/(\\w+)(\\W+$)?|\\W+/${1:?${1:/asciify/downcase}:_}/g}}}",
      "${0:$TM_SELECTED_TEXT}",
      "% paragraph $2 (end)"
    ],
    "description": "Paragraph"
  },
  "Part": {
    "prefix": "part",
    "body": [
      "\\part{${1:part name}} % (fold)",
      "\\label{prt:${2:${1/(\\w+)(\\W+$)?|\\W+/${1:?${1:/asciify/downcase}:_}/g}}}",
      "${0:$TM_SELECTED_TEXT}",
      "% part $2 (end)"
    ],
    "description": "Part"
  },
  "Region Start": {
    "prefix": "#region",
    "body": ["%#Region $0"],
    "description": "Folding Region Start"
  },
  "Region End": {
    "prefix": "#endregion",
    "body": ["%#Endregion"],
    "description": "Folding Region End"
  },
  "Section:Ref": {
    "prefix": "section:ref",
    "body": ["${1:Section}~\\ref{sec:$2}$0"],
    "description": "Section Reference"
  },
  "Split": {
    "prefix": "spl",
    "body": ["\\begin{split}", "\t$0", "\\end{split}"],
    "description": "Split"
  },
  "Section": {
    "prefix": "sec",
    "body": [
      "\\section{${1:section name}} % (fold)",
      "\\label{sec:${2:${1/(\\w+)(\\W+$)?|\\W+/${1:?${1:/asciify/downcase}:_}/g}}}",
      "${0:$TM_SELECTED_TEXT}",
      "% section $2 (end)"
    ],
    "description": "Section"
  },
  "Sub Paragraph": {
    "prefix": "subp",
    "body": [
      "\\subparagraph{${1:subparagraph name}} % (fold)",
      "\\label{subp:${2:${1/(\\w+)(\\W+$)?|\\W+/${1:?${1:/asciify/downcase}:_}/g}}}",
      "${0:$TM_SELECTED_TEXT}",
      "% subparagraph $2 (end)"
    ],
    "description": "Sub Paragraph"
  },
  "Sub Section": {
    "prefix": "sub",
    "body": [
      "\\subsection{${1:subsection name}} % (fold)",
      "\\label{sub:${2:${1/(\\w+)(\\W+$)?|\\W+/${1:?${1:/asciify/downcase}:_}/g}}}",
      "${0:$TM_SELECTED_TEXT}",
      "% subsection $2 (end)"
    ],
    "description": "Sub Section"
  },
  "Sub Sub Section": {
    "prefix": "subs",
    "body": [
      "\\subsubsection{${1:subsubsection name}} % (fold)",
      "\\label{ssub:${2:${1/(\\w+)(\\W+$)?|\\W+/${1:?${1:/asciify/downcase}:_}/g}}}",
      "${0:$TM_SELECTED_TEXT}",
      "% subsubsection $2 (end)"
    ],
    "description": "Sub Sub Section"
  },
  "Table:Ref": {
    "prefix": "table:ref",
    "body": ["${1:Table}~\\ref{tab:$2}$0"],
    "description": "Table Reference"
  },
  "Tabular": {
    "prefix": "tab",
    "body": [
      "\\\\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}",
      "$0${2/((?<=[clr])([ |]*(c|l|r)))|./(?1: & )/g}",
      "\\\\end{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}"
    ],
    "description": "Tabular"
  },
  "\\begin{}…\\end{}": {
    "prefix": "begin",
    "body": [
      "\\\\begin{${1:env}}",
      "\t${1/(enumerate|itemize|list)|(description)|.*/(?1:\\item )(?2:\\item)/}$0",
      "\\\\end{${1:env}}"
    ],
    "description": "Begin - End"
  },
  "Figure": {
    "prefix": "figure",
    "body": [
      "\\begin{figure}",
      "\t\\begin{center}",
      "\t\t\\includegraphics[width=0.95\\textwidth]{figures/$1}",
      "\t\\end{center}",
      "\t\\caption{$3}",
      "\t\\label{fig:$4}",
      "\\end{figure}",
      "$0"
    ],
    "description": "Add a figure"
  },
  "Figure:ACM": {
    "prefix": "figure:acm",
    "body": [
      "\\begin{figure}",
      "\t\\includegraphics[width=0.45\\textwidth]{figures/$1}",
      "\t\\caption{$2}",
      "\t\\label{fig:$3}",
      "\\end{figure}",
      "$0"
    ],
    "description": "Add a figure (ACM)"
  },
  "Figure:ACM:*": {
    "prefix": "figure:acm:*",
    "body": [
      "\\begin{figure*}",
      "\t\\includegraphics[width=0.45\\textwidth]{figures/$1}",
      "\t\\caption{$2}",
      "\t\\label{fig:$3}",
      "\\end{figure*}",
      "$0"
    ],
    "description": "Add a figure (ACM)"
  },
  "Table": {
    "prefix": "table",
    "body": [
      "\\begin{table}",
      "\t\\caption{$1}",
      "\t\\label{tab:$2}",
      "\t\\begin{center}",
      "\t\t\\begin{tabular}[c]{l|l}",
      "\t\t\t\\hline",
      "\t\t\t\\multicolumn{1}{c|}{\\textbf{$3}} & ",
      "\t\t\t\\multicolumn{1}{c}{\\textbf{$4}} \\\\\\\\",
      "\t\t\t\\hline",
      "\t\t\ta & b \\\\\\\\",
      "\t\t\tc & d \\\\\\\\",
      "\t\t\t$5",
      "\t\t\t\\hline",
      "\t\t\\end{tabular}",
      "\t\\end{center}",
      "\\end{table}",
      "$0"
    ],
    "description": "Add a table"
  },
  "Table:ACM": {
    "prefix": "table:acm",
    "body": [
      "\\begin{table}",
      "\t\\caption{$1}",
      "\t\\label{tab:$2}",
      "\t\\begin{tabular}{${3:ccl}}",
      "\t\t\\toprule",
      "\t\t$4",
      "\t\ta & b & c \\\\\\\\",
      "\t\t\\midrule",
      "\t\td & e & f \\\\\\\\",
      "\t\t\\bottomrule",
      "\t\\end{tabular}",
      "\\end{table}",
      "$0"
    ],
    "description": "Add a table (ACM)"
  },
  "Table:ACM:*": {
    "prefix": "table:acm:*",
    "body": [
      "\\begin{table*}",
      "\t\\caption{$1}",
      "\t\\label{tab:$2}",
      "\t\\begin{tabular}{${3:ccl}}",
      "\t\t\\toprule",
      "\t\t$4",
      "\t\ta & b & c \\\\\\\\",
      "\t\t\\midrule",
      "\t\td & e & f \\\\\\\\",
      "\t\t\\bottomrule",
      "\t\\end{tabular}",
      "\\end{table*}",
      "$0"
    ],
    "description": "Add a table (ACM)"
  },
  "Enumerate": {
    "prefix": "enumerate",
    "body": ["\\\\begin{enumerate}", "\t\\item $0", "\\\\end{enumerate}"],
    "description": "Add a enumerate"
  },
  "Compactitem": {
    "prefix": "compactitem",
    "body": ["\\begin{compactitem}", "\t\\item $1", "\\end{compactitem}", "$0"],
    "description": "Add a compactitem (from package paralist)"
  },
  "Cite": {
    "prefix": "cite",
    "body": ["~\\cite{$1}$0"],
    "description": "Add a cite"
  },
  "EmptyPage": {
    "prefix": "empty",
    "body": ["\\null\\thispagestyle{empty}", "\\newpage", "$0"],
    "description": "Add a empty page"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/latex/vscode-latex-snippets.json`:

```````json
{
  "Template": {
    "prefix": ["template", "\\template"],
    "body": [
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Define Article %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "\\documentclass{article}",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Using Packages %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "\\usepackage{geometry}",
      "\\usepackage{graphicx}",
      "\\usepackage{amssymb}",
      "\\usepackage{amsmath}",
      "\\usepackage{amsthm}",
      "\\usepackage{empheq}",
      "\\usepackage{mdframed}",
      "\\usepackage{booktabs}",
      "\\usepackage{lipsum}",
      "\\usepackage{graphicx}",
      "\\usepackage{color}",
      "\\usepackage{psfrag}",
      "\\usepackage{pgfplots}",
      "\\usepackage{bm}",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "",
      "${3:% Other Settings}",
      "",
      "%%%%%%%%%%%%%%%%%%%%%%%%%% Page Setting %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "\\geometry{a4paper}",
      "",
      "%%%%%%%%%%%%%%%%%%%%%%%%%% Define some useful colors %%%%%%%%%%%%%%%%%%%%%%%%%%",
      "\\definecolor{ocre}{RGB}{243,102,25}",
      "\\definecolor{mygray}{RGB}{243,243,244}",
      "\\definecolor{deepGreen}{RGB}{26,111,0}",
      "\\definecolor{shallowGreen}{RGB}{235,255,255}",
      "\\definecolor{deepBlue}{RGB}{61,124,222}",
      "\\definecolor{shallowBlue}{RGB}{235,249,255}",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "",
      "%%%%%%%%%%%%%%%%%%%%%%%%%% Define an orangebox command %%%%%%%%%%%%%%%%%%%%%%%%",
      "\\newcommand\\orangebox[1]{\\fcolorbox{ocre}{mygray}{\\hspace{1em}#1\\hspace{1em}}}",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%% English Environments %%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "\\newtheoremstyle{mytheoremstyle}{3pt}{3pt}{\\normalfont}{0cm}{\\rmfamily\\bfseries}{}{1em}{{\\color{black}\\thmname{#1}~\\thmnumber{#2}}\\thmnote{\\,--\\,#3}}",
      "\\newtheoremstyle{myproblemstyle}{3pt}{3pt}{\\normalfont}{0cm}{\\rmfamily\\bfseries}{}{1em}{{\\color{black}\\thmname{#1}~\\thmnumber{#2}}\\thmnote{\\,--\\,#3}}",
      "\\theoremstyle{mytheoremstyle}",
      "\\newmdtheoremenv[linewidth=1pt,backgroundcolor=shallowGreen,linecolor=deepGreen,leftmargin=0pt,innerleftmargin=20pt,innerrightmargin=20pt,]{theorem}{Theorem}[section]",
      "\\theoremstyle{mytheoremstyle}",
      "\\newmdtheoremenv[linewidth=1pt,backgroundcolor=shallowBlue,linecolor=deepBlue,leftmargin=0pt,innerleftmargin=20pt,innerrightmargin=20pt,]{definition}{Definition}[section]",
      "\\theoremstyle{myproblemstyle}",
      "\\newmdtheoremenv[linecolor=black,leftmargin=0pt,innerleftmargin=10pt,innerrightmargin=10pt,]{problem}{Problem}[section]",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Plotting Settings %%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "\\usepgfplotslibrary{colorbrewer}",
      "\\pgfplotsset{width=8cm,compat=1.9}",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Title & Author %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "\\title{${1:Title}}",
      "\\author{${2:Haoyun Qin}}",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "",
      "\\begin{document}",
      "    \\maketitle",
      "    $0",
      "\\end{document}"
    ],
    "description": "Use the default template which includes a variety of packages and declared-commands. The template will also automatically generate the title and author, as well as date, and will formate the document."
  },
  "Large Summation": {
    "prefix": ["sumlarge", "\\sumlarge"],
    "body": ["\\displaystyle\\sum_{$1}^{$2}$3"],
    "description": "Insert a large summation notation."
  },
  "Inline Summation": {
    "prefix": ["suminline", "\\suminline"],
    "body": ["\\sum_{$1}^{$2}$3"],
    "description": "Insert an inline summation notation, (only in the cases when the environment is inline math environment)."
  },
  "Inline Math": {
    "prefix": ["mathinline", "\\mathinline"],
    "body": ["$ $1 $$0"],
    "description": "Insert inline Math Environment."
  },
  "Centered Math": {
    "prefix": ["mathcentered", "\\mathcentered"],
    "body": ["$$ $0 $$"],
    "description": "Insert centered Math Environment."
  },
  "Section": {
    "prefix": ["section", "\\section"],
    "body": ["\\section{$1}$0"],
    "description": "Insert a new section."
  },
  "Subsection": {
    "prefix": ["subsection", "\\subsection"],
    "body": ["\\subsection{$1}$0"],
    "description": "Insert a new subsection."
  },
  "Header": {
    "prefix": ["header", "\\header", "##"],
    "body": "\\section*{$1}$0",
    "description": "Insert a section without index."
  },
  "Header Small": {
    "prefix": ["headersmall", "\\headersmall", "###"],
    "body": "\\subsection*{$1}$0",
    "description": "Insert a subsection without index."
  },
  "Italic Text": {
    "prefix": ["italic", "\\italic", "*"],
    "body": "\\textit{$1}$0",
    "description": "Insert italic text."
  },
  "Bold Text": {
    "prefix": ["bold", "\\bold", "**"],
    "body": "\\textbf{$1}$0",
    "description": "Insert bold text."
  },
  "Bold Italic Text": {
    "prefix": ["bolditalic", "\\bolditalic", "***"],
    "body": "\\textbf{\\textit{$1}}$0",
    "description": "Insert bold italic text."
  },
  "Itemize": {
    "prefix": ["- ", "\\itemize", "itemize"],
    "body": ["\\begin{itemize}", "\t\\item $1", "\\end{itemize}$0"]
  },
  "Up": {
    "prefix": ["to", "\\to"],
    "body": ["^ {$1}$0"],
    "description": "Superscript notation, as well as the power notation."
  },
  "Theorem": {
    "prefix": ["theorem", "\\theorem"],
    "body": [
      "\\begin{theorem}[${1:name of the theorem}]",
      "\t$0",
      "\\end{theorem}"
    ],
    "description": "Insert a theorem, whose style is already defined in the template. The serial number is automatically generated according to the section."
  },
  "Problem": {
    "prefix": ["problem", "\\problem"],
    "body": [
      "\\begin{problem}[${1:name of the problem}]",
      "\t$0",
      "\\end{problem}"
    ],
    "description": "Insert a problem, whose style is already defined in the template. The serial number is automatically generated according to the section."
  },
  "Indent": {
    "prefix": ["tab", "\\tab"],
    "body": ["\\indent "],
    "description": "The equivalent of \"\\t\", also known as \"Tab\""
  },
  "Definition": {
    "prefix": ["definition", "\\definition"],
    "body": [
      "\\begin{definition}[${1:name of the definition}]",
      "\t$0",
      "\\end{definition}"
    ],
    "description": "Insert a definition, whose style is already defined in the template. The serial number is automatically generated according to the section."
  },
  "Proof": {
    "prefix": ["proof", "\\proof"],
    "body": [
      "\\begin{proof}[Proof ${1:Other Information}]",
      "\t$0",
      "\\end{proof}"
    ],
    "description": "Insert a proof, whose style is already defined in the template. The serial number is automatically generated according to the section."
  },
  "Large Integral": {
    "prefix": ["integrallarge", "\\integrallarge"],
    "body": ["\\displaystyle\\int_{$1}^{$2}$3"],
    "description": "Insert large integral notation."
  },
  "Inline Integral": {
    "prefix": ["integralinline", "\\integralinline"],
    "body": ["\\int_{$1}^{$2}$3"],
    "description": "Insert inline integral notation, (only in the cases when the environment is inline math environment)."
  },
  "Inline Fraction": {
    "prefix": ["fractioninline", "\\fractioninline"],
    "body": ["\\frac{$1}{$2}$0"],
    "description": [
      "Insert inline fraction notation, (only in the cases when the environment is inline math environment)."
    ]
  },
  "Large Fraction": {
    "prefix": ["fractionlarge", "\\fractionlarge"],
    "body": ["\\displaystyle\\frac{$1}{$2}$0"],
    "description": ["Insert large fraction notation"]
  },
  "Create 2D Plot environment": {
    "prefix": ["plotenvironment2d", "\\plotenvironment2d"],
    "body": [
      "\\begin{tikzpicture}",
      "\\begin{axis}[",
      "legend pos=outer north east,",
      "title=${1:Example},",
      "axis lines =${2| box, left, middle, center, right, none|},",
      "xlabel = \\$x\\$,",
      "ylabel = \\$y\\$,",
      "variable = t,",
      "trig format plots = rad,",
      "]",
      "$3",
      "\\end{axis}",
      "\\end{tikzpicture}$0"
    ],
    "description": "Create a 2DPlot Environment of pgfplots. The style declarations are already included in the snippet."
  },
  "Plot 2D Graph": {
    "prefix": ["plotgraph2d", "\\plotgraph2d"],
    "body": [
      "\\addplot [",
      "\tdomain=${1:-10}:${2:10},",
      "\tsamples=70,",
      "\tcolor=${3:blue},",
      "\t]",
      "\t{${4:x^2 + 2*x + 1}};",
      "\\addlegendentry{$${5:x^2 + 2x + 1}$}",
      "$0"
    ],
    "description": "Plot a 2D Graph in the 2D graph environment, noted that this can also be used in the 3D environment."
  },
  "Plot Circle 2D": {
    "prefix": ["plotcircle2d", "\\plotcircle2d"],
    "body": [
      "\\addplot [",
      "\tdomain=0:2*3.14159265,",
      "\tsamples=70,",
      "\tcolor=${4:blue},",
      "\t]",
      "\t({${1:r}*cos(t)+${2:a}},{${1:r}*sin(t)+${3:b}});",
      "\\addlegendentry{$(x-${2:a})^2+(y-${3:b})^2=${1:r}^2$}$0"
    ],
    "description": "Plot a 2D Circle in the 2D graph environment, noted that this can also be used in the 3D environment."
  },
  "Plot Line 2D": {
    "prefix": ["plotline2d", "\\plotline2d"],
    "body": [
      "\\addplot [",
      "\tdomain=${4:x1}:${5:x2},",
      "\tsamples=70,",
      "\tcolor=${3:blue},",
      "\t]",
      "\t{${1:a}*x+${2:b}};",
      "\\addlegendentry{$ y=${1:a}x+${2:b}$}$0"
    ],
    "description": "Plot a 2D Line in the 2D graph environment, noted that this can also be used in the 3D environment."
  },
  "Plot Ellipse 2D": {
    "prefix": ["plotellipse2d", "\\plotellipse2d"],
    "body": [
      "\\addplot [",
      "\tdomain=0:2*3.14159265,",
      "\tsamples=70,",
      "\tcolor=${5:blue},",
      "\t]",
      "\t({${1:a}*cos(t)+${3:x}},{${2:b}*sin(t)+${4:y}});",
      "\\addlegendentry{$\\frac{(x-${3:x})^2}{${1:a}^2}+\\frac{(y-${4:y})^2}{${2:b}^2}=1$}$0"
    ],
    "description": "Plot a 2D Ellipse in the 2D graph environment, noted that this can also be used in the 3D environment."
  },
  "Plot Quadratic Function 2D by Point": {
    "prefix": [
      "plotquadraticfunction2dbypoint",
      "\\plotquadraticfunction2dbypoint"
    ],
    "body": [
      "\\addplot [",
      "\tdomain=${4:x1}:${5:x2},",
      "\tsamples=70,",
      "\tcolor=${6:blue},",
      "\t]",
      "\t{${1:a}*(x-${2:m})*(x-${2:m})+${3:b}};",
      "\\addlegendentry{$ y=${1:a}(x-${2:m})^2+${3:b}$}$0"
    ],
    "description": "Plot a 2D graph of a quadratic function in the 2D graph environment by the given extrema, noted that this can also be used in the 3D environment."
  },
  "Plot Smooth Curve By Point Set": {
    "prefix": ["plotsmoothcurvebypointset", "\\plotsmoothcurvebypointset"],
    "body": [
      "\\addplot+[smooth]",
      "coordinates",
      "{",
      "${1:seperate the coordinates with spaces}",
      "};$0"
    ],
    "description": "Plot a Smooth Curve by point set (2D)."
  },
  "Create 3D Plot Environment": {
    "prefix": ["plotenvironment3d", "\\plotenvironment3d"],
    "body": [
      "\\begin{tikzpicture}",
      "\\begin{axis}[",
      "legend pos=outer north east,",
      "title=${1:Example},",
      "axis lines =${2| box, left, middle, center, right, none|},",
      "colormap/${3|hot,hot2,jet,blackwhite,bluered,cool,greenyellow,redyellow,violet|},",
      "xlabel = \\$x\\$,",
      "ylabel = \\$y\\$,",
      "zlabel = \\$z\\$,",
      "variable = t,",
      "trig format plots = rad,",
      "]",
      "$4",
      "\\end{axis}",
      "\\end{tikzpicture}$0"
    ],
    "description": "Create a 3DPlot Environment of pgfplots. The style declarations are already included in the snippet."
  },
  "Plot 3D Graph": {
    "prefix": ["plotgraph3d", "\\plotgraph3d"],
    "body": [
      "\\addplot3[",
      "\t${1|surf,mesh|},",
      "\tsamples=50,",
      "]",
      "{${2:x^2+y^2}};",
      "\\addlegendentry{\\$${3:x}\\$}$0"
    ],
    "description": "Plot a 3D Graph in the 3D graph environment created."
  },
  "Create Align* Environment in Text": {
    "prefix": ["aligntext", "\\aligntext"],
    "body": ["\\begin{align*}", "\t$1", "\\end{align*}$0"],
    "description": "Create an align environment when the context is in the text environment."
  },
  "Insert Problem Solving Index": {
    "prefix": ["problemindex", "\\problemindex"],
    "body": ["\\noindent\\textbf{$1} $0"],
    "description": "Insert problem solving index format."
  },
  "Insert Solution Notation": {
    "prefix": ["solution", "\\solution"],
    "body": ["\\textit{ Sol. }"],
    "description": "Insert italic 'Sol.'"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/javascript/react-native-ts.json`:

```````json
{
  "statefulComponent": {
    "prefix": "rnc",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "import { View } from 'react-native';",
      "",
      "// import { Container } from './styles';",
      "",
      "export default class ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} extends Component {",
      "  render() {",
      "    return <View />;",
      "  }",
      "}",
      ""
    ],
    "description": "Create React Native Stateful Component"
  },
  "statelessComponent": {
    "prefix": "rnsc",
    "body": [
      "import React from 'react';",
      "",
      "import { View } from 'react-native';",
      "",
      "// import { Container } from './styles';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} = () => <View />;",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create React Native Stateless Component"
  },
  "componentFunctional": {
    "prefix": "rnfc",
    "body": [
      "import React from 'react';",
      "import { View } from 'react-native';",
      "",
      "// import { Container } from './styles';",
      "",
      "export default function ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}() {",
      "  return (",
      "    <View />",
      "  );",
      "}",
      ""
    ],
    "description": "Create React Native Functional Component"
  },
  "componentFunctionalTypescript": {
    "prefix": "rnfcc",
    "body": [
      "import React from 'react';",
      "import { View } from 'react-native';",
      "",
      "// import { Container } from './styles';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}: React.FC = () => {",
      "  return <View />;",
      "}",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};"
    ],
    "description": "Create React Native TypeScript Functional Component"
  },
  "styles": {
    "prefix": "styled-rn",
    "body": [
      "import styled from 'styled-components/native';",
      "",
      "export const ${1:Container} = styled.${2:View}`",
      "  ${3}",
      "`;",
      ""
    ],
    "description": "Create React Native Styled Components file"
  },
  "StyleSheet": {
    "prefix": "rn-stylesheet",
    "body": [
      "const ${1:styles} = StyleSheet.create({",
      "    ${2:container}: {",
      "        ${3}",
      "    },",
      "});",
      ""
    ],
    "description": "Create React Native Styled Components StyleSheet"
  },
  "justifyContent": {
    "prefix": "just",
    "body": "justifyContent: '${1:center}',",
    "description": "justifyContent"
  },
  "alignItems": {
    "prefix": "align",
    "body": "alignItems: '${1:center}',",
    "description": "alignItems"
  },
  "alignSelf": {
    "prefix": "align",
    "body": "alignSelf: '${1:center}',",
    "description": "alignSelf"
  },
  "alignContent": {
    "prefix": "align",
    "body": "alignContent: '${1}',",
    "description": "alignContent"
  },
  "aspectRatio": {
    "prefix": "as",
    "body": "aspectRatio: '${1}',",
    "description": "aspectRatio"
  },
  "borderBottomWidth": {
    "prefix": "bor",
    "body": "borderBottomWidth: ${1},",
    "description": "borderBottomWidth"
  },
  "borderLeftWidth": {
    "prefix": "bor",
    "body": "borderLeftWidth: ${1},",
    "description": "borderLeftWidth"
  },
  "borderRightWidth": {
    "prefix": "bor",
    "body": "borderRightWidth: ${1},",
    "description": "borderRightWidth"
  },
  "borderTopWidth": {
    "prefix": "bor",
    "body": "borderTopWidth: ${1},",
    "description": "borderTopWidth"
  },
  "borderWidth": {
    "prefix": "bor",
    "body": "borderWidth: ${1},",
    "description": "borderWidth"
  },
  "borderColor": {
    "prefix": "bor",
    "body": "borderColor: ${1},",
    "description": "borderColor"
  },
  "borderRadius": {
    "prefix": "bor",
    "body": "borderRadius: ${1},",
    "description": "borderRadius"
  },
  "borderLeftColor": {
    "prefix": "bor",
    "body": "borderLeftColor: ${1},",
    "description": "borderLeftColor"
  },
  "borderRightColor": {
    "prefix": "bor",
    "body": "borderRightColor: ${1},",
    "description": "borderRightColor"
  },
  "borderTopColor": {
    "prefix": "bor",
    "body": "borderTopColor: ${1},",
    "description": "borderTopColor"
  },
  "borderBottomColor": {
    "prefix": "bor",
    "body": "borderBottomColor: ${1},",
    "description": "borderBottomColor"
  },
  "borderBottomLeftRadius": {
    "prefix": "bor",
    "body": "borderBottomLeftRadius: ${1},",
    "description": "borderBottomLeftRadius"
  },
  "borderBottomRightRadius": {
    "prefix": "bor",
    "body": "borderBottomRightRadius: ${1},",
    "description": "borderBottomRightRadius"
  },
  "borderTopLeftRadius": {
    "prefix": "bor",
    "body": "borderTopLeftRadius: ${1},",
    "description": "borderTopLeftRadius"
  },
  "borderTopRightRadius": {
    "prefix": "bor",
    "body": "borderTopRightRadius: ${1},",
    "description": "borderTopRightRadius"
  },
  "backgroundColor": {
    "prefix": "bac",
    "body": "backgroundColor: ${1},",
    "description": "backgroundColor"
  },
  "display": {
    "prefix": "di",
    "body": "display: '${1:none}',",
    "description": "display"
  },
  "opacity": {
    "prefix": "op",
    "body": "opacity: ${1},",
    "description": "opacity"
  },
  "shadowColor": {
    "prefix": "sha",
    "body": "shadowColor: '${1:none}',",
    "description": "shadowColor"
  },
  "shadowOffset": {
    "prefix": "sha",
    "body": "shadowOffset: ${1},",
    "description": "shadowOffset"
  },
  "shadowOpacity": {
    "prefix": "sha",
    "body": "shadowOpacity: ${1},",
    "description": "shadowOpacity"
  },
  "shadowRadius": {
    "prefix": "sha",
    "body": "shadowRadius: ${1},",
    "description": "shadowRadius"
  },
  "elevation": {
    "prefix": "e",
    "body": "elevation: ${1},",
    "description": "elevation"
  },
  "flex": {
    "prefix": "flex",
    "body": "flex: ${1},",
    "description": "flex"
  },
  "flexBasis": {
    "prefix": "flex",
    "body": "flexBasis: '${1}',",
    "description": "flexBasis"
  },
  "flexDirection": {
    "prefix": "flex",
    "body": "flexDirection: '${1:column}',",
    "description": "flexDirection"
  },
  "flexGrow": {
    "prefix": "flex",
    "body": "flexGrow: '${1}',",
    "description": "flexGrow"
  },
  "flexShrink": {
    "prefix": "flex",
    "body": "flexShrink: '${1}',",
    "description": "flexShrink"
  },
  "flexWrap": {
    "prefix": "flex",
    "body": "flexWrap: '${1}',",
    "description": "flexWrap"
  },
  "fontSize": {
    "prefix": "fo",
    "body": "fontSize: ${1},",
    "description": "fontSize"
  },
  "fontStyle": {
    "prefix": "fo",
    "body": "fontStyle: '${1:normal}',",
    "description": "fontStyle"
  },
  "fontFamily": {
    "prefix": "fo",
    "body": "fontFamily: '${1}',",
    "description": "fontFamily"
  },
  "fontWeight": {
    "prefix": "fo",
    "body": "fontWeight: '${1:normal}',",
    "description": "fontWeight"
  },
  "height": {
    "prefix": "h",
    "body": "height: ${1},",
    "description": "height"
  },
  "left": {
    "prefix": "l",
    "body": "left: ${1},",
    "description": "left"
  },
  "margin": {
    "prefix": "mar",
    "body": "margin: '${1}',",
    "description": "margin"
  },
  "marginBottom": {
    "prefix": "mar",
    "body": "marginBottom: ${1},",
    "description": "marginBottom"
  },
  "marginHorizontal": {
    "prefix": "mar",
    "body": "marginHorizontal: '${1}',",
    "description": "marginHorizontal"
  },
  "marginLeft": {
    "prefix": "mar",
    "body": "marginLeft: ${1},",
    "description": "marginLeft"
  },
  "marginRight": {
    "prefix": "mar",
    "body": "marginRight: ${1},",
    "description": "marginRight"
  },
  "marginTop": {
    "prefix": "mar",
    "body": "marginTop: ${1},",
    "description": "marginTop"
  },
  "marginVertical": {
    "prefix": "mar",
    "body": "marginVertical: '${1}',",
    "description": "marginVertical"
  },
  "maxHeight": {
    "prefix": "max",
    "body": "maxHeight: ${1},",
    "description": "maxHeight"
  },
  "maxWidth": {
    "prefix": "max",
    "body": "maxWidth: ${1},",
    "description": "maxWidth"
  },
  "minHeight": {
    "prefix": "min",
    "body": "minHeight: ${1},",
    "description": "minHeight"
  },
  "minWidth": {
    "prefix": "min",
    "body": "minWidth: ${1},",
    "description": "minWidth"
  },
  "overflow": {
    "prefix": "over",
    "body": "overflow: '${1}',",
    "description": "overflow"
  },
  "padding": {
    "prefix": "padding",
    "body": "padding: ${1},",
    "description": "padding"
  },
  "paddingBottom": {
    "prefix": "padding",
    "body": "paddingBottom: ${1},",
    "description": "paddingBottom"
  },
  "paddingHorizontal": {
    "prefix": "padding",
    "body": "paddingHorizontal: ${1},",
    "description": "paddingHorizontal"
  },
  "paddingLeft": {
    "prefix": "padding",
    "body": "paddingLeft: ${1},",
    "description": "paddingLeft"
  },
  "paddingRight": {
    "prefix": "padding",
    "body": "paddingRight: ${1},",
    "description": "paddingRight"
  },
  "paddingTop": {
    "prefix": "padding",
    "body": "paddingTop: ${1},",
    "description": "paddingTop"
  },
  "paddingVertical": {
    "prefix": "padding",
    "body": "paddingVertical: ${1},",
    "description": "paddingVertical"
  },
  "position": {
    "prefix": "pos",
    "body": "position: ${1},",
    "description": "position"
  },
  "right": {
    "prefix": "ri",
    "body": "right: ${1},",
    "description": "right"
  },
  "top": {
    "prefix": "top",
    "body": "top: ${1},",
    "description": "top"
  },
  "width": {
    "prefix": "w",
    "body": "width: ${1},",
    "description": "width"
  },
  "zIndex": {
    "prefix": "z",
    "body": "zIndex: ${1},",
    "description": "zIndex"
  },
  "api": {
    "prefix": "api",
    "body": [
      "import axios from 'axios';",
      "",
      "const api = axios.create({",
      "  baseURL: ${1},",
      "});",
      "",
      "export default api;",
      ""
    ],
    "description": "Create Axios Configuration file"
  },
  "region": {
    "prefix": "region",
    "body": ["//#region ${1}", "${2}", "//#endregion"],
    "description": "Create region"
  },
  "regionStartEnd": {
    "prefix": "#regionStartEnd",
    "body": ["//#region ${1}", "${2}", "//#endregion"],
    "description": "Create region"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/javascript/typescript.json`:

```````json
{
  "Constructor": {
    "prefix": "ctor",
    "body": ["/**", " *", " */", "constructor() {", "\tsuper();", "\t$0", "}"],
    "description": "Constructor"
  },
  "Class Definition": {
    "prefix": "class",
    "body": [
      "class ${1:name} {",
      "\tconstructor(${2:parameters}) {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Class Definition"
  },
  "Public Method Definition": {
    "prefix": "public method",
    "body": ["/**", " * ${1:name}", " */", "public ${1:name}() {", "\t$0", "}"],
    "description": "Public Method Definition"
  },
  "Private Method Definition": {
    "prefix": "private method",
    "body": ["private ${1:name}() {", "\t$0", "}"],
    "description": "Private Method Definition"
  },
  "Import external module.": {
    "prefix": "import statement",
    "body": ["import { $0 } from \"${1:module}\";"],
    "description": "Import external module."
  },
  "Property getter": {
    "prefix": "get",
    "body": [
      "",
      "public get ${1:value}() : ${2:string} {",
      "\t${3:return $0}",
      "}",
      ""
    ],
    "description": "Property getter"
  },
  "Log to the console": {
    "prefix": "log",
    "body": ["console.log($1);", "$0"],
    "description": "Log to the console"
  },
  "Log warning to console": {
    "prefix": "warn",
    "body": ["console.warn($1);", "$0"],
    "description": "Log warning to the console"
  },
  "Log error to console": {
    "prefix": "error",
    "body": ["console.error($1);", "$0"],
    "description": "Log error to the console"
  },
  "Define a full property": {
    "prefix": "prop",
    "body": [
      "",
      "private _${1:value} : ${2:string};",
      "public get ${1:value}() : ${2:string} {",
      "\treturn this._${1:value};",
      "}",
      "public set ${1:value}(v : ${2:string}) {",
      "\tthis._${1:value} = v;",
      "}",
      ""
    ],
    "description": "Define a full property"
  },
  "Triple-slash reference": {
    "prefix": "ref",
    "body": ["/// <reference path=\"$1\" />", "$0"],
    "description": "Triple-slash reference"
  },
  "Property setter": {
    "prefix": "set",
    "body": [
      "",
      "public set ${1:value}(v : ${2:string}) {",
      "\tthis.$3 = v;",
      "}",
      ""
    ],
    "description": "Property setter"
  },
  "Throw Exception": {
    "prefix": "throw",
    "body": ["throw \"$1\";", "$0"],
    "description": "Throw Exception"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      "\tconst ${3:element} = ${2:array}[${1:index}];",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-Each Loop using =>": {
    "prefix": "foreach =>",
    "body": ["${1:array}.forEach(${2:element} => {", "\t$0", "});"],
    "description": "For-Each Loop using =>"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\tif (${2:object}.hasOwnProperty(${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": ["for (const ${1:iterator} of ${2:object}) {", "\t$0", "}"],
    "description": "For-Of Loop"
  },
  "Function Statement": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:params}:${3:type}) {", "\t$0", "}"],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": ["if (${1:condition}) {", "\t$0", "} else {", "\t", "}"],
    "description": "If-Else Statement"
  },
  "New Statement": {
    "prefix": "new",
    "body": ["const ${1:name} = new ${2:type}(${3:arguments});$0"],
    "description": "New Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "While Statement"
  },
  "Do-While Statement": {
    "prefix": "dowhile",
    "body": ["do {", "\t$0", "} while (${1:condition});"],
    "description": "Do-While Statement"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": ["try {", "\t$0", "} catch (${1:error}) {", "\t", "}"],
    "description": "Try-Catch Statement"
  },
  "Set Timeout Function": {
    "prefix": "settimeout",
    "body": ["setTimeout(() => {", "\t$0", "}, ${1:timeout});"],
    "description": "Set Timeout Function"
  },
  "Region Start": {
    "prefix": "#region",
    "body": ["//#region $0"],
    "description": "Folding Region Start"
  },
  "Region End": {
    "prefix": "#endregion",
    "body": ["//#endregion"],
    "description": "Folding Region End"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/javascript/react-native.json`:

```````json
{
  "statefulComponent": {
    "prefix": "rnc",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "import { View } from 'react-native';",
      "",
      "// import { Container } from './styles';",
      "",
      "export default class ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} extends Component {",
      "  render() {",
      "    return <View />;",
      "  }",
      "}",
      ""
    ],
    "description": "Create React Native Stateful Component"
  },
  "statefulReduxComponent": {
    "prefix": "rnrc",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "import { View } from 'react-native';",
      "",
      "import { bindActionCreators } from 'redux';",
      "import { connect } from 'react-redux';",
      "",
      "// import { Container } from './styles';",
      "",
      "class ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} extends Component {",
      "  render() {",
      "    return <View />;",
      "  }",
      "}",
      "",
      "const mapStateToProps = state => ({});",
      "",
      "// const mapDispatchToProps = dispatch =>",
      "//   bindActionCreators(Actions, dispatch);",
      "",
      "export default connect(",
      "  mapStateToProps,",
      "  // mapDispatchToProps",
      ")(${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}});",
      ""
    ],
    "description": "Create React Native Stateful Redux Component"
  },
  "statelessComponent": {
    "prefix": "rnsc",
    "body": [
      "import React from 'react';",
      "",
      "import { View } from 'react-native';",
      "",
      "// import { Container } from './styles';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} = () => <View />;",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create React Native Stateless Component"
  },
  "componentFunctional": {
    "prefix": "rnfc",
    "body": [
      "import React from 'react';",
      "import { View } from 'react-native';",
      "",
      "// import { Container } from './styles';",
      "",
      "export default function ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}() {",
      "  return (",
      "    <View />",
      "  );",
      "}",
      ""
    ],
    "description": "Create React Native Functional Component"
  },
  "componentFunctionalTypescript": {
    "prefix": "rnfcc",
    "body": [
      "import React from 'react';",
      "import { View } from 'react-native';",
      "",
      "// import { Container } from './styles';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} = () => {",
      "  return <View />;",
      "}",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};"
    ],
    "description": "Create React Native Functional Component"
  },
  "styles": {
    "prefix": "styled-rn",
    "body": [
      "import styled from 'styled-components/native';",
      "",
      "export const ${1:Container} = styled.${2:View}`",
      "  ${3}",
      "`;",
      ""
    ],
    "description": "Create React Native Styled Components file"
  },
  "StyleSheet": {
    "prefix": "rn-stylesheet",
    "body": [
      "const ${1:styles} = StyleSheet.create({",
      "    ${2:container}: {",
      "        ${3}",
      "    },",
      "});",
      ""
    ],
    "description": "Create React Native Styled Components StyleSheet"
  },
  "justifyContent": {
    "prefix": "just",
    "body": "justifyContent: '${1:center}',",
    "description": "justifyContent"
  },
  "alignItems": {
    "prefix": "align",
    "body": "alignItems: '${1:center}',",
    "description": "alignItems"
  },
  "alignSelf": {
    "prefix": "align",
    "body": "alignSelf: '${1:center}',",
    "description": "alignSelf"
  },
  "alignContent": {
    "prefix": "align",
    "body": "alignContent: '${1}',",
    "description": "alignContent"
  },
  "aspectRatio": {
    "prefix": "as",
    "body": "aspectRatio: '${1}',",
    "description": "aspectRatio"
  },
  "borderBottomWidth": {
    "prefix": "bor",
    "body": "borderBottomWidth: ${1},",
    "description": "borderBottomWidth"
  },
  "borderLeftWidth": {
    "prefix": "bor",
    "body": "borderLeftWidth: ${1},",
    "description": "borderLeftWidth"
  },
  "borderRightWidth": {
    "prefix": "bor",
    "body": "borderRightWidth: ${1},",
    "description": "borderRightWidth"
  },
  "borderTopWidth": {
    "prefix": "bor",
    "body": "borderTopWidth: ${1},",
    "description": "borderTopWidth"
  },
  "borderWidth": {
    "prefix": "bor",
    "body": "borderWidth: ${1},",
    "description": "borderWidth"
  },
  "borderColor": {
    "prefix": "bor",
    "body": "borderColor: ${1},",
    "description": "borderColor"
  },
  "borderRadius": {
    "prefix": "bor",
    "body": "borderRadius: ${1},",
    "description": "borderRadius"
  },
  "borderLeftColor": {
    "prefix": "bor",
    "body": "borderLeftColor: ${1},",
    "description": "borderLeftColor"
  },
  "borderRightColor": {
    "prefix": "bor",
    "body": "borderRightColor: ${1},",
    "description": "borderRightColor"
  },
  "borderTopColor": {
    "prefix": "bor",
    "body": "borderTopColor: ${1},",
    "description": "borderTopColor"
  },
  "borderBottomColor": {
    "prefix": "bor",
    "body": "borderBottomColor: ${1},",
    "description": "borderBottomColor"
  },
  "borderBottomLeftRadius": {
    "prefix": "bor",
    "body": "borderBottomLeftRadius: ${1},",
    "description": "borderBottomLeftRadius"
  },
  "borderBottomRightRadius": {
    "prefix": "bor",
    "body": "borderBottomRightRadius: ${1},",
    "description": "borderBottomRightRadius"
  },
  "borderTopLeftRadius": {
    "prefix": "bor",
    "body": "borderTopLeftRadius: ${1},",
    "description": "borderTopLeftRadius"
  },
  "borderTopRightRadius": {
    "prefix": "bor",
    "body": "borderTopRightRadius: ${1},",
    "description": "borderTopRightRadius"
  },
  "backgroundColor": {
    "prefix": "bac",
    "body": "backgroundColor: ${1},",
    "description": "backgroundColor"
  },
  "display": {
    "prefix": "di",
    "body": "display: '${1:none}',",
    "description": "display"
  },
  "opacity": {
    "prefix": "op",
    "body": "opacity: ${1},",
    "description": "opacity"
  },
  "shadowColor": {
    "prefix": "sha",
    "body": "shadowColor: '${1:none}',",
    "description": "shadowColor"
  },
  "shadowOffset": {
    "prefix": "sha",
    "body": "shadowOffset: ${1},",
    "description": "shadowOffset"
  },
  "shadowOpacity": {
    "prefix": "sha",
    "body": "shadowOpacity: ${1},",
    "description": "shadowOpacity"
  },
  "shadowRadius": {
    "prefix": "sha",
    "body": "shadowRadius: ${1},",
    "description": "shadowRadius"
  },
  "elevation": {
    "prefix": "e",
    "body": "elevation: ${1},",
    "description": "elevation"
  },
  "flex": {
    "prefix": "flex",
    "body": "flex: ${1},",
    "description": "flex"
  },
  "flexBasis": {
    "prefix": "flex",
    "body": "flexBasis: '${1}',",
    "description": "flexBasis"
  },
  "flexDirection": {
    "prefix": "flex",
    "body": "flexDirection: '${1:column}',",
    "description": "flexDirection"
  },
  "flexGrow": {
    "prefix": "flex",
    "body": "flexGrow: '${1}',",
    "description": "flexGrow"
  },
  "flexShrink": {
    "prefix": "flex",
    "body": "flexShrink: '${1}',",
    "description": "flexShrink"
  },
  "flexWrap": {
    "prefix": "flex",
    "body": "flexWrap: '${1}',",
    "description": "flexWrap"
  },
  "fontSize": {
    "prefix": "fo",
    "body": "fontSize: ${1},",
    "description": "fontSize"
  },
  "fontStyle": {
    "prefix": "fo",
    "body": "fontStyle: '${1:normal}',",
    "description": "fontStyle"
  },
  "fontFamily": {
    "prefix": "fo",
    "body": "fontFamily: '${1}',",
    "description": "fontFamily"
  },
  "fontWeight": {
    "prefix": "fo",
    "body": "fontWeight: '${1:normal}',",
    "description": "fontWeight"
  },
  "height": {
    "prefix": "h",
    "body": "height: ${1},",
    "description": "height"
  },
  "left": {
    "prefix": "l",
    "body": "left: ${1},",
    "description": "left"
  },
  "margin": {
    "prefix": "mar",
    "body": "margin: '${1}',",
    "description": "margin"
  },
  "marginBottom": {
    "prefix": "mar",
    "body": "marginBottom: ${1},",
    "description": "marginBottom"
  },
  "marginHorizontal": {
    "prefix": "mar",
    "body": "marginHorizontal: '${1}',",
    "description": "marginHorizontal"
  },
  "marginLeft": {
    "prefix": "mar",
    "body": "marginLeft: ${1},",
    "description": "marginLeft"
  },
  "marginRight": {
    "prefix": "mar",
    "body": "marginRight: ${1},",
    "description": "marginRight"
  },
  "marginTop": {
    "prefix": "mar",
    "body": "marginTop: ${1},",
    "description": "marginTop"
  },
  "marginVertical": {
    "prefix": "mar",
    "body": "marginVertical: '${1}',",
    "description": "marginVertical"
  },
  "maxHeight": {
    "prefix": "max",
    "body": "maxHeight: ${1},",
    "description": "maxHeight"
  },
  "maxWidth": {
    "prefix": "max",
    "body": "maxWidth: ${1},",
    "description": "maxWidth"
  },
  "minHeight": {
    "prefix": "min",
    "body": "minHeight: ${1},",
    "description": "minHeight"
  },
  "minWidth": {
    "prefix": "min",
    "body": "minWidth: ${1},",
    "description": "minWidth"
  },
  "overflow": {
    "prefix": "over",
    "body": "overflow: '${1}',",
    "description": "overflow"
  },
  "padding": {
    "prefix": "padding",
    "body": "padding: ${1},",
    "description": "padding"
  },
  "paddingBottom": {
    "prefix": "padding",
    "body": "paddingBottom: ${1},",
    "description": "paddingBottom"
  },
  "paddingHorizontal": {
    "prefix": "padding",
    "body": "paddingHorizontal: ${1},",
    "description": "paddingHorizontal"
  },
  "paddingLeft": {
    "prefix": "padding",
    "body": "paddingLeft: ${1},",
    "description": "paddingLeft"
  },
  "paddingRight": {
    "prefix": "padding",
    "body": "paddingRight: ${1},",
    "description": "paddingRight"
  },
  "paddingTop": {
    "prefix": "padding",
    "body": "paddingTop: ${1},",
    "description": "paddingTop"
  },
  "paddingVertical": {
    "prefix": "padding",
    "body": "paddingVertical: ${1},",
    "description": "paddingVertical"
  },
  "position": {
    "prefix": "pos",
    "body": "position: ${1},",
    "description": "position"
  },
  "right": {
    "prefix": "ri",
    "body": "right: ${1},",
    "description": "right"
  },
  "top": {
    "prefix": "top",
    "body": "top: ${1},",
    "description": "top"
  },
  "width": {
    "prefix": "w",
    "body": "width: ${1},",
    "description": "width"
  },
  "zIndex": {
    "prefix": "z",
    "body": "zIndex: ${1},",
    "description": "zIndex"
  },
  "api": {
    "prefix": "api",
    "body": [
      "import axios from 'axios';",
      "",
      "const api = axios.create({",
      "  baseURL: ${1},",
      "});",
      "",
      "export default api;",
      ""
    ],
    "description": "Create Axios Configuration file"
  },
  "region": {
    "prefix": "region",
    "body": ["//#region ${1}", "${2}", "//#endregion"],
    "description": "Create region"
  },
  "regionStartEnd": {
    "prefix": "#regionStartEnd",
    "body": ["//#region ${1}", "${2}", "//#endregion"],
    "description": "Create region"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/javascript/react-ts.json`:

```````json
{
  "destructuring of props": {
    "prefix": "dp",
    "body": ["const { ${1:name} } = this.props"]
  },
  "destructuring of state": {
    "prefix": "ds",
    "body": ["const { ${1:name} } = this.state"]
  },
  "reactClassCompoment": {
    "prefix": "rcc",
    "body": "import React, { Component } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1}",
    "description": "Creates a React component class"
  },
  "reactJustClassCompoment": {
    "prefix": "rcjc",
    "body": "class ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
    "description": "Creates a React component class"
  },
  "reactClassCompomentPropTypes": {
    "prefix": "rccp",
    "body": "import React, { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
    "description": "Creates a React component class with PropTypes"
  },
  "reactClassCompomentWithMethods": {
    "prefix": "rcfc",
    "body": "import React, { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t}\n\n\tcomponentWillMount () {\n\n\t}\n\n\tcomponentDidMount () {\n\n\t}\n\n\tcomponentWillReceiveProps (nextProps) {\n\n\t}\n\n\tshouldComponentUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate (prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount () {\n\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
    "description": "Creates a React component class with PropTypes and all lifecycle methods"
  },
  "reactFunctionComponent": {
    "prefix": "rfc",
    "body": "import React from 'react'\n\nexport const ${TM_FILENAME_BASE} = (props : {}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
    "description": "Creates a React functional component without PropTypes"
  },
  "reactFunctionComponentWithEmotion": {
    "prefix": "rfce",
    "body": "import { css } from '@emotion/core'\nimport React from 'react'\n\nexport const ${TM_FILENAME_BASE} = (props: {}) => {\n\treturn (\n\t\t<div css={css``}>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
    "description": "Creates a React functional component with emotion import"
  },
  "classConstructor": {
    "prefix": "con",
    "body": "constructor (props) {\n\tsuper(props)\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props as arguments"
  },
  "classConstructorContext": {
    "prefix": "conc",
    "body": "constructor (props, context) {\n\tsuper(props, context)\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props and context as arguments"
  },
  "componentWillMount": {
    "prefix": "cwm",
    "body": "\ncomponentWillMount () {\n\t$0\n}\n",
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": "componentDidMount () {\n\t$0\n}\n",
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": "componentWillReceiveProps (nextProps) {\n\t$0\n}\n",
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "componentGetDerivedStateFromProps": {
    "prefix": "cgd",
    "body": "\nstatic getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked after a component is instantiated as well as when it receives new props. It should return an object to update state, or null to indicate that the new props do not require any state updates."
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": "shouldComponentUpdate (nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentWillUpdate": {
    "prefix": "cwup",
    "body": "componentWillUpdate (nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked immediately before rendering when new props or state are being received."
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": "componentDidUpdate (prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "cwun",
    "body": "componentWillUnmount () {\n\t$0\n}\n",
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "componentRender": {
    "prefix": "ren",
    "body": "render () {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
    "description": "When called, it should examine this.props and this.state and return a single child element."
  },
  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState($0)",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentSetStateFunc": {
    "prefix": "ssf",
    "body": "this.setState((state, props) => { return { $0 }})\n",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentProps": {
    "prefix": "tp",
    "body": "this.props.$0",
    "description": "Access component's props"
  },
  "componentState": {
    "prefix": "ts",
    "body": "this.state.$0",
    "description": "Access component's state"
  },
  "propTypes": {
    "prefix": "rpt",
    "body": "$1.propTypes = {\n\t$2\n}",
    "description": "Creates empty propTypes declaration"
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  },
  "jsx element": {
    "prefix": "j",
    "body": "<${1:elementName}>\n\t$0\n</${1}>",
    "description": "an element"
  },
  "jsx element self closed": {
    "prefix": "jc",
    "body": "<${1:elementName} />",
    "description": "an element self closed"
  },
  "jsx elements map": {
    "prefix": "jm",
    "body": "{${1:array}.map((item) => <${2:elementName} key={item.id}>\n\t$0\n</${2}>)}",
    "description": "an element self closed"
  },
  "jsx elements map with return": {
    "prefix": "jmr",
    "body": "{${1:array}.map((item) => {\n\treturn <${2:elementName} key={item.id}>\n\t$0\n</${2}>\n})}",
    "description": "an element self closed"
  },
  "jsx element wrap selection": {
    "prefix": "jsx wrap selection with element",
    "body": "<${1:elementName}>\n\t{$TM_SELECTED_TEXT}\n</${1}>",
    "description": "an element"
  },
  "useState": {
    "prefix": "us",
    "body": "const [${1:val}, set${2:setterName}] = useState(${3:defVal})",
    "description": "use state hook"
  },
  "useEffect": {
    "prefix": "ue",
    "body": ["useEffect(() => {", "\t$1", "}, [${3:dependencies}])$0"],
    "description": "React useEffect() hook"
  },
  "useEffect with cleanup": {
    "prefix": "uec",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\n\treturn () => {",
      "\t\t$2",
      "\t}",
      "}, [${3:dependencies}])$0"
    ],
    "description": "React useEffect() hook with a cleanup function"
  },
  "createContext": {
    "prefix": "cc",
    "body": [
      "export const $1 = createContext<$2>(",
      "\t(null as any) as $2",
      ")"
    ],
    "description": "creates a react context"
  },
  "useContext": {
    "prefix": "uc",
    "body": ["const $1 = useContext($2)$0"],
    "description": "React useContext() hook"
  },
  "useRef": {
    "prefix": "ur",
    "body": ["const ${1:elName}El = useRef(null)$0"],
    "description": "React useContext() hook"
  },
  "useCallback": {
    "prefix": "ucb",
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => {",
      "\t\t${2:doSomething}(${3:a}, ${4:b})",
      "\t},",
      "\t[${5:a}, ${6:b}],",
      ")$0"
    ],
    "description": "React useCallback() hook"
  },
  "useMemo": {
    "prefix": "ume",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
    ],
    "description": "React useMemo() hook"
  },
  "describeBlock": {
    "prefix": "desc",
    "body": ["describe('$1', () => {", "  $0", "})", ""],
    "description": "Testing `describe` block"
  },
  "testBlock": {
    "prefix": "test",
    "body": ["test('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `test` block"
  },
  "itBlock": {
    "prefix": "tit",
    "body": ["it('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `it` block"
  },
  "itAsyncBlock": {
    "prefix": "tita",
    "body": ["it('should $1', async () => {", "  $0", "})", ""],
    "description": "Testing async `it` block"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/javascript/react.json`:

```````json
{
  "destructuring of props": {
    "prefix": "dp",
    "body": ["const { ${1:name} } = this.props"]
  },
  "destructuring of state": {
    "prefix": "ds",
    "body": ["const { ${1:name} } = this.state"]
  },
  "if falsy return null": {
    "prefix": "ifr",
    "body": "if (!${1:condition}) {\n\treturn null\n}"
  },
  "reactClassCompoment": {
    "prefix": "rcc",
    "body": "import { Component } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1}",
    "description": "Creates a React component class"
  },
  "reactJustClassCompoment": {
    "prefix": "rcjc",
    "body": "class ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
    "description": "Creates a React component class"
  },
  "reactClassCompomentPropTypes": {
    "prefix": "rccp",
    "body": "import { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
    "description": "Creates a React component class with PropTypes"
  },
  "reactClassCompomentWithMethods": {
    "prefix": "rcfc",
    "body": "import { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t}\n\n\tcomponentWillMount () {\n\n\t}\n\n\tcomponentDidMount () {\n\n\t}\n\n\tcomponentWillReceiveProps (nextProps) {\n\n\t}\n\n\tshouldComponentUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate (prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount () {\n\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
    "description": "Creates a React component class with PropTypes and all lifecycle methods"
  },
  "reactFunctionComponent": {
    "prefix": "rfc",
    "body": "\nconst ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${TM_FILENAME_BASE}",
    "description": "Creates a React function component without PropTypes"
  },
  "reactFunctionComponentWithCustomName": {
    "prefix": "rfcn",
    "body": "\nconst ${1:functionname} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:functionname}",
    "description": "Creates a React function component with custom name"
  },
  "reactFunctionComponentWithEmotion": {
    "prefix": "rfce",
    "body": "import { css } from '@emotion/core'\n\nexport const ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div css={css``}>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
    "description": "Creates a React functional component with emotion"
  },
  "reactStatelessProps": {
    "prefix": "rfcp",
    "body": "import { PropTypes } from 'react'\n\nconst ${TM_FILENAME_BASE} = props => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t)\n}\n\n${1}.propTypes = {\n\t$0\n}\n\nexport default ${1}",
    "description": "Creates a React function component with PropTypes"
  },
  "classConstructor": {
    "prefix": "con",
    "body": "constructor (props) {\n\tsuper(props)\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props as arguments"
  },
  "classConstructorContext": {
    "prefix": "conc",
    "body": "constructor (props, context) {\n\tsuper(props, context)\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props and context as arguments"
  },
  "componentWillMount": {
    "prefix": "cwm",
    "body": "\ncomponentWillMount () {\n\t$0\n}\n",
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": "componentDidMount () {\n\t$0\n}\n",
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": "componentWillReceiveProps (nextProps) {\n\t$0\n}\n",
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "componentGetDerivedStateFromProps": {
    "prefix": "cgd",
    "body": "\nstatic getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked after a component is instantiated as well as when it receives new props. It should return an object to update state, or null to indicate that the new props do not require any state updates."
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": "shouldComponentUpdate (nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentWillUpdate": {
    "prefix": "cwup",
    "body": "componentWillUpdate (nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked immediately before rendering when new props or state are being received."
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": "componentDidUpdate (prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "cwun",
    "body": "componentWillUnmount () {\n\t$0\n}\n",
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "componentRender": {
    "prefix": "ren",
    "body": "render () {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
    "description": "When called, it should examine this.props and this.state and return a single child element."
  },
  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState($0)",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentSetStateFunc": {
    "prefix": "ssf",
    "body": "this.setState((state, props) => { return { $0 }})\n",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentProps": {
    "prefix": "tp",
    "body": "this.props.$0",
    "description": "Access component's props"
  },
  "componentState": {
    "prefix": "ts",
    "body": "this.state.$0",
    "description": "Access component's state"
  },
  "propTypes": {
    "prefix": "rpt",
    "body": "$1.propTypes = {\n\t$2\n}",
    "description": "Creates empty propTypes declaration"
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  },
  "jsx element": {
    "prefix": "j",
    "body": "<${1:elementName}>\n\t$0\n</${1}>",
    "description": "an element"
  },
  "jsx element self closed": {
    "prefix": "jc",
    "body": "<${1:elementName} />",
    "description": "an element self closed"
  },
  "jsx elements map": {
    "prefix": "jm",
    "body": "{${1:array}.map((item) => <${2:elementName} key={item.id}>\n\t$0\n</${2}>)}",
    "description": "an element self closed"
  },
  "jsx elements map with return": {
    "prefix": "jmr",
    "body": "{${1:array}.map((item) => {\n\treturn <${2:elementName} key={item.id}>\n\t$0\n</${2}>\n})}",
    "description": "an element self closed"
  },
  "jsx element wrap selection": {
    "prefix": "jsx wrap selection with element",
    "body": "<${1:elementName}>\n\t{$TM_SELECTED_TEXT}\n</${1}>",
    "description": "an element"
  },
  "useState": {
    "prefix": "us",
    "body": "const [${1:setterName}, set${1:setterName}] = useState(${2:defVal})$0",
    "description": "use state hook"
  },
  "useEffect": {
    "prefix": "ue",
    "body": ["useEffect(() => {", "\t$1", "}, [${3:dependencies}])$0"],
    "description": "React useEffect() hook"
  },
  "useEffect with return": {
    "prefix": "uer",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\n\treturn () => {",
      "\t\t$2",
      "\t}",
      "}, [${3:dependencies}])$0"
    ],
    "description": "React useEffect() hook with return statement"
  },
  "useContext": {
    "prefix": "uc",
    "body": ["const $1 = useContext($2)$0"],
    "description": "React useContext() hook"
  },
  "useRef": {
    "prefix": "ur",
    "body": ["const ${1:elName}El = useRef(null)$0"],
    "description": "React useContext() hook"
  },
  "useCallback": {
    "prefix": "ucb",
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => {",
      "\t\t${2:doSomething}(${3:a}, ${4:b})",
      "\t},",
      "\t[${5:a}, ${6:b}],",
      ")$0"
    ],
    "description": "React useCallback() hook"
  },
  "useMemo": {
    "prefix": "ume",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
    ],
    "description": "React useMemo() hook"
  },
  "describeBlock": {
    "prefix": "desc",
    "body": ["describe('$1', () => {", "  $0", "})", ""],
    "description": "Testing `describe` block"
  },
  "testBlock": {
    "prefix": "test",
    "body": ["test('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `test` block"
  },
  "itBlock": {
    "prefix": "tit",
    "body": ["it('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `it` block"
  },
  "itAsyncBlock": {
    "prefix": "tita",
    "body": ["it('should $1', async () => {", "  $0", "})", ""],
    "description": "Testing async `it` block"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/javascript/javascript.json`:

```````json
{
  "setImmediate": {
    "prefix": "sim",
    "body": "setImmediate(() => {\n\t${0}\n})"
  },
  "await": {
    "prefix": "a",
    "body": "await ${0}"
  },
  "await Promise.all": {
    "prefix": "apa",
    "body": "await Promise.all(${1:value})"
  },
  "await Promise.all with destructuring": {
    "prefix": "apad",
    "body": "const [${0}] = await Promise.all(${1:value})"
  },
  "await Promise.all map": {
    "prefix": "apm",
    "body": "await Promise.all(${1:array}.map(async (${2:value}) => {\n\t${0}\n}))"
  },
  "await sleep": {
    "prefix": "ast",
    "body": "await new Promise((r) => setTimeout(r, ${0}))"
  },
  "Node callback": {
    "prefix": "cb",
    "body": "function (err, ${1:value}) {\n\tif (err) throw err\n\t${0}\n}"
  },
  "process.env": {
    "prefix": "pe",
    "body": "process.env"
  },
  "Promise.all": {
    "prefix": "pa",
    "body": "Promise.all(${1:value})"
  },
  "Promise.resolve": {
    "prefix": "prs",
    "body": "Promise.resolve(${1:value})"
  },
  "Promise.reject": {
    "prefix": "prj",
    "body": "Promise.reject(${1:value})"
  },
  "Promise": {
    "prefix": "p",
    "body": "Promise"
  },
  "new Promise": {
    "prefix": "np",
    "body": "new Promise((resolve, reject) => {\n\t${0}\n})"
  },
  "Promise.then": {
    "prefix": "pt",
    "body": "${1:promise}.then((${2:value}) => {\n\t${0}\n})"
  },
  "Promise.catch": {
    "prefix": "pc",
    "body": "${1:promise}.catch(error => {\n\t${0}\n})"
  },
  "describe": {
    "prefix": "desc",
    "body": "describe('${1:description}', () => {\n\t${0}\n})"
  },
  "describe top level": {
    "prefix": "dt",
    "body": "describe('${TM_FILENAME_BASE}', () => {\n\t${0}\n})"
  },
  "it asynchronous": {
    "prefix": "it",
    "body": "it('${1:description}', async () => {\n\t${0}\n})"
  },
  "it.todo": {
    "prefix": "itt",
    "body": "it.todo('${1:description}')"
  },
  "it with a callback": {
    "prefix": "itd",
    "body": "it('${1:description}', (done) => {\n\t${0}\n})"
  },
  "it synchronous": {
    "prefix": "its",
    "body": "it('${1:description}', () => {\n\t${0}\n})"
  },
  "before": {
    "prefix": "bf",
    "body": "before(async () => {\n\t${0}\n})"
  },
  "beforeAll": {
    "prefix": "ba",
    "body": "beforeAll(async () => {\n\t${0}\n})"
  },
  "beforeEach": {
    "prefix": "bfe",
    "body": "beforeEach(async () => {\n\t${0}\n})"
  },
  "after": {
    "prefix": "aft",
    "body": "after(() => {\n\t${0}\n})"
  },
  "afterEach": {
    "prefix": "afe",
    "body": "afterEach(() => {\n\t${0}\n})"
  },
  "require": {
    "prefix": "rq",
    "body": "require('${1:module}')"
  },
  "const module = require('module')": {
    "prefix": "cr",
    "body": "const ${1:module} = require('${1:module}')"
  },
  "exports.member": {
    "prefix": "em",
    "body": "exports.${1:member} = ${2:value}"
  },
  "module.exports": {
    "prefix": "me",
    "body": "module.exports = ${1:name}"
  },
  "module as class": {
    "prefix": "mec",
    "body": "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}\n\nmodule.exports = ${1:name}\n"
  },
  "event handler": {
    "prefix": "on",
    "body": "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t${0}\n})"
  },
  "dom event cancel default and propagation": {
    "prefix": "evc",
    "body": "ev.preventDefault()\nev.stopPropagation()\nreturn false"
  },
  "addEventListener": {
    "prefix": "ae",
    "body": "${1:document}.addEventListener('${2:event}', ${3:ev} => {\n\t${0}\n})"
  },
  "removeEventListener": {
    "prefix": "rel",
    "body": "${1:document}.removeEventListener('${2:event}', ${3:listener})"
  },
  "getElementById": {
    "prefix": "gi",
    "body": "${1:document}.getElementById('${2:id}')"
  },
  "getElementsByClassName": {
    "prefix": "gc",
    "body": "Array.from(${1:document}.getElementsByClassName('${2:class}'))"
  },
  "getElementsByTagName": {
    "prefix": "gt",
    "body": "Array.from(${1:document}.getElementsByTagName('${2:tag}'))"
  },
  "querySelector": {
    "prefix": "qs",
    "body": "${1:document}.querySelector('${2:selector}')"
  },
  "querySelectorAll": {
    "prefix": "qsa",
    "body": "Array.from(${1:document}.querySelectorAll('${2:selector}'))"
  },
  "createDocumentFragment": {
    "prefix": "cdf",
    "body": "${1:document}.createDocumentFragment(${2:elem})"
  },
  "createElement": {
    "prefix": "cel",
    "body": "${1:document}.createElement(${2:elem})"
  },
  "classList.add": {
    "prefix": "hecla",
    "body": "${1:el}.classList.add('${2:class}')"
  },
  "classList.remove": {
    "prefix": "heclr",
    "body": "${1:el}.classList.remove('${2:class}')"
  },
  "classList.toggle": {
    "prefix": "hect",
    "body": "${1:el}.classList.toggle('${2:class}')"
  },
  "getAttribute": {
    "prefix": "hega",
    "body": "${1:el}.getAttribute('${2:attr}')"
  },
  "removeAttribute": {
    "prefix": "hera",
    "body": "${1:el}.removeAttribute('${2:attr}')"
  },
  "setAttribute": {
    "prefix": "hesa",
    "body": "${1:el}.setAttribute('${2:attr}', ${3:value})"
  },
  "appendChild": {
    "prefix": "heac",
    "body": "${1:el}.appendChild(${2:elem})"
  },
  "removeChild": {
    "prefix": "herc",
    "body": "${1:el}.removeChild(${2:elem})"
  },
  "forEach loop": {
    "prefix": "fe",
    "body": "${1:iterable}.forEach((${2:item}) => {\n\t${0}\n})"
  },
  "map": {
    "prefix": "map",
    "body": "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"
  },
  "reduce": {
    "prefix": "reduce",
    "body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"
  },
  "filter": {
    "prefix": "filter",
    "body": "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"
  },
  "find": {
    "prefix": "find",
    "body": "${1:iterable}.find((${2:item}) => {\n\t${0}\n})"
  },
  "every": {
    "prefix": "every",
    "body": "${1:iterable}.every((${2:item}) => {\n\t${0}\n})"
  },
  "some": {
    "prefix": "some",
    "body": "${1:iterable}.some((${2:item}) => {\n\t${0}\n})"
  },
  "var statement": {
    "prefix": "v",
    "body": "var ${1:name}"
  },
  "var assignment": {
    "prefix": "va",
    "body": "var ${1:name} = ${2:value}"
  },
  "let statement": {
    "prefix": "l",
    "body": "let ${1:name}"
  },
  "const statement": {
    "prefix": "c",
    "body": "const ${1:name}"
  },
  "const statement from destructuring": {
    "prefix": "cd",
    "body": "const { ${2:prop} } = ${1:value}"
  },
  "const statement from array destructuring": {
    "prefix": "cad",
    "body": "const [ ${2:prop} ] = ${1:value}"
  },
  "const assignment awaited": {
    "prefix": "ca",
    "body": "const ${1:name} = await ${2:value}"
  },
  "const destructuring assignment awaited": {
    "prefix": "cda",
    "body": "const { ${1:name} } = await ${2:value}"
  },
  "const arrow function assignment": {
    "prefix": "cf",
    "body": "const ${1:name} = (${2:arguments}) => {\n\treturn ${0}\n}"
  },
  "let assignment awaited": {
    "prefix": "la",
    "body": "let ${1:name} = await ${2:value}"
  },
  "const assignment yielded": {
    "prefix": "cy",
    "body": "const ${1:name} = yield ${2:value}"
  },
  "let assignment yielded": {
    "prefix": "ly",
    "body": "let ${1:name} = yield ${2:value}"
  },
  "const object": {
    "prefix": "co",
    "body": "const ${1:name} = {\n\t${0}\n}"
  },
  "const array": {
    "prefix": "car",
    "body": "const ${1:name} = [\n\t${0}\n]"
  },
  "generate array of integers starting with 1": {
    "prefix": "gari",
    "body": "Array.from({ length: ${1:length} }, (v, k) => k + 1)"
  },
  "generate array of integers starting with 0": {
    "prefix": "gari0",
    "body": "[...Array(${1:length}).keys()]"
  },
  "class": {
    "prefix": "cs",
    "body": "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}"
  },
  "class extends": {
    "prefix": "csx",
    "body": "class ${1:name} extends ${2:base} {\n\tconstructor (${3:arguments}) {\n\t\tsuper(${3:arguments})\n\t\t${0}\n\t}\n}"
  },
  "module export": {
    "prefix": "e",
    "body": "export ${1:member}"
  },
  "module export const": {
    "prefix": "ec",
    "body": "export const ${1:member} = ${2:value}"
  },
  "export named function": {
    "prefix": "ef",
    "body": "export function ${1:member} (${2:arguments}) {\n\t${0}\n}"
  },
  "module default export": {
    "prefix": "ed",
    "body": "export default ${1:member}"
  },
  "module default export function": {
    "prefix": "edf",
    "body": "export default function ${1:name} (${2:arguments}) {\n\t${0}\n}"
  },
  "import module": {
    "prefix": "im",
    "body": "import ${2:*} from '${1:module}'"
  },
  "import module as": {
    "prefix": "ia",
    "body": "import ${2:*} as ${3:name} from '${1:module}'"
  },
  "import module destructured": {
    "prefix": "id",
    "body": "import {$2} from '${1:module}'"
  },
  "typeof": {
    "prefix": "to",
    "body": "typeof ${1:source} === '${2:undefined}'"
  },
  "this": {
    "prefix": "t",
    "body": "this."
  },
  "instanceof": {
    "prefix": "iof",
    "body": "${1:source} instanceof ${2:Object}"
  },
  "let and if statement": {
    "prefix": "lif",
    "body": "let ${0} \n if (${2:condition}) {\n\t${1}\n}"
  },
  "else statement": {
    "prefix": "el",
    "body": "else {\n\t${0}\n}"
  },
  "else if statement": {
    "prefix": "ei",
    "body": "else if (${1:condition}) {\n\t${0}\n}"
  },
  "while iteration decrementing": {
    "prefix": "wid",
    "body": "let ${1:array}Index = ${1:array}.length\nwhile (${1:array}Index--) {\n\t${0}\n}"
  },
  "throw new Error": {
    "prefix": "tn",
    "body": "throw new ${0:error}"
  },
  "try/catch": {
    "prefix": "tc",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
  },
  "try/finally": {
    "prefix": "tf",
    "body": "try {\n\t${0}\n} finally {\n\t\n}"
  },
  "try/catch/finally": {
    "prefix": "tcf",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"
  },
  "anonymous function": {
    "prefix": "fan",
    "body": "function (${1:arguments}) {${0}}"
  },
  "named function": {
    "prefix": "fn",
    "body": "function ${1:name} (${2:arguments}) {\n\t${0}\n}"
  },
  "async function": {
    "prefix": "asf",
    "body": "async function (${1:arguments}) {\n\t${0}\n}"
  },
  "async arrow function": {
    "prefix": "aa",
    "body": "async (${1:arguments}) => {\n\t${0}\n}"
  },
  "immediately-invoked function expression": {
    "prefix": "iife",
    "body": ";(function (${1:arguments}) {\n\t${0}\n})(${2})"
  },
  "async immediately-invoked function expression": {
    "prefix": "aiife",
    "body": ";(async (${1:arguments}) => {\n\t${0}\n})(${2})"
  },
  "arrow function": {
    "prefix": "af",
    "body": "(${1:arguments}) => ${2:statement}"
  },
  "arrow function with destructuring": {
    "prefix": "fd",
    "body": "({${1:arguments}}) => ${2:statement}"
  },
  "arrow function with destructuring returning destructured": {
    "prefix": "fdr",
    "body": "({${1:arguments}}) => ${1:arguments}"
  },
  "arrow function with body": {
    "prefix": "f",
    "body": "(${1:arguments}) => {\n\t${0}\n}"
  },
  "arrow function with return": {
    "prefix": "fr",
    "body": "(${1:arguments}) => {\n\treturn ${0}\n}"
  },
  "generator function": {
    "prefix": "gf",
    "body": "function* (${1:arguments}) {\n\t${0}\n}"
  },
  "named generator": {
    "prefix": "gfn",
    "body": "function* ${1:name}(${2:arguments}) {\n\t${0}\n}"
  },
  "console.log": {
    "prefix": "cl",
    "body": "console.log(${0})"
  },
  "console.log a variable": {
    "prefix": "cv",
    "body": "console.log('${0}:', ${0})"
  },
  "console.error": {
    "prefix": "ce",
    "body": "console.error(${0})"
  },
  "console.warn": {
    "prefix": "cw",
    "body": "console.warn(${0})"
  },
  "console.dir": {
    "prefix": "cod",
    "body": "console.dir('${0}:', ${0})"
  },
  "constructor": {
    "prefix": "cn",
    "body": "constructor () {\n\t${0}\n}"
  },
  "use strict": {
    "prefix": "uss",
    "body": "'use strict'"
  },
  "JSON.stringify()": {
    "prefix": "js",
    "body": "JSON.stringify($0)"
  },
  "JSON.parse()": {
    "prefix": "jp",
    "body": "JSON.parse($0)"
  },
  "method": {
    "prefix": "m",
    "body": "${1:method} (${2:arguments}) {\n\t${0}\n}"
  },
  "getter": {
    "prefix": "get",
    "body": "get ${1:property} () {\n\t${0}\n}"
  },
  "setter": {
    "prefix": "set",
    "body": "set ${1:property} (${2:value}) {\n\t${0}\n}"
  },
  "getter + setter": {
    "prefix": "gs",
    "body": "get ${1:property} () {\n\t${0}\n}\nset ${1:property} (${2:value}) {\n\t\n}"
  },
  "prototype method": {
    "prefix": "proto",
    "body": "${1:Class}.prototype.${2:method} = function (${3:arguments}) {\n\t${0}\n}"
  },
  "Object.assign": {
    "prefix": "oa",
    "body": "Object.assign(${1:dest}, ${2:source})"
  },
  "Object.create": {
    "prefix": "oc",
    "body": "Object.create(${1:obj})"
  },
  "Object.getOwnPropertyDescriptor": {
    "prefix": "og",
    "body": "Object.getOwnPropertyDescriptor(${1:obj}, '${2:prop}')"
  },
  "ternary": {
    "prefix": "te",
    "body": "${1:cond} ? ${2:true} : ${3:false}"
  },
  "ternary assignment": {
    "prefix": "ta",
    "body": "const ${0} = ${1:cond} ? ${2:true} : ${3:false}"
  },
  "Object.defineProperty": {
    "prefix": "od",
    "body": "Object.defineProperty(${1:dest}, '${2:prop}', {\n\t${0}\n})"
  },
  "Object.keys": {
    "prefix": "ok",
    "body": "Object.keys(${1:obj})"
  },
  "Object.values": {
    "prefix": "ov",
    "body": "Object.values(${1:obj})"
  },
  "Object.entries": {
    "prefix": "oe",
    "body": "Object.entries(${1:obj})"
  },
  "return": {
    "prefix": "r",
    "body": "return ${0}"
  },
  "return arrow function": {
    "prefix": "rf",
    "body": "return (${1:arguments}) => ${2:statement}"
  },
  "yield": {
    "prefix": "y",
    "body": "yield ${0}"
  },
  "return this": {
    "prefix": "rt",
    "body": "return ${0:this}"
  },
  "return null": {
    "prefix": "rn",
    "body": "return null"
  },
  "return new object": {
    "prefix": "ro",
    "body": "return {\n\t${0}\n}"
  },
  "return new array": {
    "prefix": "ra",
    "body": "return [\n\t${0}\n]"
  },
  "return promise": {
    "prefix": "rp",
    "body": "return new Promise((resolve, reject) => {\n\t${0}\n})"
  },
  "wrap selection in arrow function": {
    "prefix": "wrap selection in arrow function",
    "body": "() => {\n\t{$TM_SELECTED_TEXT}\n}",
    "description": "wraps text in arrow function"
  },
  "wrap selection in async arrow function": {
    "prefix": "wrap selection in async arrow function",
    "body": "async () => {\n\t{$TM_SELECTED_TEXT}\n}",
    "description": "wraps text in arrow function"
  },
  "define module": {
    "prefix": "define",
    "body": [
      "define([",
      "\t'require',",
      "\t'${1:dependency}'",
      "], function(require, ${2:factory}) {",
      "\t'use strict';",
      "\t$0",
      "});"
    ],
    "description": "define module"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      "\tconst ${3:element} = ${2:array}[${1:index}];",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-Each Loop": {
    "prefix": "foreach",
    "body": ["${1:array}.forEach(${2:element} => {", "\t$0", "});"],
    "description": "For-Each Loop"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\tif (${2:object}.hasOwnProperty(${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": ["for (const ${1:iterator} of ${2:object}) {", "\t$0", "}"],
    "description": "For-Of Loop"
  },
  "Function Statement": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:params}) {", "\t$0", "}"],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": ["if (${1:condition}) {", "\t$0", "} else {", "\t", "}"],
    "description": "If-Else Statement"
  },
  "New Statement": {
    "prefix": "new",
    "body": ["const ${1:name} = new ${2:type}(${3:arguments});$0"],
    "description": "New Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "While Statement"
  },
  "Do-While Statement": {
    "prefix": "dowhile",
    "body": ["do {", "\t$0", "} while (${1:condition});"],
    "description": "Do-While Statement"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": ["try {", "\t$0", "} catch (${1:error}) {", "\t", "}"],
    "description": "Try-Catch Statement"
  },
  "Set Timeout Function": {
    "prefix": "settimeout",
    "body": ["setTimeout(() => {", "\t$0", "}, ${1:timeout});"],
    "description": "Set Timeout Function"
  },
  "Set Interval Function": {
    "prefix": "setinterval",
    "body": ["setInterval(() => {", "\t$0", "}, ${1:interval});"],
    "description": "Set Interval Function"
  },
  "Import external module.": {
    "prefix": "import statement",
    "body": ["import { $0 } from \"${1:module}\";"],
    "description": "Import external module."
  },
  "Region Start": {
    "prefix": "#region",
    "body": ["//#region $0"],
    "description": "Folding Region Start"
  },
  "Region End": {
    "prefix": "#endregion",
    "body": ["//#endregion"],
    "description": "Folding Region End"
  },
  "Log warning to console": {
    "prefix": "warn",
    "body": ["console.warn($1);", "$0"],
    "description": "Log warning to the console"
  },
  "Log error to console": {
    "prefix": "error",
    "body": ["console.error($1);", "$0"],
    "description": "Log error to the console"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/rust.json`:

```````json
{
  "allow": {
    "prefix": "allow",
    "body": ["#![allow(${1})]"],
    "description": "#![allow(…)]"
  },
  "deny": {
    "prefix": "deny",
    "body": ["#![deny(${1})]"],
    "description": "#![deny(…)]"
  },
  "warn": {
    "prefix": "warn",
    "body": ["#![warn(${1})]"],
    "description": "#![warn(…)]"
  },
  "no_std": {
    "prefix": "no_std",
    "body": ["#![no_std]"],
    "description": "#![no_std]"
  },
  "no_core": {
    "prefix": "no_core",
    "body": ["#![no_core]"],
    "description": "#![no_core]"
  },
  "feature": {
    "prefix": "feature",
    "body": ["#![feature(${1})]"],
    "description": "#![feature(…)]"
  },
  "macro_use": {
    "prefix": "macro_use",
    "body": ["#[macro_use(${1})]"],
    "description": "#[macro_use(…)]"
  },
  "repr": {
    "prefix": "repr",
    "body": ["#[repr(${1})]"],
    "description": "#[repr(…)]"
  },
  "cfg": {
    "prefix": "cfg",
    "body": ["#[cfg(${1})]"],
    "description": "#[cfg(…)]"
  },
  "cfg_attr": {
    "prefix": "cfg_attr",
    "body": ["#[cfg_attr(${1}, ${2})]"],
    "description": "#[cfg_attr(…, …)]"
  },
  "cfg!": {
    "prefix": "cfg!",
    "body": ["cfg!(${1})"],
    "description": "cfg!(…)"
  },
  "column": {
    "prefix": "column",
    "body": ["column!()"],
    "description": "column!()"
  },
  "concat": {
    "prefix": "concat",
    "body": ["concat!(${1})"],
    "description": "concat!(…)"
  },
  "concat_idents": {
    "prefix": "concat_idents",
    "body": ["concat_idents!(${1})"],
    "description": "concat_idents!(…)"
  },
  "debug_assert": {
    "prefix": "debug_assert",
    "body": ["debug_assert!(${1});"],
    "description": "debug_assert!(…)"
  },
  "debug_assert_eq": {
    "prefix": "debug_assert_eq",
    "body": ["debug_assert_eq!(${1}, ${2});"],
    "description": "debug_assert_eq!(…, …)"
  },
  "env": {
    "prefix": "env",
    "body": ["env!(\"${1}\")"],
    "description": "env!(\"…\")"
  },
  "file": {
    "prefix": "file",
    "body": ["file!()"],
    "description": "file!()"
  },
  "format": {
    "prefix": "format",
    "body": ["format!(\"${1}\")"],
    "description": "format!(…)"
  },
  "format_args": {
    "prefix": "format_args",
    "body": ["format_args!(\"${1}\")"],
    "description": "format_args!(…)"
  },
  "include": {
    "prefix": "include",
    "body": ["include!(\"${1}\");"],
    "description": "include!(\"…\");"
  },
  "include_bytes": {
    "prefix": "include_bytes",
    "body": ["include_bytes!(\"${1}\")"],
    "description": "include_bytes!(\"…\")"
  },
  "include_str": {
    "prefix": "include_str",
    "body": ["include_str!(\"${1}\")"],
    "description": "include_str!(\"…\")"
  },
  "line": {
    "prefix": "line",
    "body": ["line!()"],
    "description": "line!()"
  },
  "module_path": {
    "prefix": "module_path",
    "body": ["module_path!()"],
    "description": "module_path!()"
  },
  "option_env": {
    "prefix": "option_env",
    "body": ["option_env!(\"${1}\")"],
    "description": "option_env!(\"…\")"
  },
  "panic": {
    "prefix": "panic",
    "body": ["panic!(\"${1}\");"],
    "description": "panic!(…);"
  },
  "print": {
    "prefix": "print",
    "body": ["print!(\"${1}\");"],
    "description": "print!(…);"
  },
  "println": {
    "prefix": "println",
    "body": ["println!(\"${1}\");"],
    "description": "println!(…);"
  },
  "stringify": {
    "prefix": "stringify",
    "body": ["stringify!(${1})"],
    "description": "stringify!(…)"
  },
  "thread_local": {
    "prefix": "thread_local",
    "body": ["thread_local!(static ${1:STATIC}: ${2:Type} = ${4:init});"],
    "description": "thread_local!(static …: … = …);"
  },
  "try": {
    "prefix": "try",
    "body": ["try!(${1})"],
    "description": "try!(…)"
  },
  "unimplemented": {
    "prefix": "unimplemented",
    "body": ["unimplemented!()"],
    "description": "unimplemented!()"
  },
  "unreachable": {
    "prefix": "unreachable",
    "body": ["unreachable!(${1})"],
    "description": "unreachable!(…)"
  },
  "vec": {
    "prefix": "vec",
    "body": ["vec![${1}]"],
    "description": "vec![…]"
  },
  "write": {
    "prefix": "write",
    "body": ["write!(${1}, \"${2}\")"],
    "description": "write!(…)"
  },
  "writeln": {
    "prefix": "writeln",
    "body": ["writeln!(${1}, \"${2}\")"],
    "description": "writeln!(…, …)"
  },
  "Err": {
    "prefix": "Err",
    "body": ["Err(${1})"],
    "description": "Err(…)"
  },
  "Ok": {
    "prefix": "Ok",
    "body": ["Ok(${1:result})"],
    "description": "Ok(…)"
  },
  "Some": {
    "prefix": "Some",
    "body": ["Some(${1})"],
    "description": "Some(…)"
  },
  "assert": {
    "prefix": "assert",
    "body": ["assert!(${1});"],
    "description": "assert!(…);"
  },
  "assert_eq": {
    "prefix": "assert_eq",
    "body": ["assert_eq!(${1}, ${2});"],
    "description": "assert_eq!(…, …);"
  },
  "bench": {
    "prefix": "bench",
    "body": [
      "#[bench]",
      "fn ${1:name}(b: &mut test::Bencher) {",
      "    ${2:b.iter(|| ${3:/* benchmark code */})}",
      "}"
    ],
    "description": "#[bench]"
  },
  "const": {
    "prefix": "const",
    "body": ["const ${1:CONST}: ${2:Type} = ${4:init};"],
    "description": "const …: … = …;"
  },
  "derive": {
    "prefix": "derive",
    "body": ["#[derive(${1})]"],
    "description": "#[derive(…)]"
  },
  "else": {
    "prefix": "else",
    "body": ["else {", "    ${1:unimplemented!();}", "}"],
    "description": "else { … }"
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "#[derive(Debug)]",
      "enum ${1:Name} {",
      "    ${2:Variant1},",
      "    ${3:Variant2},",
      "}"
    ],
    "description": "enum … { … }"
  },
  "extern-crate": {
    "prefix": "extern-crate",
    "body": ["extern crate ${1:name};"],
    "description": "extern crate …;"
  },
  "extern-fn": {
    "prefix": "extern-fn",
    "body": [
      "extern \"C\" fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
      "    ${5:// add code here}",
      "}"
    ],
    "description": "extern \"C\" fn …(…) { … }"
  },
  "extern-mod": {
    "prefix": "extern-mod",
    "body": ["extern \"C\" {", "    ${2:// add code here}", "}"],
    "description": "extern \"C\" { … }"
  },
  "fn": {
    "prefix": "fn",
    "body": [
      "fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
      "    ${5:unimplemented!();}",
      "}"
    ],
    "description": "fn …(…) { … }"
  },
  "for": {
    "prefix": "for",
    "body": ["for ${1:pat} in ${2:expr} {", "    ${3:unimplemented!();}", "}"],
    "description": "for … in … { … }"
  },
  "if-let": {
    "prefix": "if-let",
    "body": [
      "if let ${1:Some(pat)} = ${2:expr} {",
      "    ${0:unimplemented!();}",
      "}"
    ],
    "description": "if let … = … { … }"
  },
  "if": {
    "prefix": "if",
    "body": ["if ${1:condition} {", "    ${2:unimplemented!();}", "}"],
    "description": "if … { … }"
  },
  "impl-trait": {
    "prefix": "impl-trait",
    "body": [
      "impl ${1:Trait} for ${2:Type} {",
      "    ${3:// add code here}",
      "}"
    ],
    "description": "impl … for … { … }"
  },
  "impl": {
    "prefix": "impl",
    "body": ["impl ${1:Type} {", "    ${2:// add code here}", "}"],
    "description": "impl … { … }"
  },
  "inline-fn": {
    "prefix": "inline-fn",
    "body": [
      "#[inline]",
      "pub fn ${1:name}() {",
      "    ${2:unimplemented!();}",
      "}"
    ],
    "description": "inlined function"
  },
  "let": {
    "prefix": "let",
    "body": ["let ${1:pat} = ${2:expr};"],
    "description": "let … = …;"
  },
  "loop": {
    "prefix": "loop",
    "body": ["loop {", "    ${2:unimplemented!();}", "}"],
    "description": "loop { … }"
  },
  "macro_rules": {
    "prefix": "macro_rules",
    "body": ["macro_rules! ${1:name} {", "    (${2}) => (${3})", "}"],
    "description": "macro_rules! … { … }"
  },
  "main": {
    "prefix": "main",
    "body": ["fn main() {", "    ${1:unimplemented!();}", "}"],
    "description": "fn main() { … }"
  },
  "match": {
    "prefix": "match",
    "body": [
      "match ${1:expr} {",
      "    ${2:Some(expr)} => ${3:expr},",
      "    ${4:None} => ${5:expr},",
      "}"
    ],
    "description": "match … { … }"
  },
  "mod": {
    "prefix": "mod",
    "body": ["mod ${1:name};"],
    "description": "mod …;"
  },
  "mod-block": {
    "prefix": "mod-block",
    "body": ["mod ${1:name} {", "    ${2:// add code here}", "}"],
    "description": "mod … { … }"
  },
  "static": {
    "prefix": "static",
    "body": ["static ${1:STATIC}: ${2:Type} = ${4:init};"],
    "description": "static …: … = …;"
  },
  "struct-tuple": {
    "prefix": "struct-tuple",
    "body": ["struct ${1:Name}(${2:Type});"],
    "description": "struct …(…);"
  },
  "struct-unit": {
    "prefix": "struct-unit",
    "body": ["struct ${1:Name};"],
    "description": "struct …;"
  },
  "struct": {
    "prefix": "struct",
    "body": [
      "#[derive(Debug)]",
      "struct ${1:Name} {",
      "    ${2:field}: ${3:Type}",
      "}"
    ],
    "description": "struct … { … }"
  },
  "test": {
    "prefix": "test",
    "body": ["#[test]", "fn ${1:name}() {", "    ${2:unimplemented!();}", "}"],
    "description": "#[test]"
  },
  "trait": {
    "prefix": "trait",
    "body": ["trait ${1:Name} {", "    ${2:// add code here}", "}", ""],
    "description": "trait … { … }"
  },
  "type": {
    "prefix": "type",
    "body": ["type ${1:Alias} = ${2:Type};"],
    "description": "type … = …;"
  },
  "while-let": {
    "prefix": "while-let",
    "body": [
      "while let ${1:Some(pat)} = ${2:expr} {",
      "    ${0:unimplemented!();}",
      "}"
    ],
    "description": "while let … = … { … }"
  },
  "while": {
    "prefix": "while",
    "body": ["while ${1:condition} {", "    ${2:unimplemented!();}", "}"],
    "description": "while … { … }"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/glsl.json`:

```````json
{
  "for": {
    "prefix": "for",
    "body": ["for(int $2 = 0; $2 < $3; $2++){", "\t", "}"],
    "description": "for( ; ; ){\n\t//code\n}\n\nThe keyword for is used to describe a loop that is controlled by a counter. The parentheses enclose three expressions that initialize, check and update the variable used as counter. The body defined by curly braces encloses the statements that are executed at each pass of the loop.\n\nfor(int i = 0; i <= 99; i++){\n\taFunction();\n}\n\nThe execution of a single pass or the whole loop can be aborted by using a continue or a break statement respectively."
  },

  "while": {
    "prefix": "while",
    "body": ["while($2){", "\t", "}"],
    "description": "while(){\n\t//code\n}\n\nThe keyword while is used to describe a loop that is controlled by a condition. The parentheses enclose the expression that defines the condition. The body defined by curly braces encloses the statements that are executed at each pass of the loop.\n\nwhile(i <= 99){\n\taFunction();\n}\n\nThe execution of a single pass or the whole loop can be aborted by using a continue or a break statement respectively."
  },

  "dowhile": {
    "prefix": "dowhile",
    "body": ["do{", "\t", "} while($2){", "\t", "}"],
    "description": "do {\n\t//code\n}while();\n\nThe keyword do is used in combination with while to describe a loop that is controlled by a condition. The body defined by curly braces encloses the statements that are executed at each pass of the loop. The parentheses enclose the expression that defines the condition.\n\ndo {\n\taFunction();\n} while(i <= 99);\n\nThe execution of a single pass or the whole loop can be aborted by using a continue or a break statement respectively.\n\nIn contrast to a simple while loop the body is always executed at least one time even if the expression evaluates to false from the beginning."
  },

  "continue": {
    "prefix": "continue",
    "body": "continue;",
    "description": "The keyword continue is used inside the body of a loop to abort a single pass of the loop. All statements in the body after the continue statement are ignored and the next iteration of the loop is executed immediately."
  },

  "break": {
    "prefix": "break",
    "body": "break;",
    "description": "The keyword break is used inside the body of a loop to abort the whole loop. All statements in the body after the break statement are ignored and the loop is exited without executing any further iteration."
  },

  "if": {
    "prefix": "if",
    "body": ["if($2){", "\t", "}"],
    "description": "if(){\n\t//code\n}\n\nThe keyword if is used to describe the conditional execution of a statement. The parentheses enclose the expression that defines the condition. The curly braces enclose the statements that are executed if the condition evaluates as true.\n\nif(i != 0){\n\taFunction();\n}\n\nIn contrast to a loop the statements in curly braces are executed only one time or not at all."
  },

  "ifelse": {
    "prefix": "ifelse",
    "body": ["if($2){", "\t", "} else {", "\t", "}"],
    "description": "if(){\n\t//code\n} else {\n\t//code\n}\n\nThe keyword else is used in conjunction with the keyword if to describe the alternative execution of a statement. The parentheses enclose the expression that defines the condition. The curly braces after the if statement enclose the statements that are executed if the condition evaluates as true. The curly braces after the else statement enclose the statements that are executed if the condition evaluates as false.\n\nif(i != 0){\n\taFunction();\n} else {\n\tbFunction();\n}\n\nDepending on the condition either the statements in the first curly braces or the statements in the second curly braces are executed."
  },

  "ifdef": {
    "prefix": "ifdef",
    "body": ["#ifdef GL_ES", "precision mediump float;", "#endif"],
    "description": "A check defining if GLES is available"
  },

  "return": {
    "prefix": "return",
    "body": "return;",
    "description": "The keyword return is used to define a proper exit for a function. If the function has the return type void no value is passed back to the caller of the function.\n\nreturn aValue;\n\nIf the function has a non-void return type a parameter of the same type has to be included in the statement. The value is passed back to the caller of the function."
  },

  "discard": {
    "prefix": "discard",
    "body": "discard;",
    "description": "The keyword discard is used to define an exceptionally exit for a fragment shader. It is used exit the fragment shader immediately and to signal the OpenGL ES 2.0 pipeline that the respective fragment should not be drawn."
  },

  "vec2": {
    "prefix": "vec2",
    "body": "vec2($2, $3)",
    "description": "The data type vec2 is used for floating point vectors with two components. There are several ways to initialize a vector:\n• Components are specified by providing a scalar value for each component (first example).\n• Components are specified by providing one scalar value. This value is used for all components (the second example is equivalent to the first).\n• Components are specified by providing a vector of higher dimension. The respective values are used to initialize the components (the second and third example are equivalent).\n\nSide note: The vector constructors can be used to cast between different vector types since type conversions are done automatically for each component."
  },

  "vec3": {
    "prefix": "vec3",
    "body": "vec3($2, $3, $4)",
    "description": "The data type vec3 is used for floating point vectors with three components. There are several ways to initialize a vector:\n• Components are specified by providing a scalar value for each component (first example).\n• Components are specified by providing one scalar value. This value is used for all components (the second example is equivalent to the first).\nComponents are specified by providing a vector of higher dimension. The respective values are used to initialize the components (the second and third example are equivalent).• Components are specified by providing a combination of vectors and/or scalars. The respective values are used to initialize the vector (the fifth and sixth example are equivalent). The arguments of the constructor must have at least as many components as the vector that is initialized.\n\nSide note: The vector constructors can be used to cast between different vector types since type conversions are done automatically for each component."
  },

  "vec4": {
    "prefix": "vec4",
    "body": "vec4($2, $3, $4, $5)",
    "description": "The data type vec4 is used for floating point vectors with four components. There are several ways to initialize a vector:\n• Components are specified by providing a scalar value for each component (first example).\n• Components are specified by providing one scalar value. This value is used for all components (the second example is equivalent to the first).\n• Components are specified by providing a combination of vectors and scalars. The respective values are used to initialize the components (the third and fourth example are equivalent). The arguments of the constructor must have at least as many components as the vector that is initialized.\n\nSide note: The vector constructors can be used to cast between different vector types since type conversions are done automatically for each component."
  },
  "mat2": {
    "prefix": "mat2",
    "body": "mat2($2, $3)",
    "description": "The data type mat2 is used for floating point matrices with two times two components in column major order. There are several ways to initialize a matrix:\n• Components are specified by providing a scalar value for each component (first example). The matrix is filled column by column.\n• Components are specified by providing one scalar value. This value is used for the components on the main diagonal (the second example is equivalent to the first).\n• Components are specified by providing a combination of vectors and scalars. The respective values are used to initialize the components column by column. The arguments of the constructor must have at least as many components as the matrix that is initialized."
  },
  "mat3": {
    "prefix": "mat3",
    "body": "mat3($2, $3, $4)",
    "description": "The data type mat3 is used for floating point matrices with three times three components in column major order. There are several ways to initialize a matrix:\n• Components are specified by providing a scalar value for each component (first example). The matrix is filled column by column.\n• Components are specified by providing one scalar value. This value is used for the components on the main diagonal (the second example is equivalent to the first).\n• Components are specified by providing a combination of vectors and scalars. The respective values are used to initialize the components column by column. The arguments of the constructor must have at least as many components as the matrix that is initialized."
  },
  "mat4": {
    "prefix": "mat4",
    "body": "mat4($2, $3, $4, $5)",
    "description": "The data type mat4 is used for floating point matrices with four times four components in column major order. There are several ways to initialize a matrix:\n• Components are specified by providing a scalar value for each component (first example). The matrix is filled column by column.\n• Components are specified by providing one scalar value. This value is used for the components on the main diagonal (the second example is equivalent to the first).\n• Components are specified by providing a combination of vectors and scalars. The respective values are used to initialize the components column by column. The arguments of the constructor must have at least as many components as the matrix that is initialized."
  },
  "sampler2D": {
    "prefix": "sampler2D",
    "body": "uniform sampler2D ${NAME};",
    "description": "uniform sampler2D texture;\n\nThe data type sampler2D is used to provide access to a 2D texture. It can only be declared as a uniform variable since it is a reference to data that has been loaded to a texture unit.\n\nSide note: On iOS devices this data type can only be used in the fragment shader since they don't have texture image units that can be accessed by the vertex shader."
  },
  "samplerCube": {
    "prefix": "samplerCube",
    "body": "uniform samplerCube ${NAME};",
    "description": "uniform samplerCube texture;\n\nThe data type samplerCube is used to provide access to a cubemap texture. It can only be declared as a uniform variable since it is a reference to data that has been loaded to a texture unit.\n\nSide note: On iOS devices this data type can only be used in the fragment shader since they don't have texture image units that can be accessed by the vertex shader."
  },

  "sin": {
    "prefix": "sin",
    "body": "sin($2)",
    "description": "float sin(float angle)\nvec2 sin(vec2 angle)\nvec3 sin(vec3 angle)\nvec4 sin(vec4 angle)\n\nThe sin function returns the sine of an angle in radians. The input parameter can be a floating scalar or a float vector. In case of a float vector the sine is calculated separately for every component."
  },

  "asin": {
    "prefix": "asin",
    "body": "asin($2)",
    "description": "float asin(float x)\nvec2 asin(vec2 x)\nvec3 asin(vec3 x)\nvec4 asin(vec4 x)\n\nThe asin function returns the arcsine of an angle in radians. It is the inverse function of sine. The input parameter can be a floating scalar or a float vector. In case of a float vector the arcsine is calculated separately for every component."
  },

  "asinh": {
    "prefix": "asinh",
    "body": "asinh($2)",
    "description": "return the arc hyperbolic sine of the parameter - inverse of sinh"
  },

  "sinh": {
    "prefix": "sinh",
    "body": "sinh($2)",
    "description": "return the hyperbolic sine of the parameter"
  },

  "cos": {
    "prefix": "cos",
    "body": "cos($2)",
    "description": "float cos(float angle)\nvec2 cos(vec2 angle)\nvec3 cos(vec3 angle)\nvec4 cos(vec4 angle)\n\nThe cos function returns the cosine of an angle in radians. The input parameter can be a floating scalar or a float vector. In case of a float vector the cosine is calculated separately for every component."
  },

  "cosh": {
    "prefix": "cosh",
    "body": "cosh($2)",
    "description": "return the hyperbolic cosine of the parameter"
  },

  "acos": {
    "prefix": "acos",
    "body": "acos($2)",
    "description": "float acos(float x)\nvec2 acos(vec2 x)\nvec3 acos(vec3 x)\nvec4 acos(vec4 x)\n\nThe acos function returns the arccosine of an angle in radians. It is the inverse function of cosine. The input parameter can be a floating scalar or a float vector. In case of a float vector the arccosine is calculated separately for every component."
  },

  "acosh": {
    "prefix": "acosh",
    "body": "acosh($2)",
    "description": "return the arc hyperbolic cosine of the parameter"
  },

  "tan": {
    "prefix": "tan",
    "body": "tan($2)",
    "description": "float tan(float angle)\nvec2 tan(vec2 angle)\nvec3 tan(vec3 angle)\nvec4 tan(vec4 angle)\n\nThe tan function returns the tangent of an angle in radians. The input parameter can be a floating scalar or a float vector. In case of a float vector the tangent is calculated separately for every component."
  },

  "tanh": {
    "prefix": "tanh",
    "body": "tanh($2)",
    "description": "return the hyperbolic tangent of the parameter"
  },

  "atan": {
    "prefix": "atan",
    "body": "atan($2, $3)",
    "description": "float atan(float y_over_x)\nvec2 atan(vec2 y_over_x)\nvec3 atan(vec3 y_over_x)\nvec4 atan(vec4 y_over_x)\n\nThe atan function returns the arctangent of an angle in radians. It is the inverse function of tangent. The input parameter can be a floating scalar or a float vector. In case of a float vector the arctangent is calculated separately for every component.\n\nfloat atan(float y, float x)\nvec2 atan(vec2 y, vec2 x)\nvec3 atan(vec3 y, vec3 x)\nvec4 atan(vec4 y, vec4 x)\n\nThere is also a two-argument variation of the atan function (in other programming languages often called atan2). For a point with Cartesian coordinates (x, y) the function returns the angle θ of the same point with polar coordinates (r, θ)."
  },

  "radians": {
    "prefix": "radians",
    "body": "radians($2)",
    "description": "float radians(float degrees)\nvec2 radians(vec2 degrees)\nvec3 radians(vec3 degrees)\nvec4 radians(vec4 degrees)\n\nThe radians function converts degrees to radians. The input parameter can be a floating scalar or a float vector. In case of a float vector all components are converted from degrees to radians separately."
  },

  "degrees": {
    "prefix": "degrees",
    "body": "degrees($2)",
    "description": "float degrees(float radians)\nvec2 degrees(vec2 radians)\nvec3 degrees(vec3 radians)\nvec4 degrees(vec4 radians)\n\nThe degrees function converts radians to degrees. The input parameter can be a floating scalar or a float vector. In case of a float vector every component is converted from radians to degrees separately."
  },

  "pow": {
    "prefix": "pow",
    "body": "pow($2, $3)",
    "description": "float pow(float x, float y)\nvec2 pow(vec2 x, vec2 y)\nvec3 pow(vec3 x, vec3 y)\nvec4 pow(vec4 x, vec4 y)\n\nThe power function returns x raised to the power of y. The input parameters can be floating scalars or float vectors. In case of float vectors the operation is done component-wise."
  },

  "exp": {
    "prefix": "exp",
    "body": "exp($2);",
    "description": "float exp(float x)\nvec2 exp(vec2 x)\nvec3 exp(vec3 x)\nvec4 exp(vec4 x)\n\nThe exp function returns the constant e raised to the power of x. The input parameter can be a floating scalar or a float vector. In case of a float vector the operation is done component-wise."
  },

  "exp2": {
    "prefix": "exp2",
    "body": "exp2($2)",
    "description": "float exp2(float x)\nvec2 exp2(vec2 x)\nvec3 exp2(vec3 x)\nvec4 exp2(vec4 x)\n\nThe exp2 function returns 2 raised to the power of x. The input parameter can be a floating scalar or a float vector. In case of a float vector the operation is done component-wise."
  },

  "ldexp": {
    "prefix": "ldexp",
    "body": "ldexp($2, $3)",
    "description": "assemble a floating point number from a value and exponent"
  },

  "frexp": {
    "prefix": "frexp",
    "body": "frexp($2, $3)",
    "description": "split a floating point number"
  },

  "log": {
    "prefix": "log",
    "body": "log($2)",
    "description": "float log(float x)\nvec2 log(vec2 x)\nvec3 log(vec3 x)\nvec4 log(vec4 x)\n\nThe log function returns the power to which the constant e has to be raised to produce x. The input parameter can be a floating scalar or a float vector. In case of a float vector the operation is done component-wise."
  },

  "log2": {
    "prefix": "log2",
    "body": "log2($2)",
    "description": "float log2(float x)\nvec2 log2(vec2 x)\nvec3 log2(vec3 x)\nvec4 log2(vec4 x)\n\nThe log2 function returns the power to which 2 has to be raised to produce x. The input parameter can be a floating scalar or a float vector. In case of a float vector the operation is done component-wise."
  },

  "sqrt": {
    "prefix": "sqrt",
    "body": "sqrt($2)",
    "description": "float sqrt(float x)\nvec2 sqrt(vec2 x)\nvec3 sqrt(vec3 x)\nvec4 sqrt(vec4 x)\n\nThe sqrt function returns the square root of x. The input parameter can be a floating scalar or a float vector. In case of a float vector the operation is done component-wise."
  },

  "inversesqrt": {
    "prefix": "inversesqrt",
    "body": "inversesqrt($2)",
    "description": "float inversesqrt(float x)\nvec2 inversesqrt(vec2 x)\nvec3 inversesqrt(vec3 x)\nvec4 inversesqrt(vec4 x)\n\nThe inversesqrt function returns the inverse square root of x, i.e. the reciprocal of the square root. The input parameter can be a floating scalar or a float vector. In case of a float vector the operation is done component-wise."
  },

  "abs": {
    "prefix": "abs",
    "body": "abs($2)",
    "description": "float abs(float x)\nvec2 abs(vec2 x)\nvec3 abs(vec3 x)\nvec4 abs(vec4 x)\n\nThe abs function returns the absolute value of x, i.e. x when x is positive or zero and -x for negative x. The input parameter can be a floating scalar or a float vector. In case of a float vector the operation is done component-wise."
  },

  "ceil": {
    "prefix": "ceil",
    "body": "ceil($2)",
    "description": "float ceil(float x)\nvec2 ceil(vec2 x)\nvec3 ceil(vec3 x)\nvec4 ceil(vec4 x)\n\nThe ceiling function returns the smallest number that is larger or equal to x. The input parameter can be a floating scalar or a float vector. In case of a float vector the operation is done component-wise.\n\nSide note: The return value is of type floating scalar or float vector although the result of the operation is an integer."
  },

  "clamp": {
    "prefix": "clamp",
    "body": "clamp($2, $3, $4)",
    "description": "float clamp(float x, float minVal, float maxVal)\nvec2 clamp(vec2 x, vec2 minVal, vec2 maxVal)\nvec3 clamp(vec3 x, vec3 minVal, vec3 maxVal)\nvec4 clamp(vec4 x, vec4 minVal, vec4 maxVal)\n\nThe clamp function returns x if it is larger than minVal and smaller than maxVal. In case x is smaller than minVal, minVal is returned. If x is larger than maxVal, maxVal is returned. The input parameters can be floating scalars or float vectors. In case of float vectors the operation is done component-wise.\n\nfloat clamp(float x, float minVal, float maxVal)\nvec2 clamp(vec2 x, float minVal, float maxVal)\nvec3 clamp(vec3 x, float minVal, float maxVal)\nvec4 clamp(vec4 x, flfloat minVal, float maxVal)\n\nThere is also a variation of the clamp function where the second and third parameters are always a floating scalars."
  },

  "floor": {
    "prefix": "floor",
    "body": "floor($2)",
    "description": "float floor(float x)\nvec2 floor(vec2 x)\nvec3 floor(vec3 x)\nvec4 floor(vec4 x)\n\nThe floor function returns the largest integer number that is smaller or equal to x. The input parameter can be a floating scalar or a float vector. In case of a float vector the operation is done component-wise.\n\nSide note: The return value is of type floating scalar or float vector although the result of the operation is an integer."
  },

  "equal": {
    "prefix": "equal",
    "body": "equal($2, $3)",
    "description": "perform a component-wise equal-to comparison of two vectors"
  },

  "fract": {
    "prefix": "fract",
    "body": "fract($2)",
    "description": "float fract(float x)\nvec2 fract(vec2 x)\nvec3 fract(vec3 x)\nvec4 fract(vec4 x)\n\nThe fract function returns the fractional part of x, i.e. x minus floor(x). The input parameter can be a floating scalar or a float vector. In case of a float vector the operation is done component-wise."
  },

  "min": {
    "prefix": "min",
    "body": "min($2, $3)",
    "description": "float min(float x, float y)\nvec2 min(vec2 x, vec2 y)\nvec3 min(vec3 x, vec3 y)\nvec4 min(vec4 x, vec4 y)\n\nThe min function returns the smaller of the two arguments. The input parameters can be floating scalars or float vectors. In case of float vectors the operation is done component-wise.\nfloat min(float x, float y)\nvec2 min(vec2 x, float y)\nvec3 min(vec3 x, float y)\nvec4 min(vec4 x, float y)\n\nThere is also a variation of the min function where the second parameter is always a floating scalar."
  },

  "max": {
    "prefix": "max",
    "body": "max($2, $3)",
    "description": "float max(float x, float y)\nvec2 max(vec2 x, vec2 y)\nvec3 max(vec3 x, vec3 y)\nvec4 max(vec4 x, vec4 y)\n\nThe max function returns the larger of the two arguments. The input parameters can be floating scalars or float vectors. In case of float vectors the operation is done component-wise.\n\nfloat max(float x, float y)\nvec2 max(vec2 x, float y)\nvec3 max(vec3 x, float y)\nvec4 max(vec4 x, float y)\n\nThere is also a variation of the max function where the second parameter is always a floating scalar."
  },

  "mix": {
    "prefix": "mix",
    "body": "mix($2, $3, $4)",
    "description": "float mix(float x, float y, float a)\nvec2 mix(vec2 x, vec2 y, vec2 a)\nvec3 mix(vec3 x, vec3 y, vec3 a)\nvec4 mix(vec4 x, vec4 y, vec4 a)\n\nThe mix function returns the linear blend of x and y, i.e. the product of x and (1 - a) plus the product of y and a. The input parameters can be floating scalars or float vectors. In case of float vectors the operation is done component-wise.\n\nfloat mix(float x, float y, float a)\nvec2 mix(vec2 x, vec2 y, float a)\nvec3 mix(vec3 x, vec3 y, float a)\nvec4 mix(vec4 x, vec4 y, float a)\n\nThere is also a variation of the mix function where the third parameter is always a floating scalar."
  },

  "mod": {
    "prefix": "mod",
    "body": "mod($2, $3)",
    "description": "float mod(float x, float y)\nvec2 mod(vec2 x, vec2 y)\nvec3 mod(vec3 x, vec3 y)\nvec4 mod(vec4 x, vec4 y)\n\nThe mod function returns x minus the product of y and floor(x/y). The input parameters can be floating scalars or float vectors. In case of float vectors the operation is done component-wise.\n\nSide note: If x and y are integers the return value is the remainder of the division of x by y as expected.\n\nfloat mod(float x, float y)\nvec2 mod(vec2 x, float y)\nvec3 mod(vec3 x, float y)\nvec4 mod(vec4 x, float y)\n\nThere is also a variation of the mod function where the second parameter is always a floating scalar."
  },

  "modf": {
    "prefix": "modf",
    "body": "modf($2, $3)",
    "description": "separate a value into its integer and fractional components"
  },

  "sign": {
    "prefix": "sign",
    "body": "sign($2)",
    "description": "float sign(float x)\nvec2 sign(vec2 x)\nvec3 sign(vec3 x)\nvec4 sign(vec4 x)\n\nThe sign function returns 1.0 when x is positive, 0.0 when x is zero and -1.0 when x is negative. The input parameter can be a floating scalar or a float vector. In case of a float vector the operation is done component-wise."
  },

  "step": {
    "prefix": "step",
    "body": "step($2, $3)",
    "description": "float step(float edge, float x)\nvec2 step(vec2 edge, vec2 x)\nvec3 step(vec3 edge, vec3 x)\nvec4 step(vec4 edge, vec4 x)\n\nThe step function returns 0.0 if x is smaller then edge and otherwise 1.0. The input parameters can be floating scalars or float vectors. In case of float vectors the operation is done component-wise.\n\nfloat step(float edge, float x)\nvec2 step(float edge, vec2 x)\nvec3 step(float edge, vec3 x)\nvec4 step(float edge, vec4 x)\n\nThere is also a variation of the step function where the edge parameter is always a floating scalar."
  },

  "smoothstep": {
    "prefix": "smoothstep",
    "body": "smoothstep($2, $3, $4)",
    "description": "float smoothstep(float edge0, float edge1, float x)\nvec2 smoothstep(vec2 edge0, vec2 edge1, vec2 x)\nvec3 smoothstep(vec3 edge0, vec3 edge1, vec3 x)\nvec4 smoothstep(vec4 edge0, vec4 edge1, vec4 x)\n\nThe smoothstep function returns 0.0 if x is smaller then edge0 and 1.0 if x is larger than edge1. Otherwise the return value is interpolated between 0.0 and 1.0 using Hermite polynomials. The input parameters can be floating scalars or float vectors. In case of float vectors the operation is done component-wise.\n\nfloat smoothstep(float edge0, float edge1, float x)\nvec2 smoothstep(float edge0, float edge1, vec2 x)\nvec3 smoothstep(float edge0, float edge1, vec3 x)\nvec4 smoothstep(float edge0, float edge1, vec4 x)\n\nThere is also a variation of the smoothstep function where the edge0 and edge1 parameters are always floating scalars."
  },

  "cross": {
    "prefix": "cross",
    "body": "cross($2, $3, $4)",
    "description": "vec3 cross(vec3 x, vec3 y)\n\nThe cross function returns the cross product of the two input parameters, i.e. a vector that is perpendicular to the plane containing x and y and has a magnitude that is equal to the area of the parallelogram that x and y span. The input parameters can only be 3-component floating vectors. The cross product is equivalent to the product of the length of the vectors times the sinus of the(smaller) angle between x and y."
  },

  "distance": {
    "prefix": "distance",
    "body": "distance($2, $3)",
    "description": "float distance(float p0, float p1)\nfloat distance(vec2 p0, vec2 p1)\nfloat distance(vec3 p0, vec3 p1)\nfloat distance(vec4 p0, vec4 p1)\n\nThe distance function returns the distance between two points. The distance of two points is the length of the vector d = p0 - p1, that starts at p1 and points to p0. The input parameters can be floating scalars or float vectors. In case of floating scalars the distance function is trivial and returns the absolute value of d."
  },

  "dot": {
    "prefix": "dot",
    "body": "dot($2, $3)",
    "description": "float dot(float x, float y)\nfloat dot(vec2 x, vec2 y)\nfloat dot(vec3 x, vec3 y)\nfloat dot(vec4 x, vec4 y)\n\nThe dot function returns the dot product of the two input parameters, i.e. the sum of the component-wise products. If x and y are the same the square root of the dot product is equivalent to the length of the vector. The input parameters can be floating scalars or float vectors. In case of floating scalars the dot function is trivial and returns the product of x and y."
  },

  "faceforward": {
    "prefix": "faceforward",
    "body": "faceforward($2, $3, $4)",
    "description": "float faceforward(float N, float I, float Nref)\nvec2 faceforward(vec2 N, vec2 I, vec2 Nref)\nvec3 faceforward(vec3 N, vec3 I, vec3 Nref)\nvec4 faceforward(vec4 N, vec4 I, vec4 Nref)\n\nThe faceforward function returns a vector that points in the same direction as a reference vector. The function has three input parameters of the type floating scalar or float vector: N, the vector to orient, I, the incident vector, and Nref, the reference vector. If the dot product of I and Nref is smaller than zero the return value is N. Otherwise -N is returned."
  },

  "length": {
    "prefix": "length",
    "body": "length($2)",
    "description": "float length(float x)\nfloat length(vec2 x)\nfloat length(vec3 x)\nfloat length(vec4 x)\n\nThe length function returns the length of a vector defined by the Euclidean norm, i.e. the square root of the sum of the squared components. The input parameter can be a floating scalar or a float vector. In case of a floating scalar the length function is trivial and returns the absolute value."
  },

  "normalize": {
    "prefix": "normalize",
    "body": "normalize($2)",
    "description": "float normalize(float x)\nvec2 normalize(vec2 x)\nvec3 normalize(vec3 x)\nvec4 normalize(vec4 x)\n\nThe normalize function returns a vector with length 1.0 that is parallel to x, i.e. x divided by its length. The input parameter can be a floating scalar or a float vector. In case of a floating scalar the normalize function is trivial and returns 1.0."
  },

  "reflect": {
    "prefix": "reflect",
    "body": "reflect($2, $3)",
    "description": "float reflect(float I, float N)\nvec2 reflect(vec2 I, vec2 N)\nvec3 reflect(vec3 I, vec3 N)\nvec4 reflect(vec4 I, vec4 N)\n\nThe reflect function returns a vector that points in the direction of reflection. The function has two input parameters of the type floating scalar or float vector: I, the incident vector, and N, the normal vector of the reflecting surface.\n\nSide note: To obtain the desired result the vector N has to be normalized. The reflection vector always has the same length as the incident vector. From this it follows that the reflection vector is normalized if N and I are both normalized."
  },

  "refract": {
    "prefix": "refract",
    "body": "refract($2, $3, $4)",
    "description": "float refract(float I, float N, float eta)\nvec2 refract(vec2 I, vec2 N, float eta)\nvec3 refract(vec3 I, vec3 N, float eta)\nvec4 refract(vec4 I, vec4 N, float eta)\n\nThe refract function returns a vector that points in the direction of refraction. The function has two input parameters of the type floating scalar or float vector and one input parameter of the type floating scalar: I, the incident vector, N, the normal vector of the refracting surface, and eta, the ratio of indices of refraction.\n\nSide note: To obtain the desired result the vectors I and N have to be normalized."
  },

  "trunc": {
    "prefix": "trunc",
    "body": "trunc($2)",
    "description": "find the nearest integer less than or equal to the parameter"
  },

  "round": {
    "prefix": "round",
    "body": "round($2)",
    "description": "find the nearest integer less than or equal to the parameter - The fraction 0.5 will round in a direction chosen by the implementation, presumably the direction that is fastest. This includes the possibility that round(x) returns the same value as roundEven(x) for all values of x"
  },

  "roundEven": {
    "prefix": "roundEven",
    "body": "roundEven($2)",
    "description": "find the nearest even integer to the parameter - The fractional part of 0.5 will round toward the nearest even integer. For example, both 3.5 and 4.5 will round to 4.0."
  },

  "const": {
    "prefix": "const",
    "body": "const",
    "description": "The qualifier const is used for variables that are compile-time constants or for function parameters that are read-only."
  },

  "attribute": {
    "prefix": "attribute",
    "body": "attribute",
    "description": "The qualifier attribute is used to declare variables that are shared between a vertex shader and the OpenGL ES environment.\nSince the vertex shader is executed one time for each vertex attributes are used to specify per vertex data. They typically provide data such as the object space position, the normal direction and the texture coordinates of a vertex. Attributes are read-only variables, i.e. their value can not be changed in the vertex shader.\nSide note: Since an attribute is never initialized in the shader it has to be loaded with data by the application executing the shader."
  },

  "uniform": {
    "prefix": "uniform",
    "body": "uniform",
    "description": "The qualifier uniform is used to declare variables that are shared between a shader and the OpenGL ES environment.\nUniforms can be used in the vertex shader and the fragment shader and they must have global scope. The same uniform variable can be used in the vertex and the fragment shader, but since both shaders share the same name space the declaration has to be identical. Uniforms are used to specify properties of the object that is rendered. Examples are the projection matrix, the light position or the material color of the object. Uniforms are read-only variables, i.e. their value can not be changed in the shader.\nSide note: Since a uniform is never initialized in the shader it has to be loaded with data by the application executing the shader."
  },

  "varying": {
    "prefix": "varying",
    "body": "varying",
    "description": "The qualifier varying is used to declare variables that are shared between the vertex shader and the fragment shader.\nVarying are used for information that is calculated in the vertex shader and should be handed over to the fragment shader. Both shaders have to declare the varying and the declarations must be identical. The vertex shader initializes the varying for each vertex. After that the per vertex data of the varying is interpolated during rasterization before being handed over to the fragment shader.\nThe varying qualifier can only be used with floating point scalar, floating point vectors and (floating point) matrices as well as arrays containing these types."
  },

  "highp": {
    "prefix": "highp",
    "body": "highp",
    "description": "The qualifier highp is used to specify the highest available precision for a variable. The variable has to be an integer or a floating point scalar or a vector or matrix based on these types. The precision qualifier precedes the type in the variable declaration.\nIn the vertex shader the use of a precision qualifier is optional. If no qualifier is given all variables are of highest precision. In the fragment shader a precision qualifier has to be used when declaring a variable unless a default precision has been defined for the specific type.\n\nuniform highp vec3 lightDirection;\n\nThe actual range corresponding to a precision qualifier is dependent on the specific OpenGL ES implementation. Using a lower precision might have a positive effect on performance (frame rates) and power efficiency but might also cause a loss in rendering quality. The appropriate trade-off can only be determined by testing different precision configurations."
  },

  "mediump": {
    "prefix": "mediump",
    "body": "mediump",
    "description": "The qualifier mediump is used to specify a precision between the highest and lowest available precision for a variable. The variable has to be an integer or a floating point scalar or a vector or matrix based on these types. The precision qualifier precedes the type in the variable declaration.\nIn the vertex shader the use of a precision qualifier is optional. If no qualifier is given all variables are of highest precision. In the fragment shader a precision qualifier has to be used when declaring a variable unless a default precision has been defined for the specific type.\n\nvarying mediump vec2 textureCoordinate;\n\nThe actual range corresponding to a precision qualifier is dependent on the specific OpenGL ES implementation. Using a lower precision might have a positive effect on performance (frame rates) and power efficiency but might also cause a loss in rendering quality. The appropriate trade-off can only be determined by testing different precision configurations."
  },

  "lowp": {
    "prefix": "lowp",
    "body": "lowp",
    "description": "The qualifier lowp is used to specify the lowest available precision for a variable. The variable has to be an integer or a floating point scalar or a vector or matrix based on these types. The precision qualifier precedes the type in the variable declaration.\nIn the vertex shader the use of a precision qualifier is optional. If no qualifier is given all variables are of highest precision. In the fragment shader a precision qualifier has to be used when declaring a variable unless a default precision has been defined for the specific type.\n\nvarying lowp vec4 colorVarying;\n\nThe actual range corresponding to a precision qualifier is dependent on the specific OpenGL ES implementation. Using a lower precision might have a positive effect on performance (frame rates) and power efficiency but might also cause a loss in rendering quality. The appropriate trade-off can only be determined by testing different precision configurations."
  },

  "precision": {
    "prefix": "precision",
    "body": "precision",
    "description": "The keyword precision is used in conjunction with a precision qualifier and a data type to specify the default precision for that data type. The type has to be an integer or a floating point scalar or a vector or matrix based on these types.\nIn the vertex shader all variables are of highest precision by default. The default can be changed defining another default precision. In the fragment shader a precision qualifier has to be used when declaring a variable unless a default precision has been defined for the specific type.\n\nprecision highp float;\n\nThe actual range corresponding to a precision qualifier is dependent on the specific OpenGL ES implementation. Using a lower precision might have a positive effect on performance (frame rates) and power efficiency but might also cause a loss in rendering quality. The appropriate trade-off can only be determined by testing different precision configurations."
  },

  "in": {
    "prefix": "in",
    "body": "in",
    "description": "The qualifier in is used to mark a parameter as read-only when a function is declared. The parameter will be passed by value to the function and the value can not be modified by the function.\nThe above function declaration shows the three possible parameter qualifiers. The usage of the read-only qualifier is not necessary since this is the default if no qualifier is specified."
  },

  "out": {
    "prefix": "out",
    "body": "out",
    "description": "The qualifier out is used to mark a parameter as write-only when a function is declared. The parameter will be passed by reference to the function but it is not initialized, i.e. the value can not be read. The value can be modified by the function and the changes are preserved after the function exits.\nThe above function declaration shows the three possible parameter qualifiers. The usage of the read-only qualifier is not necessary since this is the default if no qualifier is specified."
  },

  "inout": {
    "prefix": "inout",
    "body": "inout",
    "description": "The qualifier inout is used to mark a parameter as read-write when a function is declared. The parameter will be passed by reference to the function and is initialized, i.e. the value can be read. The value can be modified by the function and the changes are preserved after the function exits.\nThe above function declaration shows the three possible parameter qualifiers. The usage of the read-only qualifier is not necessary since this is the default if no qualifier is specified."
  },

  "gl_FragCoord": {
    "prefix": "gl_FragCoord",
    "body": "gl_FragCoord",
    "description": "mediump vec4 gl_FragCoord;\n\nbool gl_FrontFacing;\n\nThe built-in variable gl_FragCoord is used by the OpenGL ES 2.0 pipeline to hand over the coordinates of the fragment to the fragment shader. The variable is read-only and the value is assigned by the OpenGL ES 2.0 pipeline.\nThe values of the fragment coordinate vector are given in the window coordinate system."
  },

  "gl_FrontFacing": {
    "prefix": "gl_FrontFacing",
    "body": "gl_FrontFacing",
    "description": "The built-in variable gl_FrontFacing is used by the OpenGL ES 2.0 pipeline to hand over the information to the fragment shader if the fragment is part of a front-facing primitive (triangle). The variable is read-only and the value is assigned by the OpenGL ES 2.0 pipeline.\nThe front-facing variable has a boolean value."
  },

  "gl_PointCoord": {
    "prefix": "gl_PointCoord",
    "body": "gl_PointCoord",
    "description": "mediump int gl_PointCoord;\n\nThe built-in variable gl_PointCoord is used by the OpenGL ES 2.0 pipeline to hand over the coordinates of a point sprite to the fragment shader. The variable is read-only and the value is calculated and assigned by the OpenGL ES 2.0 pipeline based on the position and radius of the point sprite.\nSide note: A value for this variable is provided by the OpenGL ES 2.0 pipeline only if the rendered primitives are points."
  },

  "gl_FragColor": {
    "prefix": "gl_FragColor",
    "body": "gl_FragColor",
    "description": "mediump vec4 gl_FragColor;\n\nThe built-in variable gl_FragColor is used by the fragment shader to hand over the color of the fragment to the OpenGL ES 2.0 pipeline. The variable is pre-declared as shown above that way the variable can be used in the fragment shader for an assignment without prior declaration.\nThe values of the color vector are interpreted in the RGBA color space.\nThe assignment of values to this variable is mandatory for the fragment shader."
  },

  "gl_MaxTextureImageUnits": {
    "prefix": "gl_MaxTextureImageUnits",
    "body": "gl_MaxTextureImageUnits",
    "description": "const mediump int gl_MaxTextureImageUnits >= 8\n\nThe built-in constant gl_MaxTextureImageUnits provides the maximum number of texture units that can be used by the fragment shader. The value of this variable is dependent on the OpenGL ES 2.0 implementation but has to be at least 8."
  },

  "gl_MaxFragmentUniformVectors": {
    "prefix": "gl_MaxFragmentUniformVectors",
    "body": "gl_MaxFragmentUniformVectors",
    "description": "const mediump int gl_MaxFragmentUniformVectors >= 16\n\nThe built-in constant gl_MaxFragmentUniformVectors provides the maximum number of uniform vectors that can be used by the fragment shader. The value of this variable is dependent on the OpenGL ES 2.0 implementation but has to be at least 16."
  },

  "gl_MaxDrawBuffers": {
    "prefix": "gl_MaxDrawBuffers",
    "body": "gl_MaxDrawBuffers",
    "description": "const mediump int gl_MaxDrawBuffers = 1\n\nThe built-in constant gl_MaxDrawBuffers provides the maximum number of the available draw buffers. The value of this variable is 1 for all OpenGL ES 2.0 implementations."
  },

  "function float": {
    "prefix": "float",
    "body": ["float ${NAME}(){", "\t", "}"],
    "description": "A standard function that would need a return of a float value for it to work"
  },

  "function void": {
    "prefix": "void",
    "body": ["void ${NAME}(){", "\t", "}"],
    "description": "A standard function that can be named whatever you so wish"
  },

  "function main": {
    "prefix": "void main",
    "body": ["void main(){", "\t", "}"],
    "description": "void main(void){\n\t//code\n}\n\nThe keyword main is used to define the main function of a shader. This function is the entry point for the execution of every vertex and fragment shader. The main function takes no parameters and does not return a value."
  },

  "void": {
    "prefix": "void",
    "body": "void main(void);",
    "description": "void main(void);\nint aFunction(void);\nvoid bFunction(float);\n\nThe data type void is used when the parameter list of a function is empty and when a function does not return a value."
  },

  "int": {
    "prefix": "int",
    "body": "int ${NAME} = $3;",
    "description": "int aInt = 42;\nint bInt = int(aBool);\nint cInt = int(aFloat);\n\nThe data type int is used for integer values.\n\nSide note: Implicit type conversions are not supported. Type conversions can be done using constructors as shown in the second and third example."
  },

  "float": {
    "prefix": "float",
    "body": "float ${NAME} = $3;",
    "description": "float aFloat = 1.0;\nfloat bFloat = float(aBool);\nfloat cFloat = float(aInt);\n\nThe data type bool is used for boolean values (true or false).\n\nSide note: Implicit type conversions are not supported. Type conversions can be done using constructors as shown in the second and third example."
  },

  "bool": {
    "prefix": "bool",
    "body": "bool ${NAME} = $3;",
    "description": "bool aBool = true;\nbool bBool = bool(aInt);\nbool cBool = bool(aFloat);\n\nThe data type bool is used for boolean values (true or false).\n\nSide note: Implicit type conversions are not supported. Type conversions can be done using constructors as shown in the second and third example."
  },

  "texture2D": {
    "prefix": "texture2D",
    "body": "texture2D",
    "description": "vec4 texture2D(sampler2D sampler, vec2 coord)\nvec4 texture2D(sampler2D sampler, vec2 coord, float bias)\n\nThe texture2D function returns a texel, i.e. the (color) value of the texture for the given coordinates. The function has one input parameter of the type sampler2D and one input parameter of the type vec2 : sampler, the uniform the texture is bound to, and coord, the 2-dimensional coordinates of the texel to look up.\n\nThere is an optional third input parameter of the type float: bias. After calculating the appropriate level of detail for a texture with mipmaps the bias is added before the actual texture lookup operation is executed.\n\nSide note: On iOS devices texture lookup functionality is only available in the fragment shader."
  },

  "textureCube": {
    "prefix": "textureCube",
    "body": "textureCube",
    "description": "vec4 textureCube(samplerCube sampler, vec3 coord)\nvec4 textureCube(samplerCube sampler, vec3 coord, float bias)\n\nThe textureCube function returns a texel, i.e. the (color) value of the texture for the given coordinates. The function has one input parameter of the type samplerCube and one input parameter of the type vec3 : sampler, the uniform the texture is bound to, and coord, the 3-dimensional coordinates of the texel to look up.\n\nThere is an optional third input parameter of the type float: bias. After calculating the appropriate level of detail for a texture with mipmaps the bias is added before the actual texture lookup operation is executed.\n\nSide note: On iOS devices texture lookup functionality is only available in the fragment shader."
  },

  "PI": {
    "prefix": "PI",
    "body": ["const float PI = 3.14159265359;"],
    "description": "PI setup"
  },

  "random2d": {
    "prefix": "random2d",
    "body": [
      "float random2d(vec2 coord){",
      "\treturn fract(sin(dot(coord.xy, vec2(12.9898, 78.233))) * 43758.5453);",
      "}"
    ],
    "description": "random 2d function"
  },

  "noise1d": {
    "prefix": "noise1d",
    "body": [
      "float noise1d(float v){",
      "\treturn cos(v + cos(v * 90.1415) * 100.1415) * 0.5 + 0.5;",
      "}"
    ],
    "description": "noise1d function"
  },

  "simple setup": {
    "prefix": "simple setup",
    "body": [
      "#ifdef GL_ES",
      "precision mediump float;",
      "#endif",
      "",
      "uniform float u_time;",
      "uniform vec2 u_resolution;",
      "uniform vec2 u_mouse;",
      "",
      "void main(){",
      "\tvec2 coord = gl_FragCoord.xy;",
      "\tvec3 color = vec3(0.0);",
      "",
      "\tgl_FragColor = vec4(color, 1.0);",
      "}"
    ],
    "description": "Starter code including 'ifdef' check, u_ methods & the main"
  },

  "circle shape": {
    "prefix": "circle shape",
    "body": [
      "float ${NAME}(vec2 position, float radius){",
      "\treturn step(radius, length(position - vec2(0.5)));",
      "}"
    ],
    "description": "circle shape"
  },

  "rectangle shape": {
    "prefix": "rectangle shape",
    "body": [
      "float ${NAME}(vec2 position, vec2 scale){",
      "\tscale = vec2(0.5) - scale * 0.5;",
      "\tvec2 shaper = vec2(step(scale.x, position.x), step(scale.y, position.y));",
      "\tshaper *= vec2(step(scale.x, 1.0 - position.x), step(scale.y, 1.0 - position.y));",
      "\treturn shaper.x * shaper.y;",
      "}"
    ],
    "description": "rectangle shape"
  },

  "polygon shape": {
    "prefix": "polygon shape",
    "body": [
      "float ${NAME}(vec2 position, float radius, float sides){",
      "\tposition = position * 2.0 - 1.0;",
      "\tfloat angle = atan(position.x, position.y);",
      "\tfloat slice = PI * 2.0 / sides;",
      "\treturn step(radius, cos(floor(0.5 + angle / slice) * slice - angle) * length(position));",
      "}"
    ],
    "description": "polygon shape"
  },

  "scale": {
    "prefix": "scale",
    "body": [
      "mat2 scale(vec2 scale){",
      "\treturn mat2(scale.x, 0.0, 0.0, scale.y);",
      "}"
    ],
    "description": "scale"
  },

  "rotate": {
    "prefix": "rotate",
    "body": [
      "mat2 rotate(float angle){",
      "\treturn mat2(cos(angle), -sin(angle), sin(angle), cos(angle));",
      "}"
    ],
    "description": "rotate"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/meson.json`:

```````json
{
  "If_Statement": {
    "prefix": "if",
    "body": ["if ${1:condition}", "$0", "endif"],
    "description": "if statement"
  },
  "If_else_Statement": {
    "prefix": "ifelse",
    "body": ["if ${1:condition}", "$2", "else", "$3", "endif"],
    "description": "if else statement"
  },
  "Else_if_Statement": {
    "prefix": "elif",
    "body": [
      "if ${1:condition}",
      "$2",
      "elif ${3:second_condition}",
      "$4",
      "endif"
    ],
    "description": "else if statement"
  },
  "For_each": {
    "prefix": "foreach",
    "body": ["foreach $1 : $2", "$0", "endforeach"],
    "description": "foreach loop"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/scala.json`:

```````json
{
  "object": {
    "prefix": "object",
    "body": [
      "object ${1:ObjectName} {",
      "\t${2:println(\"Hello, world!\")}",
      "}"
    ],
    "description": "Object"
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${1:ClassName} {",
      "\t${2:println(\"Hello, world!\")}",
      "}"
    ],
    "description": "Class"
  },
  "case_class": {
    "prefix": "case_class",
    "body": "case class ${1:CaseClassName}(${2:argName}: ${3:ArgType})",
    "description": "Case class"
  },
  "trait": {
    "prefix": "trait",
    "body": ["trait ${1:TraitName} {", "\t${2:}", "}"],
    "description": "Trait"
  },
  "main_object": {
    "prefix": "obj_main",
    "body": [
      "object ${1:ObjectName} {",
      "\tdef main(args: Array[String]): Unit = {",
      "\t\t${2:println(\"Hello, world!\")}",
      "\t}",
      "}"
    ],
    "description": "Object with main method"
  },
  "app": {
    "prefix": "app",
    "body": [
      "object ${1:App} extends App {",
      "\t${2:println(\"Hello, world!\")}",
      "}"
    ],
    "description": "Object extending App"
  },
  "def": {
    "prefix": "def",
    "body": [
      "def ${1:methodName}(${2:argName}: ${3:ArgType}): ${4:ReturnType} = {",
      "\t${5:println(\"Hello, world!\")}",
      "}"
    ],
    "description": "Method"
  },
  "def_short": {
    "prefix": "def_short",
    "body": "def ${1:methodName}(${2:argName}: ${3:ArgType}): ${4:ReturnType} = ${5:println(\"Hello, world!\")}",
    "description": "Method as one-liner"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (${1:element} <- elements) {",
      "\t${2:println(element.toString)}",
      "}"
    ],
    "description": "For loop"
  },
  "while": {
    "prefix": "while",
    "body": [
      "while(${1:condition}) {",
      "\t${2:println(\"Hello, world!\")}",
      "}"
    ],
    "description": "While loop"
  },
  "ifelse": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "\t${2:println(\"Hello, world!\")}",
      "} else {",
      "\t${2:println(\"Hello, world!\")}",
      "}"
    ],
    "description": "Branch based on conditions using if/else"
  },
  "match": {
    "prefix": "match",
    "body": [
      "${1:x} match {",
      "\tcase ${2:0} => ${3:\"zero\"}",
      "\tcase ${4:1} => ${5:\"one\"}",
      "}"
    ],
    "description": "Branch based on conditions using pattern matching"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/global.json`:

```````json
{
  "Author": {
    "prefix": "$me",
    "body": "Thomas Leon Highbaugh ©${CURRENT_YEAR}",
    "description": "A quick way of signing a document with the current year and copyright symbol already pasted with it."
  },
  "Letter Signature": {
    "prefix": "$me",
    "body": [
      "Thank you for your time and consideration,",
      "Thomas Leon Highbaugh <me@thomasleonhighbaugh.me>"
    ],
    "description": "A quick way of signing a document with the current year and copyright symbol already pasted with it."
  },
  "diso": {
    "prefix": "diso",
    "body": [
      "${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}T${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}"
    ],
    "description": "ISO date time stamp"
  },
  "Lorem Ipsum Sentence": {
    "prefix": "loremS",
    "body": "Lorem ipsum dolor sit amet, qui minim labore adipisicing minim sint cillum sint consectetur cupidatat.",
    "description": "Lorem Ipsum Sentence"
  },
  "Lorem Ipsum Paragraph": {
    "prefix": "loremP",
    "body": "Lorem ipsum dolor sit amet, officia excepteur ex fugiat reprehenderit enim labore culpa sint ad nisi Lorem pariatur mollit ex esse exercitation amet. Nisi anim cupidatat excepteur officia. Reprehenderit nostrud nostrud ipsum Lorem est aliquip amet voluptate voluptate dolor minim nulla est proident. Nostrud officia pariatur ut officia. Sit irure elit esse ea nulla sunt ex occaecat reprehenderit commodo officia dolor Lorem duis laboris cupidatat officia voluptate. Culpa proident adipisicing id nulla nisi laboris ex in Lorem sunt duis officia eiusmod. Aliqua reprehenderit commodo ex non excepteur duis sunt velit enim. Voluptate laboris sint cupidatat ullamco ut ea consectetur et est culpa et culpa duis.",
    "description": "Lorem Ipsum Paragraph"
  },
  "MIT": {
    "prefix": "mitl",
    "description": "MIT License",
    "body": [
      "The MIT License (MIT)",
      "",
      "Copyright (c) ${CURRENT_YEAR} ${0:Author}",
      "",
      "Permission is hereby granted, free of charge, to any person obtaining a copy",
      "of this software and associated documentation files (the \"Software\"), to deal",
      "in the Software without restriction, including without limitation the rights",
      "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "copies of the Software, and to permit persons to whom the Software is",
      "furnished to do so, subject to the following conditions:",
      "",
      "The above copyright notice and this permission notice shall be included in all",
      "copies or substantial portions of the Software.",
      "",
      "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
      "SOFTWARE."
    ]
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/norg.json`:

```````json
{
  "code": {
    "description": "code_block",
    "prefix": "code",
    "body": ["@code ${1:lang}", "$0", "@end"]
  },

  "math": {
    "description": "math block",
    "prefix": "math",
    "body": ["@math", "$0", "@end"]
  },

  "table": {
    "description": "table",
    "prefix": "table",
    "body": ["@table", "$0", "@end"]
  },

  "task": {
    "description": "task",
    "prefix": "task",
    "body": ["- [ ] ${1:task}"]
  },

  "link": {
    "description": "links",
    "prefix": "link",
    "body": ["[${1:description}](${2:object})"]
  },

  "data": {
    "description": "data tags",
    "prefix": "data",
    "body": ["@data", "$0", "@end"]
  },

  "bold": {
    "description": "bold words",
    "prefix": "bold",
    "body": ["*$0*"]
  },

  "italic": {
    "description": "italic words",
    "prefix": "italic",
    "body": ["/$0/"]
  },

  "underline": {
    "description": "underline words",
    "prefix": "underline",
    "body": ["_$0_"]
  },

  "subscript": {
    "description": "subscript",
    "prefix": "subscript",
    "body": [",$0,"]
  },

  "superscript": {
    "description": "superscript",
    "prefix": "superscript",
    "body": ["^$0^"]
  },

  "var": {
    "description": "variable",
    "prefix": "var",
    "body": ["=${1:variable}="]
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/kubernetes.json`:

```````json
{
  "k8s Ingress with TLS": {
    "prefix": "k-ingress-tls",
    "description": "k8s Ingress with TLS",
    "body": [
      "# https://kubernetes.io/docs/concepts/services-networking/ingress/#tls",
      "apiVersion: v1",
      "kind: Secret",
      "metadata:",
      "  name: ${1:testsecret-tls}",
      "  namespace: ${2:default}",
      "type: kubernetes.io/tls",
      "# The TLS secret must contain keys named 'tls.crt' and 'tls.key' that contain the certificate and private key to use for TLS.",
      "data:",
      "  tls.crt: base64 encoded cert",
      "  tls.key: base64 encoded key",
      "",
      "---",
      "apiVersion: networking.k8s.io/v1",
      "kind: Ingress",
      "metadata:",
      "  name: ${3:tls-example-ingress}",
      "  namespace: ${2:default}",
      "spec:",
      "  tls:",
      "  - hosts:",
      "      - ${4:https-example.foo.com}",
      "    secretName: ${1:testsecret-tls}",
      "  rules:",
      "  - host: ${4:https-example.foo.com}",
      "    http:",
      "      paths:",
      "      - path: /${5}",
      "        pathType: Prefix",
      "        backend:",
      "          service:",
      "            name: ${6:service1}",
      "            port:",
      "              number: ${7:80}",
      "---",
      "$0"
    ]
  },
  "k8s Ingress": {
    "prefix": "k-ingress",
    "description": "k8s Ingress",
    "body": [
      "# https://kubernetes.io/docs/concepts/services-networking/ingress/",
      "apiVersion: networking.k8s.io/v1",
      "kind: Ingress",
      "metadata:",
      "  name: ${1:example-ingress}",
      "  namespace: ${2:default}",
      "spec:",
      "  rules:",
      "  - host: ${3:example.foo.com}",
      "    http:",
      "      paths:",
      "      - path: /${4}",
      "        pathType: ${5|Prefix,Exact|}",
      "        backend:",
      "          service:",
      "            name: ${6:service1}",
      "            port:",
      "              number: ${7:80}",
      "---",
      "$0"
    ]
  },
  "k8s Ingress with Rewrite rule": {
    "prefix": "k-ingress-rewrite",
    "description": "k8s Ingress with Rewrite rule",
    "body": [
      "# https://kubernetes.io/docs/concepts/services-networking/ingress/",
      "apiVersion: networking.k8s.io/v1",
      "kind: Ingress",
      "metadata:",
      "  name: ${1:example-ingress}",
      "  namespace: ${2:default}",
      "  # https://kubernetes.github.io/ingress-nginx/examples/rewrite/",
      "  annotations:",
      "    nginx.ingress.kubernetes.io/rewrite-target: /\\$1",
      "spec:",
      "  rules:",
      "  - host: ${3:example.foo.com}",
      "    http:",
      "      paths:",
      "      - path: ${4:/api/(.*)}",
      "        pathType: Prefix",
      "        backend:",
      "          service:",
      "            name: ${5:service1}",
      "            port:",
      "              number: ${6:80}",
      "---",
      "$0"
    ]
  },
  "k8s Deployment": {
    "prefix": "k-deploymment",
    "description": "k8s Deployment",
    "body": [
      "# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
      "apiVersion: apps/v1",
      "kind: Deployment",
      "metadata:",
      "  name:  ${1:myjob}",
      "  namespace: ${2:default}",
      "  labels:",
      "    app:  ${1:myjob}",
      "spec:",
      "  selector:",
      "    matchLabels:",
      "      app: ${1:myjob}",
      "  replicas: 1",
      "  strategy:",
      "    rollingUpdate:",
      "      maxSurge: 25%",
      "      maxUnavailable: 25%",
      "    type: RollingUpdate",
      "  template:",
      "    metadata:",
      "      labels:",
      "        app:  ${1:myjob}",
      "    spec:",
      "      # initContainers:",
      "        # Init containers are exactly like regular containers, except:",
      "          # - Init containers always run to completion.",
      "          # - Each init container must complete successfully before the next one starts.",
      "      containers:",
      "      - name:  ${1:myjob}",
      "        image:  ${3:myjob:latest}",
      "        imagePullPolicy: ${4|IfNotPresent,Always,Never|}",
      "        resources:",
      "          requests:",
      "            cpu: 100m",
      "            memory: 100Mi",
      "          limits:",
      "            cpu: 100m",
      "            memory: 100Mi",
      "        livenessProbe:",
      "          tcpSocket:",
      "            port: ${5:80}",
      "          initialDelaySeconds: 5",
      "          timeoutSeconds: 5",
      "          successThreshold: 1",
      "          failureThreshold: 3",
      "          periodSeconds: 10",
      "        readinessProbe:",
      "          httpGet:",
      "            path: /_status/healthz",
      "            port: ${5:80}",
      "          initialDelaySeconds: 5",
      "          timeoutSeconds: 2",
      "          successThreshold: 1",
      "          failureThreshold: 3",
      "          periodSeconds: 10",
      "        env:",
      "        - name: DB_HOST",
      "          valueFrom:",
      "            configMapKeyRef:",
      "              name: ${1:myjob}",
      "              key: DB_HOST",
      "        ports:",
      "        - containerPort:  ${5:80}",
      "          name:  ${1:myjob}",
      "        volumeMounts:",
      "        - name: localtime",
      "          mountPath: /etc/localtime",
      "      volumes:",
      "        - name: localtime",
      "          hostPath:",
      "            path: /usr/share/zoneinfo/Asia/Taipei",
      "      restartPolicy: Always",
      "---",
      "$0"
    ]
  },
  "k8s Service": {
    "prefix": "k-service",
    "description": "k8s Service",
    "body": [
      "# https://kubernetes.io/docs/concepts/services-networking/service/",
      "apiVersion: v1",
      "kind: Service",
      "metadata:",
      "  name: ${1:myjob}",
      "  namespace: ${2:default}",
      "spec:",
      "  selector:",
      "    app: ${1:myjob}",
      "  type: ${3|ClusterIP,NodePort,LoadBalancer|}",
      "  ports:",
      "  - name: ${1:myjob}",
      "    protocol: ${4|TCP,UDP|}",
      "    port: ${5:80}",
      "    targetPort: ${6:5000}",
      "    nodePort: ${7:30001}",
      "---",
      "$0"
    ]
  },
  "k8s ConfigMap": {
    "prefix": "k-configmap",
    "description": "k8s ConfigMap",
    "body": [
      "# https://kubernetes.io/docs/concepts/configuration/configmap/",
      "kind: ConfigMap",
      "apiVersion: v1",
      "metadata:",
      "  name: ${1:myconfig}",
      "  namespace: ${2:default}",
      "data:",
      "  ${3:key}: ${4:value}",
      "---",
      "$0"
    ]
  },
  "k8s Secret": {
    "prefix": "k-secret",
    "description": "k8s Secret",
    "body": [
      "# https://kubernetes.io/docs/concepts/configuration/secret/",
      "apiVersion: v1",
      "kind: Secret",
      "metadata:",
      "  name: ${1:mysecret}",
      "  namespace: ${2:default}",
      "type: Opaque",
      "data:",
      "  # Example:",
      "  # password: {{ .Values.password | b64enc }}",
      "---",
      "$0"
    ]
  },
  "k8s Job": {
    "prefix": "k-job",
    "description": "k8s Job",
    "body": [
      "# https://kubernetes.io/docs/concepts/workloads/controllers/job/",
      "apiVersion: batch/v1",
      "kind: Job",
      "metadata:",
      "  name: ${1:myjob}",
      "  namespace: ${2:default}",
      "  labels:",
      "    app: ${1:myjob}",
      "spec:",
      "  template:",
      "    metadata:",
      "      name: ${1:myjob}",
      "      labels:",
      "        app: ${1:myjob}",
      "    spec:",
      "      containers:",
      "      - name: ${1:myjob}",
      "        image: ${3:python:3.7.6-alpine3.10}",
      "        command: ['sh', '-c', '${4:python3 manage.py makemigrations && python3 manage.py migrate}']",
      "        env:",
      "        - name: ENV_NAME",
      "          value: ENV_VALUE",
      "        volumeMounts:",
      "        - name: localtime",
      "          mountPath: /etc/localtime",
      "      volumes:",
      "      - name: localtime",
      "        hostPath:",
      "          path: /usr/share/zoneinfo/Asia/Taipei",
      "      restartPolicy: OnFailure",
      "      dnsPolicy: ClusterFirst",
      "---",
      "$0"
    ]
  },
  "k8s CronJob": {
    "prefix": "k-cronjob",
    "description": "k8s CronJob",
    "body": [
      "# https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/",
      "apiVersion: batch/v1beta1",
      "kind: CronJob",
      "metadata:",
      "  name: ${1:cronjobname}",
      "  namespace: ${2:default}",
      "spec:",
      "  schedule: \"${3:*/1 * * * *}\"",
      "  jobTemplate:",
      "    spec:",
      "      template:",
      "        spec:",
      "          containers:",
      "          - name: ${4:jobname}",
      "            image: ${5:busybox}",
      "            args: ['/bin/sh', '-c', '${6:date; echo Hello from the Kubernetes cluster}']",
      "          restartPolicy: OnFailure",
      "---",
      "$0"
    ]
  },
  "k8s Pod": {
    "prefix": "k-pod",
    "description": "k8s Pod",
    "body": [
      "# https://kubernetes.io/docs/concepts/workloads/pods/",
      "apiVersion: v1",
      "kind: Pod",
      "metadata:",
      "  name: \"${1:myapp}\"",
      "  namespace: ${2:default}",
      "  labels:",
      "    app: \"${1:myapp}\"",
      "spec:",
      "  containers:",
      "  - name: ${1:myapp}",
      "    image: \"${3:debian-slim:latest}\"",
      "    resources:",
      "      limits:",
      "        cpu: 200m",
      "        memory: 500Mi",
      "      requests:",
      "        cpu: 100m",
      "        memory: 200Mi",
      "    env:",
      "    - name: DB_HOST",
      "      valueFrom:",
      "        configMapKeyRef:",
      "          name: myapp",
      "          key: DB_HOST",
      "    ports:",
      "    - containerPort: ${4:80}",
      "      name:  http",
      "    volumeMounts:",
      "    - name: localtime",
      "      mountPath: /etc/localtime",
      "  volumes:",
      "    - name: localtime",
      "      hostPath:",
      "        path: /usr/share/zoneinfo/Asia/Taipei",
      "  restartPolicy: Always",
      "---",
      "$0"
    ]
  },
  "k8s PersistentVolumeClaim": {
    "prefix": "k-pvc",
    "description": "k8s PersistentVolumeClaim",
    "body": [
      "# https://kubernetes.io/docs/concepts/storage/persistent-volumes/",
      "apiVersion: v1",
      "kind: PersistentVolumeClaim",
      "metadata:",
      "  name: ${1:myapp}",
      "  namespace: ${2:default}",
      "  labels:",
      "    app: ${1:myapp}",
      "spec:",
      "  # AKS: default,managed-premium",
      "  # GKE: standard",
      "  # EKS: gp2 (custom)",
      "  # Rook: rook-ceph-block,rook-ceph-fs",
      "  storageClassName: ${3|default,managed-premium,standard,gp2,rook-ceph-block,rook-ceph-fs|}",
      "  accessModes:",
      "  - ${4|ReadWriteOnce,ReadWriteMany,ReadOnlyMany|}",
      "  resources:",
      "    requests:",
      "      storage: ${5:2Gi}",
      "---",
      "$0"
    ]
  },
  "k8s DaemonSet": {
    "prefix": "k-daemonset",
    "description": "k8s DaemonSet",
    "body": [
      "# https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
      "apiVersion: apps/v1",
      "kind: DaemonSet",
      "metadata:",
      "  name: ${1:myapp}",
      "  namespace: ${2:default}",
      "  labels:",
      "    app: ${1:myapp}",
      "spec:",
      "  selector:",
      "    matchLabels:",
      "      app: ${1:myapp}",
      "  template:",
      "    metadata:",
      "      labels:",
      "        app: ${1:myapp}",
      "    spec:",
      "      tolerations:",
      "      # this toleration is to have the daemonset runnable on master nodes",
      "      # remove it if your masters can't run pods",
      "      - key: node-role.kubernetes.io/master",
      "        effect: NoSchedule",
      "      containers:",
      "      - name: ${1:myapp}",
      "        image: ${3:debian}",
      "        resources:",
      "          limits:",
      "            memory: 200Mi",
      "          requests:",
      "            cpu: 100m",
      "            memory: 200Mi",
      "        volumeMounts:",
      "        - name: localtime",
      "          mountPath: /etc/localtime",
      "      terminationGracePeriodSeconds: 30",
      "      volumes:",
      "      - name: localtime",
      "        hostPath:",
      "          path: /usr/share/zoneinfo/Asia/Taipei",
      "---",
      "$0"
    ]
  },
  "k8s StatefulSet": {
    "prefix": "k-statefulset",
    "description": "k8s StatefulSet",
    "body": [
      "# https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/",
      "apiVersion: apps/v1",
      "kind: StatefulSet",
      "metadata:",
      "  name: ${1:myapp}",
      "  namespace: ${2:default}",
      "spec:",
      "  selector:",
      "    matchLabels:",
      "      app: ${1:myapp} # has to match .spec.template.metadata.labels",
      "  serviceName: \"${1:myapp}\"",
      "  replicas: ${3:3} # by default is 1",
      "  template:",
      "    metadata:",
      "      labels:",
      "        app: ${1:myapp} # has to match .spec.selector.matchLabels",
      "    spec:",
      "      terminationGracePeriodSeconds: 10",
      "      containers:",
      "      - name: ${1:myapp}",
      "        image: ${4:${1:myapp}-slim:1.16.1}",
      "        ports:",
      "        - containerPort: ${5:80}",
      "          name: ${1:myapp}",
      "        volumeMounts:",
      "        - name: ${6:www}",
      "          mountPath: /usr/share/nginx/html",
      "  volumeClaimTemplates:",
      "  - metadata:",
      "      name: ${6:www}",
      "    spec:",
      "      storageClassName: ${7:my-storage-class}",
      "      accessModes:",
      "      - ${8|ReadWriteOnce,ReadWriteMany,ReadOnlyMany|}",
      "      resources:",
      "        requests:",
      "          storage: ${9:1Gi}",
      "---",
      "$0"
    ]
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/cpp.json`:

```````json
{
  "for": {
    "prefix": "for",
    "body": [
      "for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:length}; $2++) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for 'for' loop"
  },
  "forr": {
    "prefix": "forr",
    "body": [
      "for (${1:size_t} ${2:i} = ${3:length} - 1; $2 >= ${4:0}; $2--) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for reverse 'for' loop"
  },
  "do": {
    "prefix": "do",
    "body": ["do", "{", "\t$1", "} while($2);"],
    "description": "Code snippet for do...while loop"
  },
  "while": {
    "prefix": "while",
    "body": ["while ($1)", "{", "\t$2", "}"],
    "description": ""
  },
  "foreach": {
    "prefix": "foreach",
    "body": [
      "for(${1:auto} ${2:var} : ${3:collection_to_loop})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for range-based for loop (c++11) statement"
  },
  "if": {
    "prefix": "if",
    "body": ["if ($1)", "{", "\t$0", "}"],
    "description": "Code snippet for if statement"
  },
  "else": {
    "prefix": "else",
    "body": ["else", "{", "\t$0", "}"],
    "description": "Code snippet for else statement"
  },
  "else if": {
    "prefix": "else if",
    "body": ["else if ($1)", "{", "\t$0", "}"],
    "description": "Code snippet for else-if statement"
  },
  "enum": {
    "prefix": "enum",
    "body": ["enum ${1:MyEnum} {", "\t$0", "};"],
    "description": "Code snippet for enum"
  },
  "enum class": {
    "prefix": "enum class",
    "body": ["enum class ${1:MyClass} {$0};"],
    "description": "Code snippet for enum class (c++11)"
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "\t$1();",
      "\t$1($1 &&) = default;",
      "\t$1(const $1 &) = default;",
      "\t$1 &operator=($1 &&) = default;",
      "\t$1 &operator=(const $1 &) = default;",
      "\t~$1();",
      "",
      "private:",
      "\t$2",
      "};",
      "",
      "$1::$1()",
      "{",
      "}",
      "",
      "$1::~$1()",
      "{",
      "}"
    ],
    "description": "Code snippet for class"
  },
  "classi": {
    "prefix": "classi",
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "\t$1() = default;",
      "\t$1($1 &&) = default;",
      "\t$1(const $1 &) = default;",
      "\t$1 &operator=($1 &&) = default;",
      "\t$1 &operator=(const $1 &) = default;",
      "\t~$1() = default;",
      "",
      "private:",
      "\t$2",
      "};"
    ],
    "description": "Code snippet for class with inline constructor/destructor"
  },
  "interface": {
    "prefix": "interface",
    "body": ["__interface I${1:Interface}", "{", "\t$0", "};"],
    "description": "Code snippet for interface (Visual C++)"
  },
  "namespace": {
    "prefix": "namespace",
    "body": ["namespace ${1:MyNamespace}", "{", "\t$0", "}"]
  },
  "#ifdef": {
    "prefix": "#ifdef",
    "body": ["#ifdef ${1:DEBUG}", "$0", "#endif // ${DEBUG}"],
    "description": "Code snippet for #ifdef"
  },
  "#ifndef": {
    "prefix": "#ifndef",
    "body": ["#ifndef ${1:DEBUG}", "$0", "#endif // !$1"],
    "description": "Code snippet for #ifndef"
  },
  "#if": {
    "prefix": "#if",
    "body": ["#if ${1:0}", "$0", "#endif // $1"],
    "description": "Code snippet for #if"
  },
  "struct": {
    "prefix": "struct",
    "body": ["struct ${1:MyStruct}", "{", "\t$0", "};"],
    "description": "Code snippet for struct"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:switch_on}) {",
      "\tdefault:",
      "\t\t$0",
      "\t\tbreak;",
      "}"
    ],
    "description": "Code snippet for switch statement"
  },
  "try": {
    "prefix": "try",
    "body": [
      "try",
      "{",
      "\t",
      "}",
      "catch (const std::exception&)",
      "{",
      "\t$1",
      "}"
    ],
    "description": "Code snippet for try catch"
  },
  "union": {
    "prefix": "union",
    "body": ["union ${1:MyUnion}", "{", "\t$0", "};"],
    "description": "Code snippet for union"
  },
  "cout": {
    "prefix": "cout",
    "body": ["std::cout << \"${1:message}\" << std::endl;"],
    "description": "Code snippet for printing to std::cout, provided the header is set"
  },
  "cin": {
    "prefix": "cin",
    "body": ["std::cin >> $1;"],
    "description": "Code snippet for std::cin, provided the header is set"
  },
  "printf": {
    "prefix": "printf",
    "body": ["printf(\"$1\\n\"$0);"],
    "description": "Generic printf() snippet"
  },
  "sprintf": {
    "prefix": "sprintf",
    "body": ["sprintf($1, \"$2\\n\"$0);"],
    "description": "Generic sprintf() snippet"
  },
  "fprintf": {
    "prefix": "fprintf",
    "body": ["fprintf(${1:stderr}, \"$2\\n\"$0);"],
    "description": "Generic fprintf() snippet"
  },
  "scanf": {
    "prefix": "scanf",
    "body": ["scanf(\"$1\"$0);"],
    "description": "Generic scanf() snippet"
  },
  "sscanf": {
    "prefix": "sscanf",
    "body": ["sscanf($1, \"$2\"$0);"],
    "description": "Generic sscanf() snippet"
  },
  "fscanf": {
    "prefix": "fscanf",
    "body": ["fscanf($1, \"$2\"$0);"],
    "description": "Generic fscanf() snippet"
  },
  "#inc": {
    "prefix": "#inc",
    "body": ["#include \"$0\""],
    "description": "Code snippet for #include \" \""
  },
  "#inc<": {
    "prefix": "#inc<",
    "body": ["#include <$0>"],
    "description": "Code snippet for #include < >"
  },
  "#def": {
    "prefix": "def",
    "body": ["#define $0"],
    "description": "Code snippet for #define \" \""
  },
  "Main function template": {
    "prefix": "main",
    "body": [
      "int main (int argc, char *argv[])",
      "{",
      "\t$1",
      "\treturn 0;",
      "}"
    ],
    "description": "A standard main function for a C++ program"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/css.json`:

```````json
{
  "align-items": {
    "prefix": "ai",
    "body": "align-items: ${1|flex-start,flex-end,center,baseline,stretch,start,end,self-start,self-end|};",
    "description": "initial value: stretch"
  },
  "align-items: baseline": {
    "prefix": "aib",
    "body": "align-items: baseline;"
  },
  "align-items: center": {
    "prefix": "aic",
    "body": "align-items: center;"
  },
  "align-items: flex-start": {
    "prefix": "aifs",
    "body": "align-items: flex-start;"
  },
  "align-items: flex-end": {
    "prefix": "aife",
    "body": "align-items: flex-end;"
  },
  "align-items: stretch": {
    "prefix": "ais",
    "body": "align-items: stretch;"
  },
  "align-self": {
    "prefix": "as",
    "body": "align-items: ${1|flex-start,flex-end,center,baseline,stretch,auto|};",
    "description": "initial value: auto"
  },
  "animation": {
    "prefix": "ani",
    "body": "animation: ${1:name} ${2:1s} ${3|linear,ease-in-out,ease,ease-in,ease-out,step-start,step-end,steps,cubic-bezier|};",
    "description": "animation: name duration timing-function delay direction count fill-mode play-state"
  },
  "animation-delay": {
    "prefix": "anide",
    "body": "animation-delay: ${0:1s};"
  },
  "animation-direction": {
    "prefix": "anidi",
    "body": "animation-direction: ${1|alternate,alternate-reverse,reverse,normal|};",
    "description": "initial value: normal"
  },
  "animation-duratuion": {
    "prefix": "anidu",
    "body": "animation-duration: ${0:1s};"
  },
  "animation-fill-mode": {
    "prefix": "anifm",
    "body": "animation-fill-mode: ${1|forwards,backwards,both,none|};",
    "description": "initial value: none"
  },
  "animation-iteration-count": {
    "prefix": "aniic",
    "body": "animation-iteration-count: ${0:infinite};",
    "description": "initial value: 1"
  },
  "animation-name": {
    "prefix": "anin",
    "body": "animation-name: ${0:name};"
  },
  "animation-play-state": {
    "prefix": "anips",
    "body": "animation-play-state: ${1|paused,running|};",
    "description": "initial value: running"
  },
  "animation-timing-function": {
    "prefix": "anitf",
    "body": "animation-timing-function: ${1|linear,ease,ease-in-out,ease-in,ease-out,step-start,step-end,steps,cubic-bezier|};",
    "description": "initial value: ease"
  },
  "background": {
    "prefix": "bg",
    "body": "background: ${0:#fff};",
    "description": "background: image position/size repeat attachment box box"
  },
  "background-attachment": {
    "prefix": "bga",
    "body": "background-attachment: ${1|fixed,scroll,local|};",
    "description": "initial value: scroll"
  },
  "background-color": {
    "prefix": "bgc",
    "body": "background-color: ${0:#fff};"
  },
  "background-clip": {
    "prefix": "bgcl",
    "body": "background-clip: ${1|border-box,padding-box,content-box,text|};",
    "description": "initial value: border-box"
  },
  "background-image": {
    "prefix": "bgi",
    "body": "background-image: url('${0:background.jpg}');"
  },
  "background-origin": {
    "prefix": "bgo",
    "body": "background-origin: ${1|border-box,padding-box,content-box|};",
    "description": "initial value: padding-box"
  },
  "background-position": {
    "prefix": "bgp",
    "body": "background-position: ${1:left} ${2:top};"
  },
  "background-repeat": {
    "prefix": "bgr",
    "body": "background-repeat: ${1|no-repeat,repeat-x,repeat-y,repeat,space,round|};",
    "description": "initial value: repeat"
  },
  "background-repeat: repeat": {
    "prefix": "bgrr",
    "body": "background-repeat: repeat;"
  },
  "background-repeat: repeat-x": {
    "prefix": "bgrx",
    "body": "background-repeat: repeat-x;"
  },
  "background-repeat: repeat-y": {
    "prefix": "bgry",
    "body": "background-repeat: repeat-y;"
  },
  "background-repeat: no-repeat": {
    "prefix": "bgrn",
    "body": "background-repeat: no-repeat;"
  },
  "background-size": {
    "prefix": "bgs",
    "body": "background-size: ${0:cover};"
  },
  "border": {
    "prefix": "bor",
    "body": "border: ${1:1px} ${2|solid,dashed,dotted,double,groove,ridge,inset,outset,none,hidden|} ${0:#000};"
  },
  "border: none": {
    "prefix": "born",
    "body": "border: none;"
  },
  "border-color": {
    "prefix": "borc",
    "body": "border-color: ${0:#000};"
  },
  "border-style": {
    "prefix": "bors",
    "body": "border-style: ${1|solid,dashed,dotted,double,groove,ridge,inset,outset,none,hidden|};"
  },
  "border-width": {
    "prefix": "borw",
    "body": "border-width: ${0:1px};"
  },
  "border-bottom": {
    "prefix": "borb",
    "body": "border-bottom: ${1:1px} ${2|solid,dashed,dotted,double,groove,ridge,inset,outset,none,hidden|} ${0:#000};"
  },
  "border-left": {
    "prefix": "borl",
    "body": "border-left: ${1:1px} ${2|solid,dashed,dotted,double,groove,ridge,inset,outset,none,hidden|} ${0:#000};"
  },
  "border-right": {
    "prefix": "borr",
    "body": "border-right: ${1:1px} ${2|solid,dashed,dotted,double,groove,ridge,inset,outset,none,hidden|} ${0:#000};"
  },
  "border-top": {
    "prefix": "bort",
    "body": "border-top: ${1:1px} ${2|solid,dashed,dotted,double,groove,ridge,inset,outset,none,hidden|} ${0:#000};"
  },
  "border-radius": {
    "prefix": "br",
    "body": "border-radius: ${0:2px};"
  },
  "bottom": {
    "prefix": "bot",
    "body": "bottom: ${0:0};"
  },
  "box-shadow": {
    "prefix": "bos",
    "body": "box-shadow: ${1:1px} ${2:1px} ${3:1px} ${4:1px} ${0:rgba(0, 0, 0, .5)};",
    "description": "box-shadow: x-offset y-offset blur spread color"
  },
  "box-sizing": {
    "prefix": "boz",
    "body": "box-sizing: ${1|border-box,content-box|};",
    "description": "initial value: content-box"
  },
  "clear": {
    "prefix": "clr",
    "body": "clear: ${1|both,left,right,none|};"
  },
  "color": {
    "prefix": "col",
    "body": "color: ${0:#000};"
  },
  "content": {
    "prefix": "con",
    "body": "content: '$0';"
  },
  "cursor": {
    "prefix": "cur",
    "body": "cursor: ${1|auto,default,alias,cell,copy,crosshair,context-menu,help,grab,grabbing,move,none,no-drop,not-allowed,pointer,progress,e-resize,all-scroll,text,wait,vertical-text,zoom-in,zoom-out|};",
    "description": "initial value: auto"
  },
  "cursor: pointer": {
    "prefix": "curp",
    "body": "cursor: pointer;"
  },
  "cursor: default": {
    "prefix": "curd",
    "body": "cursor: default;"
  },
  "display": {
    "prefix": "dis",
    "body": "display: ${1|none,block,inline,inline-block,flex,inline-flex,list-item,table,inline-table,table-caption,table-cell,table-row,table-row-group,table-column|};"
  },
  "display: block": {
    "prefix": "disb",
    "body": "display: block;"
  },
  "display: inline-block": {
    "prefix": "disi",
    "body": "display: inline-block;"
  },
  "display: none": {
    "prefix": "disn",
    "body": "display: none;"
  },
  "display: flex": {
    "prefix": "disf",
    "body": "display: flex;"
  },
  "flex": {
    "prefix": "flex",
    "body": "flex: ${1:1} ${2:1} ${3:auto};",
    "description": "flex: grow shrink basis"
  },
  "flex (alt)": {
    "prefix": "fle",
    "body": "flex: ${1:1} ${2:1} ${3:auto};"
  },
  "flex-direction": {
    "prefix": "fld",
    "body": "flex-direction: ${1|row,row-reverse,column,column-reverse|};",
    "description": "initial value: row"
  },
  "flex-direction: row": {
    "prefix": "fldr",
    "body": "flex-direction: row;"
  },
  "flex-direction: column": {
    "prefix": "fldc",
    "body": "flex-direction: column;"
  },
  "flex-flow": {
    "prefix": "flf",
    "body": "flex-flow: ${1|row,row-reverse,column,column-reverse|} ${2|wrap,wrap-reverse,nowrap|};"
  },
  "flex-wrap": {
    "prefix": "flw",
    "body": "flex-wrap: ${1|wrap,wrap-reverse,nowrap|};",
    "description": "initial value: nowrap"
  },
  "float": {
    "prefix": "fl",
    "body": "float: ${1|left,right,none|};"
  },
  "float: left": {
    "prefix": "fll",
    "body": "float: left;"
  },
  "float: right": {
    "prefix": "flr",
    "body": "float: right;"
  },
  "float: none": {
    "prefix": "fln",
    "body": "float: none;"
  },
  "font-family": {
    "prefix": "ff",
    "body": "font-family: ${0:arial};"
  },
  "font-size": {
    "prefix": "fz",
    "body": "font-size: ${0:12px};"
  },
  "font-style": {
    "prefix": "fst",
    "body": "font-style: ${1|italic,oblique,normal|};"
  },
  "font-style: italic": {
    "prefix": "fsti",
    "body": "font-style: italic;"
  },
  "font-style: normal": {
    "prefix": "fstn",
    "body": "font-style: normal;"
  },
  "font-style: oblique": {
    "prefix": "fsto",
    "body": "font-style: oblique;"
  },
  "font-weight": {
    "prefix": "fw",
    "body": "font-weight: ${0:bold};"
  },
  "font-weight: bold": {
    "prefix": "fwb",
    "body": "font-weight: bold;"
  },
  "font-weight: light": {
    "prefix": "fwl",
    "body": "font-weight: light;"
  },
  "font-weight: normal": {
    "prefix": "fwn",
    "body": "font-weight: normal;"
  },
  "font": {
    "prefix": "ft",
    "body": "font: ${0:12px/1.5};",
    "description": "font: [weight style variant stretch] size/line-height family"
  },
  "height": {
    "prefix": "hei",
    "body": "height: ${0:1px};"
  },
  "justify-content": {
    "prefix": "jc",
    "body": "justify-content: ${1|flex-start,flex-end,center,space-between,space-around|};",
    "description": "initial value: flex-start"
  },
  "justify-content: flex-start": {
    "prefix": "jcfs",
    "body": "justify-content: flex-start;"
  },
  "justify-content: flex-end": {
    "prefix": "jcfe",
    "body": "justify-content: flex-end;"
  },
  "justify-content: center": {
    "prefix": "jcc",
    "body": "justify-content: center;"
  },
  "justify-content: space-around": {
    "prefix": "jcsa",
    "body": "justify-content: space-around;"
  },
  "justify-content: space-between": {
    "prefix": "jcsb",
    "body": "justify-content: space-between;"
  },
  "list-style": {
    "prefix": "lis",
    "body": "list-style: ${1|disc,circle,square,decimal,lower-roman,upper-roman,lower-alpha,upper-alpha,none,armenian,cjk-ideographic,georgian,lower-greek,hebrew,hiragana,hiragana-iroha,katakana,katakana-iroha,lower-latin,upper-latin|} ${2|outside,inside|};",
    "description": "list-style: type position image"
  },
  "list-style-position": {
    "prefix": "lisp",
    "body": "${1|outside,inside|}",
    "description": "initial value: outside"
  },
  "list-style-type": {
    "prefix": "list",
    "body": "list-style-type: ${1|disc,circle,square,decimal,lower-roman,upper-roman,lower-alpha,upper-alpha,none,armenian,cjk-ideographic,georgian,lower-greek,hebrew,hiragana,hiragana-iroha,katakana,katakana-iroha,lower-latin,upper-latin|};",
    "description": "initial value: disc"
  },
  "list-style-type: circle": {
    "prefix": "listc",
    "body": "list-style-type: circle;"
  },
  "list-style-type: disc": {
    "prefix": "listd",
    "body": "list-style-type: disc;"
  },
  "list-style-type: none": {
    "prefix": "listn",
    "body": "list-style-type: none;"
  },
  "list-style-type: square": {
    "prefix": "lists",
    "body": "list-style-type: square;"
  },
  "list-style-type: lower-roman": {
    "prefix": "listlr",
    "body": "list-style-type: lower-roman;"
  },
  "list-style-type: upper-roman": {
    "prefix": "listur",
    "body": "list-style-type: upper-roman;"
  },
  "left": {
    "prefix": "lef",
    "body": "left: ${0:0};"
  },
  "line-height": {
    "prefix": "lh",
    "body": "line-height: ${0:1.5};"
  },
  "letter-spacing": {
    "prefix": "ls",
    "body": "letter-spacing: ${0:2px};"
  },
  "letter-spacing: normal": {
    "prefix": "lsn",
    "body": "letter-spacing: normal;"
  },
  "margin": {
    "prefix": "mar",
    "body": "margin: ${0:0};"
  },
  "margin-bottom": {
    "prefix": "marb",
    "body": "margin-bottom: ${0:0};"
  },
  "margin-left": {
    "prefix": "marl",
    "body": "margin-left: ${0:0};"
  },
  "margin-right": {
    "prefix": "marr",
    "body": "margin-right: ${0:0};"
  },
  "margin-top": {
    "prefix": "mart",
    "body": "margin-top: ${0:0};"
  },
  "margin: 0 auto": {
    "prefix": "mara",
    "body": "margin: 0 auto;"
  },
  "min-height": {
    "prefix": "mih",
    "body": "min-height: ${0:1px};"
  },
  "min-width": {
    "prefix": "miw",
    "body": "min-width: ${0:1px};"
  },
  "max-height": {
    "prefix": "mah",
    "body": "max-height: ${0:1px};"
  },
  "max-width": {
    "prefix": "maw",
    "body": "max-width: ${0:1px};"
  },
  "opacity": {
    "prefix": "opa",
    "body": "opacity: ${0:0};"
  },
  "overflow": {
    "prefix": "ov",
    "body": "overflow: ${1|visible,hidden,scroll,auto,clip|};"
  },
  "overflow: auto": {
    "prefix": "ova",
    "body": "overflow: auto;"
  },
  "overflow: hidden": {
    "prefix": "ovh",
    "body": "overflow: hidden;"
  },
  "overflow: scroll": {
    "prefix": "ovs",
    "body": "overflow: scroll;"
  },
  "overflow: visible": {
    "prefix": "ovv",
    "body": "overflow: visible;"
  },
  "padding": {
    "prefix": "pad",
    "body": "padding: ${0:0};"
  },
  "padding-bottom": {
    "prefix": "padb",
    "body": "padding-bottom: ${0:0};"
  },
  "padding-left": {
    "prefix": "padl",
    "body": "padding-left: ${0:0};"
  },
  "padding-right": {
    "prefix": "padr",
    "body": "padding-right: ${0:0};"
  },
  "padding-top": {
    "prefix": "padt",
    "body": "padding-top: ${0:0};"
  },
  "position": {
    "prefix": "pos",
    "body": "position: ${1|relative,absolute,fixed,sticky,static|};"
  },
  "position absolute": {
    "prefix": "posa",
    "body": "position: absolute;"
  },
  "position fixed": {
    "prefix": "posf",
    "body": "position: fixed;"
  },
  "position relative": {
    "prefix": "posr",
    "body": "position: relative;"
  },
  "position sticky": {
    "prefix": "poss",
    "body": "position: sticky;"
  },
  "right": {
    "prefix": "rig",
    "body": "right: ${0:0};"
  },
  "text-align": {
    "prefix": "ta",
    "body": "text-align: ${1|center,left,right,justify,start,end|};"
  },
  "text-align: center": {
    "prefix": "tac",
    "body": "text-align: center;"
  },
  "text-align: left": {
    "prefix": "tal",
    "body": "text-align: left;"
  },
  "text-align: right": {
    "prefix": "tar",
    "body": "text-align: right;"
  },
  "text-decoration": {
    "prefix": "td",
    "body": "text-decoration: ${1|none,underline,overline,line-through|};"
  },
  "text-decoration: underline": {
    "prefix": "tdu",
    "body": "text-decoration: underline;"
  },
  "text-decoration: none": {
    "prefix": "tdn",
    "body": "text-decoration: none;"
  },
  "text-decoration: line-through": {
    "prefix": "tdl",
    "body": "text-decoration: line-through;"
  },
  "text-indent": {
    "prefix": "ti",
    "body": "text-indent: ${0:2em};"
  },
  "text-shadow": {
    "prefix": "ts",
    "body": "text-shadow: ${1:1px} ${2:1px} ${3:1px} ${4:1px} ${0:rgba(0, 0, 0, .5)};",
    "description": "text-shadow: x-offset y-offset blur spread color"
  },
  "text-transform": {
    "prefix": "tt",
    "body": "text-transform: ${1|capitalize,uppercase,lowercase,full-width,none|};"
  },
  "top": {
    "prefix": "top",
    "body": "top: ${0:0};"
  },
  "vertical-align": {
    "prefix": "va",
    "body": "vertical-align: ${1|baseline,middle,top,bottom,sub,super,text-top,text-bottom|};"
  },
  "vertical-align: bottom": {
    "prefix": "vab",
    "body": "vertical-align: bottom;"
  },
  "vertical-align: middle": {
    "prefix": "vam",
    "body": "vertical-align: middle;"
  },
  "vertical-align: top": {
    "prefix": "vat",
    "body": "vertical-align: top;"
  },
  "visibility": {
    "prefix": "vis",
    "body": "visibility: ${1|visible,hidden,collapse|};"
  },
  "visibility: visible": {
    "prefix": "visv",
    "body": "visibility: visible;"
  },
  "visibility: hidden": {
    "prefix": "vish",
    "body": "visibility: hidden;"
  },
  "word-break": {
    "prefix": "wb",
    "body": "word-break: ${1|break-all,keep-all,break-word,normal|};"
  },
  "width": {
    "prefix": "wid",
    "body": "width: ${0:0};"
  },
  "width: auto": {
    "prefix": "wida",
    "body": "width: auto;"
  },
  "white-space": {
    "prefix": "ws",
    "body": "white-space: ${1|nowrap,pre,pre-wrap,pre-line,normal|};"
  },
  "white-space: nowrap": {
    "prefix": "wsn",
    "body": "white-space: nowrap;"
  },
  "white-space: pre": {
    "prefix": "wsp",
    "body": "white-space: pre;"
  },
  "word-wrap": {
    "prefix": "ww",
    "body": "word-wrap: ${1|break-word,break-spaces,normal|};"
  },
  "z-index": {
    "prefix": "zi",
    "body": "z-index: ${0:-1};"
  },
  "@import": {
    "prefix": "imp",
    "body": "@import '${0:filename}';"
  },
  "@mixin": {
    "prefix": "mix",
    "body": "@mixin ${1:name} {\n  $0\n}"
  },
  "@include": {
    "prefix": "inc",
    "body": "@include ${0:mixin};"
  },
  "@keyframes": {
    "prefix": "key",
    "body": "@keyframes ${1:name} {\n  $0\n}"
  },
  "@media": {
    "prefix": "med",
    "body": "@media screen and (${1:max-width: 300px}) {\n  $0\n}"
  },
  "!important": {
    "prefix": "!",
    "body": "!important"
  },
  "!important (alt)": {
    "prefix": "i",
    "body": "!important"
  },
  "css-grid": {
    "prefix": "css-grid",
    "body": ".css-grid {  --min: 15ch;  --gap: 1rem;  display: grid;  grid-gap: var(--gap);  /* min() with 100% prevents overflow  in extra narrow spaces */  grid-template-columns: repeat(auto-fit, minmax(min(100%, var(--min)), 1fr));}"
  },
  "flexbox-grid": {
    "prefix": "flexbox-grid",
    "body": ".flexbox-grid {  --min: 10ch;  --gap: 1rem;  display: flex;  flex-wrap: wrap;  gap: var(--gap);b .smol-flexbox-grid > * {  flex: 1 1 var(--min);}"
  },
  "centered": {
    "prefix": "centered",
    "body": ".centered {  display: grid;  place-content: center;}"
  },
  "responsive-padding": {
    "prefix": "rpad",
    "body": ".responsive-padding {  padding: 1.5rem clamp(1rem, 5%, 3rem);}"
  },
  "responsive-sidebar": {
    "prefix": "rsidebar",
    "body": ".responsive-sidebar {  display: grid;  grid-template-columns: fit-content(20ch) minmax(min(50vw, 30ch), 1fr);}"
  },
  "scrollsnap": {
    "prefix": "scrollsnap",
    "body": ".scrollsnap {  /* Set up container positioning */  display: grid;  grid-auto-flow: column;  grid-gap: 1.5rem;  /* Enable overflow along our scroll axis */  overflow-x: auto;  /* Define axis and scroll type, where  `mandatory` means any scroll attempt will  cause a scroll to the next item */  scroll-snap-type: x mandatory;  padding: 0 0 1.5rem;  -webkit-overflow-scrolling: touch;}.scrollsnap > * {  width: min(45ch, 60vw);  /* Choose how to align children on scroll */  scroll-snap-align: center;  /* Prevents scrolling past more than one child */  scroll-snap-stop: always;}"
  },
  "rise-effect": {
    "prefix": "rise-effect",
    "body": ".rise:hover > * {  transform: translateY(-25%);}"
  },
  "rotate-effect": {
    "prefix": "rotate-effect",
    "body": ".rotate:hover > * { transform: rotate(15deg);}"
  },
  "zoom-effect": {
    "prefix": "rotate-effect",
    "body": ".zoom:hover > * {  transform: scale(1.1);}"
  },
  "fade-effect": {
    "prefix": "fade-effect",
    "body": ".fade > * {  --transition-property: opacity;  --transition-duration: 500ms;a} .fade:hover > * {  opacity: 0;}"
  },
  "ubreakable-boxes": {
    "prefix": "unbreakable",
    "body": ".unbreakable-box {  --color-light: #E0D4F6;  --color-dark: #675883;  margin: 2rem auto;  color: var(--color-dark);  background-color: var(--color-light);  font-size: 1.15rem;  /* Smol Responsive Padding FTW! */  padding: clamp(.75rem, 3%, 2rem);  /* Provide a max-width and prevent overflow */  width: min(50ch, 90%);  /* Help prevent overflow of long words/names/URLs */  word-break: break-word;  /* Optional, not supported for all languages */  hyphens: auto;} .unbreakable-box footer {  padding: 0.25em 0.5em;  margin-top: 1rem;  color: var(--color-light);  background-color: var(--color-dark);  font-size: 0.9rem;  /* Creates a visual box shrunk to `max-content` */  width: fit-content;}"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/python/comprehension.json`:

```````json
{
  "List comprehension": {
    "prefix": "lc",
    "body": "[${1:value} for ${2:value} in ${3:iterable}]$0",
    "description": "List comprehension for creating a list based on existing lists."
  },
  "List comprehension if else": {
    "prefix": "lcie",
    "body": "[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:iterable}]$0",
    "description": "List comprehension for creating a list based on existing lists, with conditional if-else statement."
  },
  "List comprehension if filter": {
    "prefix": "lci",
    "body": "[${1:value} for ${2:value} in ${3:iterable} if ${4:condition}$0]",
    "description": "List comprehension for creating a list based on existing lists, with conditional if statement."
  },
  "Dictionary comprehension": {
    "prefix": "dc",
    "body": "{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable}}$0",
    "description": "Handy and faster way to create dictories based on existing dictionaries."
  },
  "Dictionary comprehension if filter": {
    "prefix": "dci",
    "body": "{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable} if ${6:condition}}$0",
    "description": "Handy and faster way to create dictories based on existing dictionaries, with conditional if statement."
  },
  "Set comprehension": {
    "prefix": "sc",
    "body": "{${1:value} for ${2:value} in ${3:iterable}}$0",
    "description": "Create a set based on existing iterables."
  },
  "Set Comprehension if filter": {
    "prefix": "sci",
    "body": "{${1:value} for ${2:value} in ${3:iterable} if ${4:condition}}$0",
    "description": "Create a set based on existing iterables, with condition if statement."
  },
  "Generator comprehension": {
    "prefix": "gc",
    "body": "(${1:key} for ${2:value} in ${3:iterable})$0",
    "description": "Create a generator based on existing iterables."
  },
  "Generator comprehension if filter": {
    "prefix": "gci",
    "body": "(${1:key} for ${2:value} in ${3:iterable} if ${4:condition})$0",
    "description": "Create a generator based on existing iterables, with condition if statement."
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/python/unittest.json`:

```````json
{
  "Assert equal": {
    "prefix": "ase",
    "body": "self.assertEqual(${1:expected}, ${2:actual}${3:, '${4:message}'})$0"
  },
  "Assert not equal": {
    "prefix": "asne",
    "body": "self.assertNotEqual(${1:expected}, ${2:actual}${3:, '${4:message}'})$0"
  },
  "Assert raises": {
    "prefix": "asr",
    "body": "self.assertRaises(${1:exception}, ${2:callable}, ${3:args})$0"
  },
  "Assert True": {
    "prefix": "ast",
    "body": "self.assertTrue(${1:actual}${2:, '${3:message}'})$0"
  },
  "Assert False": {
    "prefix": "asf",
    "body": "self.assertFalse(${1:actual}${2:, '${3:message}'})$0"
  },
  "Assert is": {
    "prefix": "asi",
    "body": "self.assertIs(${1:expected}, ${2:actual}${3:, '${4:message}'})$0"
  },
  "Assert is not": {
    "prefix": "asint",
    "body": "self.assertIsNot(${1:expected}, ${2:actual}${3:, '${4:message}'})$0"
  },
  "Assert is None": {
    "prefix": "asino",
    "body": "self.assertIsNone(${1:actual}${2:, '${3:message}'})$0"
  },
  "Assert is not None": {
    "prefix": "asinno",
    "body": "self.assertIsNotNone(${1:actual}${2:, '${3:message}'})$0"
  },
  "Assert in": {
    "prefix": "asin",
    "body": "self.assertIn(${1:needle}, ${2:haystack}${3:, '${4:message}'})$0"
  },
  "Assert not in": {
    "prefix": "asni",
    "body": "self.assertNotIn(${1:needle}, ${2:haystack}${3:, '${4:message}'})$0"
  },
  "Assert": {
    "prefix": "as",
    "body": "self.assert_(${1:boolean expression}${2:, '${3:message}'})$0"
  },
  "Fail (a test)": {
    "prefix": "fail",
    "body": "self.fail('${1:message}')$0"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/python/base.json`:

```````json
{
  "#!/usr/bin/env python": {
    "prefix": "env",
    "body": "#!/usr/bin/env python\n$0",
    "description": "Adds shebang line for default python interpreter."
  },
  "#!/usr/bin/env python3": {
    "prefix": "env3",
    "body": "#!/usr/bin/env python3\n$0",
    "description": "Adds shebang line for default python 3 interpreter."
  },
  "# -*- coding=utf-8 -*-": {
    "prefix": "enc",
    "body": "# -*- coding=utf-8 -*-\n$0",
    "description": "set default python2.x encoding specification to utf-8 as it is mentioned in pep-0263."
  },
  "# coding=utf-8": {
    "prefix": "enco",
    "body": "# coding=utf-8\n$0",
    "description": "Set default python3 encoding specification to utf-8, by default this is the encoding for python3.x as it is mentioned in pep-3120."
  },
  "from future import ...": {
    "prefix": "fenc",
    "body": [
      "# -*- coding: utf-8 -*-",
      "from __future__ import absolute_import, division, print_function, unicode_literals"
    ],
    "description": "Import future statement definitions for python2.x scripts using utf-8 as encoding."
  },
  "from future import ... v1": {
    "prefix": "fenco",
    "body": [
      "# coding: utf-8",
      "from __future__ import absolute_import, division, print_function, unicode_literals"
    ],
    "description": "Import future statement definitions for python3.x scripts using utf-8 as encoding."
  },
  "import": {
    "prefix": "im",
    "body": "import ${1:package/module}$0",
    "description": "Import a package or module"
  },
  "from ... import ...": {
    "prefix": "fim",
    "body": "from ${1:package/module} import ${2:names}$0",
    "description": "Import statement that allows individual objects from the module to be imported directly into the caller’s symbol table."
  },
  "class": {
    "prefix": "class",
    "body": ["class ${1:classname}(${2:object}):", "\t${3:pass}"],
    "description": "Code snippet for a class definition"
  },
  "New class": {
    "prefix": "classi",
    "body": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1.}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0",
    "description": "Code snippet for a class definition."
  },
  "New method": {
    "prefix": "defs",
    "body": "def ${1:mname}(self, ${2:arg}):\n\t${3:pass}$0",
    "description": "Code snippet for a class method definition."
  },
  "New function": {
    "prefix": "def",
    "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
    "description": "Code snippet for function definition."
  },
  "New async function": {
    "prefix": "adef",
    "body": "async def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
    "description": "Code snippet for async function definition."
  },
  "New property": {
    "prefix": "property",
    "body": "@property\ndef ${1:foo}(self):\n    \"\"\"${2:The $1 property.}\"\"\"\n    ${3:return self._$1}\n@${4:$1}.setter\ndef ${5:$1}(self, value):\n    ${6:self._$1} = value",
    "description": "New property: get and set via decorator"
  },
  "if": {
    "prefix": "if",
    "body": "if ${1:condition}:\n\t${2:pass}$0",
    "description": "Code snippet for the if statement."
  },
  "if/else": {
    "prefix": "if/else",
    "body": ["if ${1:condition}:", "\t${2:pass}", "else:", "\t${3:pass}"],
    "description": "Code snippet for an if statement with else"
  },
  "elif": {
    "prefix": "elif",
    "body": ["elif ${1:expression}:", "\t${2:pass}"],
    "description": "Code snippet for an elif"
  },
  "else": {
    "prefix": "else",
    "body": ["else:", "\t${1:pass}"],
    "description": "Code snippet for an else"
  },
  "for": {
    "prefix": "for",
    "body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
    "description": "Code snippet to create a for loop structure."
  },
  "for/else": {
    "prefix": "for/else",
    "body": [
      "for ${1:target_list} in ${2:expression_list}:",
      "\t${3:pass}",
      "else:",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a for loop with else"
  },
  "while": {
    "prefix": "while",
    "body": "while ${1:condition}:\n\t${2:pass}$0",
    "description": "Code snippet to create a while loop structure."
  },
  "while/else": {
    "prefix": "while/else",
    "body": ["while ${1:expression}:", "\t${2:pass}", "else:", "\t${3:pass}"],
    "description": "Code snippet for a while loop with else"
  },
  "try:except:": {
    "prefix": "try",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}$0",
    "description": "Code Snippet for a try and except blocks."
  },
  "try:except:else:finally": {
    "prefix": "tryef",
    "body": "try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}$0",
    "description": "Code Snippet for a try/except/finally with else statement."
  },
  "try:except:else": {
    "prefix": "trye",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}$0",
    "description": "Code Snippet for a try/except with else statement."
  },
  "try:except:finally": {
    "prefix": "tryf",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}$0",
    "description": "Code Snippet for a try/except/finally."
  },
  "with": {
    "prefix": "with",
    "body": ["with ${1:expression} as ${2:target}:", "\t${3:pass}"],
    "description": "Code snippet for a with statement"
  },
  "self": {
    "prefix": ".",
    "body": "self.$0",
    "description": "Shortend snippet to reference the self property in an object."
  },
  "__magic__": {
    "prefix": "__",
    "body": "__${1:init}__$0",
    "description": "Code snippet to create magic methods."
  },
  "if __name__ == \"__main__\"": {
    "prefix": "ifmain",
    "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
    "description": "Create implicitly all the code at the top level using the __name__ special variable."
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/python/python.json`:

```````json
{
  "try/except": {
    "prefix": "try/except",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a try/except statement"
  },
  "try/finally": {
    "prefix": "try/finally",
    "body": ["try:", "\t${1:pass}", "finally:", "\t${2:pass}"],
    "description": "Code snippet for a try/finally statement"
  },
  "try/except/else": {
    "prefix": "try/except/else",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "else:",
      "\t${5:pass}"
    ],
    "description": "Code snippet for a try/except/else statement"
  },
  "try/except/finally": {
    "prefix": "try/except/finally",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "finally:",
      "\t${5:pass}"
    ],
    "description": "Code snippet for a try/except/finally statement"
  },
  "try/except/else/finally": {
    "prefix": "try/except/else/finally",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "else:",
      "\t${5:pass}",
      "finally:",
      "\t${6:pass}"
    ],
    "description": "Code snippet for a try/except/else/finally statement"
  },
  "def(class method)": {
    "prefix": "def class method",
    "body": ["def ${1:funcname}(self, ${2:parameter_list}):", "\t${3:pass}"],
    "description": "Code snippet for a class method"
  },
  "def(static class method)": {
    "prefix": "def static class method",
    "body": [
      "@staticmethod",
      "def ${1:funcname}(${2:parameter_list}):",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a static class method"
  },
  "def(abstract class method)": {
    "prefix": "def abstract class method",
    "body": [
      "def ${1:funcname}(self, ${2:parameter_list}):",
      "\traise NotImplementedError"
    ],
    "description": "Code snippet for an abstract class method"
  },
  "lambda": {
    "prefix": "lambda",
    "body": ["lambda ${1:parameter_list}: ${2:expression}"],
    "description": "Code snippet for a lambda statement"
  },
  "if(main)": {
    "prefix": "__main__",
    "body": ["if __name__ == \"__main__\":", "    ${1:pass}"],
    "description": "Code snippet for a `if __name__ == \"__main__\": ...` block"
  },
  "async/def": {
    "prefix": "async/def",
    "body": ["async def ${1:funcname}(${2:parameter_list}):", "\t${3:pass}"],
    "description": "Code snippet for an async statement"
  },
  "async/for": {
    "prefix": "async/for",
    "body": ["async for ${1:target} in ${2:iter}:", "\t${3:block}"],
    "description": "Code snippet for an async for statement"
  },
  "async/for/else": {
    "prefix": "async/for/else",
    "body": [
      "async for ${1:target} in ${2:iter}:",
      "\t${3:block}",
      "else:",
      "\t${4:block}"
    ],
    "description": "Code snippet for an async for statement with else"
  },
  "async/with": {
    "prefix": "async/with",
    "body": ["async with ${1:expr} as ${2:var}:", "\t${3:block}"],
    "description": "Code snippet for an async with statement"
  },
  "add/new/cell": {
    "prefix": "add/new/cell",
    "body": "# %%",
    "description": "Code snippet to add a new cell"
  },
  "mark/markdown": {
    "prefix": "mark/markdown",
    "body": "# %% [markdown]",
    "description": "Code snippet to add a new markdown cell"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/python/debug.json`:

```````json
{
  "PDB set trace": {
    "prefix": "pdb",
    "body": "__import__('pdb').set_trace()$0",
    "description": "Code snippet for pdb debug"
  },
  "iPDB set trace": {
    "prefix": "ipdb",
    "body": "__import__('ipdb').set_trace()$0",
    "description": "Code snippet for ipdb debug"
  },
  "rPDB set trace": {
    "prefix": "rpdb",
    "body": "import rpdb2; rpdb2.start_embedded_debugger('${1:debug_password}')$0"
  },
  "PuDB set trace": {
    "prefix": "pudb",
    "body": "import pudb; pudb.set_trace()$0",
    "description": "Code snippet for pudb debug"
  },
  "IPython set trace": {
    "prefix": "ipydb",
    "body": "from IPython import embed; embed()$0"
  },
  "Celery set trace": {
    "prefix": "rdb",
    "body": "from celery.contrib import rdb; rdb.set_trace()$0",
    "description": "Code snippet for celery remote debugger breakpoint"
  },
  "Pretty print": {
    "prefix": "pprint",
    "body": "__import__('pprint').pprint(${1:expression})$0"
  }
}

```````

`/home/tlh/.config/nvim/snippets/vscode/kotlin.json`:

```````json
{
  "open keyword": {
    "prefix": "open",
    "body": ["open "],
    "description": "Snippet for open keyword"
  },
  "override keyword": {
    "prefix": "override",
    "body": ["override "],
    "description": "Snippet for override keyword"
  },
  "class": {
    "prefix": "class",
    "body": ["class ${TM_FILENAME_BASE} {", "\t$0", "}"],
    "description": "Snippet for class declaration"
  },
  "init": {
    "prefix": "init",
    "body": ["init {\n\t$0\n}"],
    "description": "Snippet for init block"
  },
  "set": {
    "prefix": "set",
    "body": ["set(${1:arg}: ${2:type}) {\n\t$0\n}"],
    "description": "Snippet for set block"
  },
  "get": {
    "prefix": "get",
    "body": ["get() ${1:value}"],
    "description": "Snippet for get block"
  },
  "constructor": {
    "prefix": "constructor",
    "body": ["constructor(${1:arg}: ${2:type}) {\n\t$0\n}"],
    "description": "Snippet for constructor function"
  },
  "function declaration": {
    "prefix": "fun",
    "body": "fun ${1:main}(${2:args} : ${3:Array<String>}) {\n\t$0\n}",
    "description": "Snippet for function declaration"
  },
  "variable declaration": {
    "prefix": "var",
    "body": "var ${1:name} = ${2:value}",
    "description": "Snippet for a variable"
  },
  "variable declaration with val": {
    "prefix": "val",
    "body": "val ${1:name} = ${2:value}",
    "description": "Snippet for a variable"
  },
  "if": {
    "prefix": "if",
    "body": "if (${1:condition}) ${2:value}",
    "description": "Snippet for if expression"
  },
  "if...else": {
    "prefix": "ifelse",
    "body": "if (${1:condition}) \n\t${2:value}\nelse\n\t${3:value}",
    "description": "Snippet for if...else expression"
  },
  "when": {
    "prefix": "when",
    "body": "when (${1:value}) {\n\t${2:branch} -> ${3:branchValue}\n\n\telse -> ${4:defaultValue}\n}",
    "description": "Snippet for when expression"
  },
  "while": {
    "prefix": "while",
    "body": "while (${1:condition}) {\n\t$0\n}",
    "description": "Snippet for while expression"
  },
  "do...while": {
    "prefix": "do",
    "body": "do {\n\t$1\n} while (${2:condition})",
    "description": "Snippet for do...while expression"
  },
  "for": {
    "prefix": "for",
    "body": "for (${1:i} in ${2:0}..${3:5})\n\t${4:expression}",
    "description": "Snippet for iterating array with for loop"
  },
  "foreach": {
    "prefix": "foreach",
    "body": "for (${1:item} in ${2:list})\n\t${3:expression}",
    "description": "Snippet for iterating array with for loop"
  },
  "try...catch": {
    "prefix": "try",
    "body": "try {\n\t$1\n} catch(${2:e}: ${3:Type}){\n\t$4\n}",
    "description": "Snippet for try block"
  },
  "finally": {
    "prefix": "finally",
    "body": "finally {\n\t$1\n}",
    "description": "Snippet for finally block"
  },
  "package": {
    "prefix": "package",
    "body": "package ${1:packageName}",
    "description": "Snippet for package statement"
  },
  "import": {
    "prefix": "import",
    "body": "import ${1:packageName}",
    "description": "Snippet for import statement"
  }
}

```````

`/home/tlh/.config/nvim/snippets/javascript.lua`:

```````lua
local ls = require('luasnip')
local s = ls.s -- Snippet
local i = ls.i -- Insert node
local t = ls.t -- Text node

local d = ls.dynamic_node -- Dynamic node
local c = ls.choice_node -- Choice node
local f = ls.function_node -- Function node
local sn = ls.snippet_node -- Snippet node

local fmt = require('luasnip.extras.fmt').fmt -- Format
local rep = require('luasnip.extras').rep -- Repeat

local snippets, autosnippets = {}, {}

local group = vim.api.nvim_create_augroup('JavaScript Snippets', { clear = true })
local file_pattern = '*.js'

local function cs(trigger, nodes, opts)
    local snippet = s(trigger, nodes)
    local target_table = snippets

    local pattern = file_pattern
    local keymaps = {}

    if opts ~= nil then
        -- check for custom pattern
        if opts.pattern then
            pattern = opts.pattern
        end

        -- if opts is a string
        if type(opts) == 'string' then
            if opts == 'auto' then
                target_table = autosnippets
            else
                table.insert(keymaps, { 'i', opts })
            end
        end

        -- if opts is a table
        if opts ~= nil and type(opts) == 'table' then
            for _, keymap in ipairs(opts) do
                if type(keymap) == 'string' then
                    table.insert(keymaps, { 'i', keymap })
                else
                    table.insert(keymaps, keymap)
                end
            end
        end

        -- set autocmd for each keymap
        if opts ~= 'auto' then
            for _, keymap in ipairs(keymaps) do
                vim.api.nvim_create_autocmd('BufEnter', {
                    pattern = pattern,
                    group = group,
                    callback = function()
                        vim.keymap.set(keymap[1], keymap[2], function()
                            ls.snip_expand(snippet)
                        end, { noremap = true, silent = true, buffer = true })
                    end,
                })
            end
        end
    end

    table.insert(target_table, snippet) -- insert snippet into appropriate table
end

-- Start Refactoring --

local forin = s(
    'forin',
    fmt(
        [[
for (const {} in {}) {{
    {}
}}
]],
        {
            i(1, 'iterator'),
            i(2, 'array'),
            i(3),
        }
    )
)

table.insert(snippets, forin)

-- End Refactoring --

return snippets, autosnippets

```````

`/home/tlh/.config/nvim/snippets/all.lua`:

```````lua
-- As defining all of the snippet-constructors (s, c, t, ...) in every file is rather cumbersome,
-- luasnip will bring some globals into scope for executing these files.
-- defined by snip_env in setup
require("luasnip.loaders.from_lua").lazy_load()
local env = snip_env

return {
  env.s("date", env.p(os.date, "%Y-%m-%d")),
  env.s("time", env.p(os.date, "%H:%M")),
  env.s("htime", env.p(os.date, "%Y-%m-%dT%H:%M:%S+10:00")),
}

```````

`/home/tlh/.config/nvim/snippets/lua.lua`:

```````lua
local ls = require('luasnip')
local s = ls.s -- Snippet
local i = ls.i -- Insert node
local t = ls.t -- Text node

local d = ls.dynamic_node -- Dynamic node
local c = ls.choice_node -- Choice node
local f = ls.function_node -- Function node
local sn = ls.snippet_node -- Snippet node

local fmt = require('luasnip.extras.fmt').fmt -- Format
local rep = require('luasnip.extras').rep -- Repeat

local snippets, autosnippets = {}, {}

local group = vim.api.nvim_create_augroup('Lua Snippets', { clear = true })
local file_pattern = '*.lua'

local function cs(trigger, nodes, opts)
    local snippet = s(trigger, nodes)
    local target_table = snippets

    local pattern = file_pattern
    local keymaps = {}

    if opts ~= nil then
        -- check for custom pattern
        if opts.pattern then
            pattern = opts.pattern
        end

        -- if opts is a string
        if type(opts) == 'string' then
            if opts == 'auto' then
                target_table = autosnippets
            else
                table.insert(keymaps, { 'i', opts })
            end
        end

        -- if opts is a table
        if opts ~= nil and type(opts) == 'table' then
            for _, keymap in ipairs(opts) do
                if type(keymap) == 'string' then
                    table.insert(keymaps, { 'i', keymap })
                else
                    table.insert(keymaps, keymap)
                end
            end
        end

        -- set autocmd for each keymap
        if opts ~= 'auto' then
            for _, keymap in ipairs(keymaps) do
                vim.api.nvim_create_autocmd('BufEnter', {
                    pattern = pattern,
                    group = group,
                    callback = function()
                        vim.keymap.set(keymap[1], keymap[2], function()
                            ls.snip_expand(snippet)
                        end, { noremap = true, silent = true, buffer = true })
                    end,
                })
            end
        end
    end

    table.insert(target_table, snippet) -- insert snippet into appropriate table
end

-- Start Refactoring --

local mySnip = s(
    'mySnip',
    fmt(
        [[
local {} = function({})
    {}
end
]],
        {
            i(1, 'myVar'),
            c(2, { t(''), t('myArg') }),
            i(3, '-- TODO: '),
        }
    )
)

local config_functionSnip = s(
    'conffn',
    fmt(
        [[
config = function()
    {}
end
]],
        {
            i(1),
        }
    )
)

table.insert(snippets, mySnip)
table.insert(snippets, config_functionSnip)

-- End Refactoring --

return snippets, autosnippets

```````

`/home/tlh/.config/nvim/snippets/yaml.lua`:

```````lua
-- As defining all of the snippet-constructors (s, c, t, ...) in every file is rather cumbersome,
-- luasnip will bring some globals into scope for executing these files.
-- defined by snip_env in setup
require("luasnip.loaders.from_lua").lazy_load()
---@diagnostic disable-next-line: undefined-global
local env = snip_env

return {
  env.s(
    "kust",
    env.fmt(
      [[
      ---
      apiVersion: kustomize.config.k8s.io/v1beta1
      kind: Kustomization
      namespace: foo
      commonLabels:
        app.kubernetes.io/managed-by: kustomize
      commonAnnotations:
        foo: bar
      nameSuffix: foo
      resources:
        - {}
      patchesStrategicMerge:
        - {}
      {}
      ]],
      {
        env.i(1, "resources"),
        env.i(2, "patchesStrategicMerge"),
        env.i(0),
      }
    )
  ),
  env.s(
    "kust_patch",
    env.fmt(
      [[
      patches:
        - target:
            group: {}
            version: {}
            kind: {}
          patch: |-
            - op: {}
              path: {}
              value: {}
      {}
      ]],
      {
        env.i(1, "group"),
        env.i(2, "version"),
        env.i(3, "kind"),
        env.i(4, "operation"),
        env.i(5, "path"),
        env.i(6, "value"),
        env.i(0),
      }
    )
  ),
  env.s(
    "kust_img",
    env.fmt(
      [[
      images:
        - name: {}
          newName: {}
          newTag: {}
      {}
      ]],
      {
        env.i(1, "namge"),
        env.i(2, "newName"),
        env.i(3, "newTag"),
        env.i(0),
      }
    )
  ),
  env.s(
    "kust_cm",
    env.fmt(
      [[
      configMapGenerator:
        - name: {}
          files:
            - {}
          options:
            labels:
              - foo: bar
      {}
      ]],
      {
        env.i(1, "name"),
        env.i(2, "file"),
        env.i(0),
      }
    )
  ),
}

```````